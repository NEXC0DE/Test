{"version":3,"sources":["webpack:///./src/pages/guides/domain-configuration.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-guides-domain-configuration-mdx-32051ff22ac47c5ea6a4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator supports managing DataPower configuration through the `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource. This allows for independent management of each application domain on the DataPower Gateway.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">The Domains Definition</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Creating a Secret</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Config Method: dpApp</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Updating Domains</AnchorLink>\n    </AnchorLinks>\n    <h2>{`The Domains Definition`}</h2>\n    <p>{`The following snippet of the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource contains all fields relevant to `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{`, filled with example values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`domains:\n- name: \"default\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"default-cert\"\n  - certType: \"sharedcerts\"\n    secret: \"shared-cert\"\n  dpApp:\n    config:\n    - \"default-config\"\n    local:\n    - \"default-local\"\n- name: \"example\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"example-cert\"\n    subPath: \"example/path\"\n  dpApp:\n    config:\n    - \"example-config\"\n    local:\n    - \"example-local\"\n`}</code></pre>\n    <h3><inlineCode parentName=\"h3\">{`domains`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`domains`}</inlineCode>{` is a list of DataPower Domains that should be configured. Domains are comprised of `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`certs`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`configMethod`}</inlineCode>{` fields. For a Domain to be created, a configuration method must be defined. The supported methods are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dpApp`}</inlineCode>{` - Domain configuration via `}<inlineCode parentName=\"li\">{`config`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`local`}</inlineCode>{` ConfigMaps.`}</li>\n    </ul>\n    <h3><inlineCode parentName=\"h3\">{`name`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` field is just that: the name of the domain. This will propagate into the pod and be the name of the resultant DataPower Domain.`}</p>\n    <h3><inlineCode parentName=\"h3\">{`certs`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`certs`}</inlineCode>{` is a list of all certificate, key, or general crypto files that need to be dropped into a Domain. There are two fields for each item in the `}<inlineCode parentName=\"p\">{`certs`}</inlineCode>{` list:`}</p>\n    <h4><inlineCode parentName=\"h4\">{`certType`}</inlineCode></h4>\n    <p>{`Defines the type of cert. The accepted values are `}<inlineCode parentName=\"p\">{`usrcerts`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sharedcerts`}</inlineCode>{`. A `}<inlineCode parentName=\"p\">{`usrcerts`}</inlineCode>{` type will apply only to the specific Domain. A `}<inlineCode parentName=\"p\">{`sharedcerts`}</inlineCode>{` type will be available to all Domains. The best practice for `}<inlineCode parentName=\"p\">{`sharedcerts`}</inlineCode>{` types is to associate them with the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` domain, but this is not required.`}</p>\n    <h4><inlineCode parentName=\"h4\">{`secret`}</inlineCode></h4>\n    <p>{`Defines the name of the Kubernetes or OpenShift secret containing the crypto files. This secret can contain any number of certificates.`}</p>\n    <h4><inlineCode parentName=\"h4\">{`subPath`}</inlineCode></h4>\n    <p>{`Defines the SubPath to place the cert into. This field is optional, and only allowed if `}<inlineCode parentName=\"p\">{`certType`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`usrcerts`}</inlineCode>{`. The provided SubPath must be a relative path, and will be appended to the domainâ€™s directory path. If not included or left empty, the cert will not be placed in a subpath. An example would be `}<inlineCode parentName=\"p\">{`dir1/dir2`}</inlineCode>{`.`}</p>\n    <h3>{`Creating a Secret`}</h3>\n    <p>{`To create a secret containing your crypto information, use:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n`}</code></pre>\n    <p>{`Or alternatively, for a TLS secret:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n`}</code></pre>\n    <h2>{`Config Method: `}<inlineCode parentName=\"h2\">{`dpApp`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`dpApp`}</inlineCode>{` is a basic configuration method for the DataPower operand. It takes two ConfigMap arrays:`}</p>\n    <h3><inlineCode parentName=\"h3\">{`config`}</inlineCode></h3>\n    <ul>\n      <li parentName=\"ul\">{`Array of ConfigMaps containing DataPower configuration file(s).`}</li>\n      <li parentName=\"ul\">{`At least one ConfigMap must be provided for `}<inlineCode parentName=\"li\">{`config`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Each ConfigMap specified in `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` must be a ConfigMap created directly from standard DataPower config file(s).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create configmap domain-config --from-file=/path/to/domain.cfg\n`}</code></pre>\n    <p>{`You can also specify multiple config files, which will all be used to build the ConfigMap, and thus be applied to the same target Domain:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create configmap domain-config \\\\\n  --from-file=/path/to/domain-config-pt1.cfg \\\\\n  --from-file=/path/to/domain-config-pt2.cfg \\\\\n  --from-file=/path/to/domain-config-pt3.cfg\n`}</code></pre>\n    <p>{`Depending on your use-case, you can either create the ConfigMap from multiple files, or create a ConfigMap for each config part, and list each ConfigMap in the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` array. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`spec:\n  domains:\n  - name: \"test-domain\"\n    dpApp:\n      config:\n      - \"domain-config-pt1\"\n      - \"domain-config-pt2\"\n      - \"domain-config-pt3\"\n`}</code></pre>\n    <h3><inlineCode parentName=\"h3\">{`local`}</inlineCode></h3>\n    <ul>\n      <li parentName=\"ul\">{`Array of ConfigMaps each containing a tarball of local files to be used by the Domain.`}</li>\n      <li parentName=\"ul\">{`This value is optional.`}</li>\n    </ul>\n    <p>{`Each ConfigMap specified in `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` must be a ConfigMap created from a tarball containing local files for the Domain. The expectation is that the tarball contains the top-level files and directories you expect to be placed in the `}<inlineCode parentName=\"p\">{`local:///`}</inlineCode>{` directory of the targeted domain.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create configmap domain-local --from-file=/path/to/domain-local.tar.gz\n`}</code></pre>\n    <p>{`The contents of each tarball are expanded and then copied into the Domainâ€™s `}<inlineCode parentName=\"p\">{`local:///`}</inlineCode>{` filesystem.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Note that if multiple ConfigMaps are specified for `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{`, you must be aware that if the same file/path exists in more than one ConfigMap the resulting file will be overwritten by the last ConfigMap to provide that file.`}</p>\n    </InlineNotification>\n    <h3>{`Example`}</h3>\n    <p>{`This example shows the complete end-to-end flow for creating all resources necessary to configure a domain via the `}<inlineCode parentName=\"p\">{`dpApp`}</inlineCode>{` configuration method.`}</p>\n    <p>{`Starting with a `}<inlineCode parentName=\"p\">{`testdomain`}</inlineCode>{` structure as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ ls\ntestdomain\n\n$ tree\n.\n\\`-- testdomain\n    |-- config\n    |   \\`-- testdomain.cfg\n    \\`-- local\n        \\`-- test.xsl\n\n3 directories, 2 files\n`}</code></pre>\n    <p>{`Create the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` ConfigMap from the `}<inlineCode parentName=\"p\">{`cfg`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create configmap testdomain-config \\\\\n  --from-file=/path/to/testdomain/config/testdomain.cfg\n`}</code></pre>\n    <p>{`Create a tarball for the `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` files:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`tar --directory=/path/to/testdomain/local -czvf testdomain-local.tar.gz .\n`}</code></pre>\n    <p>{`The created tarball should have the local file(s) at the top-level:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ tar -tzvf testdomain-local.tar.gz\ndrwxrwxr-x aharbis/aharbis   0 2020-04-09 15:37 ./\n-rw-rw-r-- aharbis/aharbis  14 2020-04-09 15:27 ./test.xsl\n`}</code></pre>\n    <p>{`Create the `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` ConfigMap from the tarball:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create configmap testdomain-local \\\\\n  --from-file=/path/to/testdomain-local.tar.gz\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` snippet with `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{` spec for the `}<inlineCode parentName=\"p\">{`testdomain`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`spec:\n  domains:\n  - name: \"testdomain\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n`}</code></pre>\n    <p>{`Once deployed via the DataPower Operator, the config and local files could be validated from the DataPower CLI.`}</p>\n    <p>{`To attach to a given DataPower Pod:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl -n namespace attach -it pod/name -c datapower\n`}</code></pre>\n    <p>{`From the DataPower CLI (once logged in):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`idg# config\nidg(config)# switch testdomain\nidg[testdomain](config)# dir local:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   test.xsl                     Apr 9, 2020 3:54:03 PM           14\n\n   227782.0 MB available to local:\n\nidg[testdomain](config)# dir config:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   testdomain.cfg               Apr 9, 2020 3:54:03 PM           24\n\n   227782.0 MB available to config:\n`}</code></pre>\n    <h2>{`Updating Domains`}</h2>\n    <p>{`As described above, Domains are comprised of ConfigMaps and Secrets that exist in the k8s cluster. It is expected that over time a Domain configuration will need to be updated, including the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` ConfigMaps and Secrets that comprise the `}<inlineCode parentName=\"p\">{`serts`}</inlineCode>{` for the Domain. These ConfigMaps and Secrets can be updated in-place in the cluster, and the DataPower Operator will automatically reconcile those changes.`}</p>\n    <p>{`When an update is detected on a ConfigMap or Secret referenced by a Domain, a rolling update is triggered across the Pods in the StatefulSet. This allows for Domains to be updated without modifying the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource directly.`}</p>\n    <p>{`For example, if we define the following Domain spec:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`spec:\n  domains:\n  - name: \"testdomain\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"testdomain-certs\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n`}</code></pre>\n    <p>{`We could then update any of the following objects by deleting them in the cluster and recreating them with the same name:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`secret/testdomain-certs`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`configmap/testdomain-config`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`configmap/testdomain-local`}</inlineCode></li>\n    </ul>\n    <p>{`The StatefulSet will include annotations that provide timestamps for the last time a particular domain was modified or reconciled. You can see these by describing the StatefulSet resource in the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      annotations:\n        datapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\n        datapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}