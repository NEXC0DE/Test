(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{h4zh:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return O}));t("91GP"),t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("q1tI");var a=t("7ljp"),r=t("013z");t("qKvR");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var o={},b=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",n)}},l=b("PageDescription"),c=b("AnchorLinks"),p=b("AnchorLink"),s=b("InlineNotification"),d={_frontmatter:o},m=r.a;function O(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(m,i({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)(l,{mdxType:"PageDescription"},Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," is a Custom Resource Definition used to monitor the Pods managed by a ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," StatefulSet.")),Object(a.b)(c,{mdxType:"AnchorLinks"},Object(a.b)(p,{mdxType:"AnchorLink"},"Spec"),Object(a.b)(p,{mdxType:"AnchorLink"},"Status")),Object(a.b)("h1",null,"Spec"),Object(a.b)("h2",null,"Properties"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Property"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"Description"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"Required"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"Default"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"lifecycleDebounceMs")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Lifecycle debounce in milliseconds"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"No"),Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"10000"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"peeringRecoveryCheckIntervalMs")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Scan interval for peering checks"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"No"),Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"1000"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"monitorGatewayPeering")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Boolean to enable peering management"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"No"),Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))))),Object(a.b)(c,{small:!0,mdxType:"AnchorLinks"},Object(a.b)(p,{mdxType:"AnchorLink"},"lifecycleDebounceMs"),Object(a.b)(p,{mdxType:"AnchorLink"},"peeringRecoveryCheckIntervalMs"),Object(a.b)(p,{mdxType:"AnchorLink"},"monitorGatewayPeering")),Object(a.b)("h2",null,Object(a.b)("inlineCode",{parentName:"h2"},"lifecycleDebounceMs")),Object(a.b)("p",null,"This optional property sets the minimum time (in milliseconds) that must pass after a Pod event for the monitor controller to begin processing the event. If another Pod event occurs during this time, the timer resets."),Object(a.b)("p",null,"Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"10000"),"."),Object(a.b)(s,{mdxType:"InlineNotification"},Object(a.b)("p",null,"The last Pod event timestamp can be seen in the ",Object(a.b)("inlineCode",{parentName:"p"},"lastEvent")," Status property.")),Object(a.b)("h2",null,Object(a.b)("inlineCode",{parentName:"h2"},"peeringRecoveryCheckIntervalMs")),Object(a.b)("p",null,"This optional property sets the interval (in milliseconds) in which the monitor will scan for stale peers."),Object(a.b)("p",null,"Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"1000"),"."),Object(a.b)(s,{mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," this property is only relevant if ",Object(a.b)("inlineCode",{parentName:"p"},"monitorGatewayPeering")," is enabled (",Object(a.b)("inlineCode",{parentName:"p"},"true"),").")),Object(a.b)("h2",null,Object(a.b)("inlineCode",{parentName:"h2"},"monitorGatewayPeering")),Object(a.b)("p",null,"This optional property enables (when set ",Object(a.b)("inlineCode",{parentName:"p"},"true"),") the ",Object(a.b)("a",i({parentName:"p"},{href:"/datapower-operator-doc/features/monitor#gateway-peering-monitoring"}),"Gateway Peering Monitoring")," feature."),Object(a.b)("p",null,"Defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("h1",null,"Status"),Object(a.b)(c,{mdxType:"AnchorLinks"},Object(a.b)(p,{mdxType:"AnchorLink"},"LastEvent"),Object(a.b)(p,{mdxType:"AnchorLink"},"WorkPending"),Object(a.b)(p,{mdxType:"AnchorLink"},"WorkInProgress"),Object(a.b)(p,{mdxType:"AnchorLink"},"Conditions"),Object(a.b)(p,{mdxType:"AnchorLink"},"Phase")),Object(a.b)("h2",null,"Example"),Object(a.b)("h3",null,"No recent Pod events"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),"$ oc get dpm\nNAME        PHASE     LAST EVENT   WORK PENDING   WORK IN-PROGRESS   AGE\nexample     Running                false          false              5m7s\n\n$ oc describe dpm/example\n...\nStatus:\n  Conditions:\n  Last Event:\n  Phase:             Running\n  Work In Progress:  false\n  Work Pending:      false\n")),Object(a.b)("h3",null,"Work pending"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),"$ oc get dpm\nNAME        PHASE     LAST EVENT             WORK PENDING   WORK IN-PROGRESS   AGE\nexample     Running   2020-09-21T17:18:52Z   true           false              2m55s\n\n$ oc describe dpm/example\n...\nStatus:\n  Conditions:\n  Last Event:        2020-09-21T17:18:52Z\n  Phase:             Running\n  Work In Progress:  false\n  Work Pending:      true\n")),Object(a.b)("h2",null,"LastEvent"),Object(a.b)("p",null,"Timestamp of last Pod event in RFC 3339 format."),Object(a.b)(s,{mdxType:"InlineNotification"},Object(a.b)("p",null,"This field will be empty if no recent Pod events have occurred.")),Object(a.b)("h2",null,"WorkPending"),Object(a.b)("p",null,"Boolean to signal that work is pending on this instance."),Object(a.b)("h2",null,"WorkInProgress"),Object(a.b)("p",null,"Boolean to signal that work is in-progress on this instance."),Object(a.b)("h2",null,"Conditions"),Object(a.b)("p",null,"Currently no conditions are generated. These may be added in future releases."),Object(a.b)("h2",null,"Phase"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Phase")," status property provides the current phase of the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor"),". The value can be one the following:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Pending")," - The ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")," has not yet been initialized."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Running")," - The ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")," has been initialized and is monitoring.")))}O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-apis-datapowermonitor-v-1-beta-2-mdx-fa4a8efef50667f581db.js.map