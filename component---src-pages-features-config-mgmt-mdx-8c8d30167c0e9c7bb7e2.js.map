{"version":3,"sources":["webpack:///./src/pages/features/config-mgmt.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-features-config-mgmt-mdx-8c8d30167c0e9c7bb7e2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator deploys and manages configuration defined by the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource spec.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Reconciliation</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Domains</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Users</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Reconciliation`}</h2>\n    <p>{`The DataPower Operator will reconcile any `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource instance created or updated in the namespace(s) it watches. This means that when you create a new `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance, the DataPower Operator will see that new instance and begin to reconcile the requested configuration.`}</p>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` will be translated to a StatefulSet, which is created in the cluster in the same namespace the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` resides in. This StatefulSet will deploy the actual DataPower Pods. When updates are made to the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{`, those changes are propagated to the StatefulSet automatically. When the StatefulSet is updated, it performs a rolling update to propagate any changes out to the DataPower Pods.`}</p>\n    <p>{`This reconciliation behavior allows you to create a `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance which specifies (for example) a couple of `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{`, and then update the backing resources (Secrets, ConfigMaps, etc.) directly in the cluster. When those resources are updated in the cluster, the DataPower Operator will automatically pick those changes up and propogate them to the StatefulSet.`}</p>\n    <h2>{`Domains`}</h2>\n    <p>{`Each DataPower domain specified in the `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/apis/datapowerservice/spec#domains\"\n      }}>{`domains`}</a>{` property can be managed independently of the others. You can add, remove, or update any domain in the `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{` array, by modifying the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance in the cluster. For an in-depth look at what goes into configuring the `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{` property, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/guides/domain-configuration\"\n      }}>{`Domain Configuration`}</a>{` guide.`}</p>\n    <p>{`While the domain structures can be updated in the `}<inlineCode parentName=\"p\">{`domains`}</inlineCode>{` property (such as defining new ConfigMaps, or adding entirely new domains), the resources which back the domains can also be updated directly in the cluster.`}</p>\n    <p>{`For example, if the Secret resource referenced by a domain’s `}<inlineCode parentName=\"p\">{`certs`}</inlineCode>{` spec is updated to include new crypto material (such as new certs or keys), this will trigger a reconciliation of that domain to serialize the changes to the StatefulSet and DataPower Pods.`}</p>\n    <p>{`Similarly, any ConfigMap referenced by the domain’s `}<inlineCode parentName=\"p\">{`dpApp`}</inlineCode>{` spec can be updated in-place, and this will cause the new configuration / files to be deployed to the StatefulSet.`}</p>\n    <h3>{`Annotations`}</h3>\n    <p>{`Annotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when the last update was made to a particular domain:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`datapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n`}</code></pre>\n    <p>{`In the above example, you can see there are two configured domains, `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`testdomain`}</inlineCode>{`, with their respective reconciled timestamps.`}</p>\n    <h2>{`Users`}</h2>\n    <p>{`Similarly to domains, each user specified in the `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/apis/datapowerservice/spec#users\"\n      }}>{`users`}</a>{` property can be managed independently of the others. You can add, remove, or update any user in the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` array, by modifying the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance in the cluster.`}</p>\n    <p>{`While the user structures can be updated in the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` property (such as changing the `}<inlineCode parentName=\"p\">{`accessLevel`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`group`}</inlineCode>{`), the Secret specified by the `}<inlineCode parentName=\"p\">{`passwordSecret`}</inlineCode>{` can also be updated directly in the cluster.`}</p>\n    <p>{`For example, if the Secret specified by a user’s `}<inlineCode parentName=\"p\">{`passwordSecret`}</inlineCode>{` is updated in the cluster, the DataPower Operator will reconcile this change to the StatefulSet, deploying the updated user configuration.`}</p>\n    <h3>{`user-commands ConfigMap`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`accessLevel`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`group`}</inlineCode>{` properties for each user are added to a `}<inlineCode parentName=\"p\">{`user-commands`}</inlineCode>{` ConfigMap, which is mounted to each DataPower Pod in the StatefulSet. The name of this ConfigMap in built by appending `}<inlineCode parentName=\"p\">{`-user-commands`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance.`}</p>\n    <p>{`Thus, if the `}<inlineCode parentName=\"p\">{`accessLevel`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`group`}</inlineCode>{` of an existing user is updated, or any users are added or removed from the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` spec, this ConfigMap will also be updated.`}</p>\n    <h3>{`Annotations`}</h3>\n    <p>{`Annotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when user configuration has been changed. There will be a single annotation for each user, by name, and then another annotation for the `}<inlineCode parentName=\"p\">{`user-commands`}</inlineCode>{` ConfigMap.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`datapower.ibm.com/user.admin.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/username.commands.reconciled: \"2020-06-04T02:36:55Z\"\n`}</code></pre>\n    <p>{`In the above example, you can see the `}<inlineCode parentName=\"p\">{`admin`}</inlineCode>{` user was reconciled at `}<inlineCode parentName=\"p\">{`2020-06-04T02:36:55Z`}</inlineCode>{` which aligns with the last update to the `}<inlineCode parentName=\"p\">{`username-commands`}</inlineCode>{` ConfigMap.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}