(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{"4TXc":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return u}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var o=a("7ljp"),n=a("013z");a("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o])}return e}).apply(this,arguments)}var i={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",t)}},b=l("PageDescription"),c=l("InlineNotification"),p={_frontmatter:i},s=n.a;function u(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(o.b)(s,r({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)(b,{mdxType:"PageDescription"},Object(o.b)("p",null,"The DataPower Operator implements and uses ",Object(o.b)("a",r({parentName:"p"},{href:"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"}),"Kubernetes Admission Controllers")," for validating and defaulting ",Object(o.b)("inlineCode",{parentName:"p"},"DataPowerService")," requests.")),Object(o.b)("h2",null,"Background"),Object(o.b)("p",null,"During the DataPower Operator pod’s boot sequence, it will attempt to fetch and/or create several Kubernetes resources for the validating and defaulting webhooks. These resources include:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Secret")," containing TLS key/cert for webhook API"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Service")," to expose the webhook API"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"MutatingWebhookConfiguration")," for the defaulting webhook"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ValidatingWebhookConfiguration")," for the validating webhook")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Secret")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Service")," are owned by the DataPower Operator’s ",Object(o.b)("inlineCode",{parentName:"p"},"ReplicaSet"),", and thus share the same life cycle as the operator pod itself. However, the two webhook configurations are cluster-scope resources, and are instead owned by the operator’s ",Object(o.b)("inlineCode",{parentName:"p"},"ClusterRole"),". The expectation is that the ",Object(o.b)("inlineCode",{parentName:"p"},"ClusterRole")," shares the same life cycle as the DataPower Operator, but there are cases where this life cycle can be broken, leading to a mismatch between the TLS key/cert referenced by the configurations, and the TLS key/cert being used by the current operator pod."),Object(o.b)("h2",null,"Problem determination"),Object(o.b)("p",null,"If you see errors relating to ",Object(o.b)("strong",{parentName:"p"},"bad certificate")," or ",Object(o.b)("strong",{parentName:"p"},"x509 certificate validation")," being logged in the DataPower Operator pod, you are most likely seeing this issue. Some examples are shown below to assist with problem determination."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{}),"2020/05/05 04:13:22 http: TLS handshake error from x.x.x.x:57076: remote error: tls: bad certificate\n")),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{}),'Internal error occurred: failed calling webhook "datapowerservices.defaulter.datapower.ibm.com": Post https://datapower-operator.namespace.svc:443/default-datapower-ibm-com-v1beta2-datapowerservice?timeout=2s: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "datapower-operator-ca")\n')),Object(o.b)("h2",null,"Resolution"),Object(o.b)("p",null,"To recover from this state, both the ",Object(o.b)("inlineCode",{parentName:"p"},"MutatingWebhookConfiguration")," and ",Object(o.b)("inlineCode",{parentName:"p"},"ValidatingWebhookConfiguration")," configurations need to be manually deleted, and then recreated by the DataPower Operator. At a high-level, this process will be the following:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Delete stale ",Object(o.b)("inlineCode",{parentName:"li"},"MutatingWebhookConfiguration")," resource"),Object(o.b)("li",{parentName:"ol"},"Delete stale ",Object(o.b)("inlineCode",{parentName:"li"},"ValidatingWebhookConfiguration")," resource"),Object(o.b)("li",{parentName:"ol"},"Delete ",Object(o.b)("inlineCode",{parentName:"li"},"datapower-operator")," Pod")),Object(o.b)("p",null,"When the ",Object(o.b)("inlineCode",{parentName:"p"},"datapower-operator")," Pod is deleted, it will automatically be recreated by the Deployment, and the newly created Pod will recreate the webhook configuration resources."),Object(o.b)("h3",null,"Steps to Recover"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Fetch the ",Object(o.b)("inlineCode",{parentName:"p"},"MutatingWebhookConfiguration")," resource from the cluster, taking note of the name (will be the first column in the output)."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com\n")),Object(o.b)(c,{mdxType:"InlineNotification"},Object(o.b)("p",{parentName:"li"},"Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.")),Object(o.b)("p",{parentName:"li"},"If you need to filter down further, you can filter by the ",Object(o.b)("inlineCode",{parentName:"p"},"namespace")," you’ve deployed the DataPower Operator in. For example:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Delete the ",Object(o.b)("inlineCode",{parentName:"p"},"MutatingWebhookConfiguration")," resource, where ",Object(o.b)("inlineCode",{parentName:"p"},"name")," is the name found in Step 1."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl delete MutatingWebhookConfiguration/name\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Fetch the ",Object(o.b)("inlineCode",{parentName:"p"},"ValidatingWebhookConfiguration")," resource from the cluster, taking note of the name (will be the first column in the output)."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com\n")),Object(o.b)(c,{mdxType:"InlineNotification"},Object(o.b)("p",{parentName:"li"},"Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.")),Object(o.b)("p",{parentName:"li"},"If you need to filter down further, you can filter by the ",Object(o.b)("inlineCode",{parentName:"p"},"namespace")," you’ve deployed the DataPower Operator in. For example:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Delete the ",Object(o.b)("inlineCode",{parentName:"p"},"ValidatingWebhookConfiguration")," resource, where ",Object(o.b)("inlineCode",{parentName:"p"},"name")," is the name found in Step 3."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl delete ValidatingWebhookConfiguration/name\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Fetch the DataPower Operator pod, taking note of the name (will be the first column in the output)."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl [-n namespace] get pod | grep datapower-operator\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Delete the DataPower Operator pod, where ",Object(o.b)("inlineCode",{parentName:"p"},"name")," is the name of the pod found in Step 5."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",r({parentName:"pre"},{}),"kubectl [-n namespace] delete pod/name\n")))),Object(o.b)("p",null,"The DataPower Operator’s ReplicaSet will schedule a new Pod, which will create all the resources in the cluster again in a clean state."),Object(o.b)("h2",null,"Further Troubleshooting"),Object(o.b)("p",null,"If you continue to see issues after following the above steps, please engage IBM Support."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-troubleshooting-stale-webhooks-mdx-950fdf4a48b695151ce8.js.map