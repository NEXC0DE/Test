(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"L+RG":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return f}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),i=n("013z");n("qKvR");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l={},c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},r=c("PageDescription"),p=c("AnchorLinks"),b=c("AnchorLink"),d=c("InlineNotification"),s={_frontmatter:l},m=i.a;function f(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(m,o({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(r,{mdxType:"PageDescription"},Object(a.b)("p",null,"The DataPower Operator supports managing DataPower configuration through the ",Object(a.b)("inlineCode",{parentName:"p"},"domains")," property on the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," Custom Resource. This allows for independent management of each application domain on the DataPower Gateway.")),Object(a.b)(p,{mdxType:"AnchorLinks"},Object(a.b)(b,{mdxType:"AnchorLink"},"The Domains Definition"),Object(a.b)(b,{mdxType:"AnchorLink"},"Creating a Secret"),Object(a.b)(b,{mdxType:"AnchorLink"},"Config Method: dpApp"),Object(a.b)(b,{mdxType:"AnchorLink"},"Updating Domains")),Object(a.b)("h2",null,"The Domains Definition"),Object(a.b)("p",null,"The following snippet of the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," Custom Resource contains all fields relevant to ",Object(a.b)("inlineCode",{parentName:"p"},"domains"),", filled with example values."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'domains:\n- name: "default"\n  certs:\n  - certType: "usrcerts"\n    secret: "default-cert"\n  - certType: "sharedcerts"\n    secret: "shared-cert"\n  dpApp:\n    config:\n    - "default-config"\n    local:\n    - "default-local"\n- name: "example"\n  certs:\n  - certType: "usrcerts"\n    secret: "example-cert"\n    subPath: "example/path"\n  dpApp:\n    config:\n    - "example-config"\n    local:\n    - "example-local"\n')),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"domains")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"domains")," is a list of DataPower Domains that should be configured. Domains are comprised of ",Object(a.b)("inlineCode",{parentName:"p"},"name"),", ",Object(a.b)("inlineCode",{parentName:"p"},"certs"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"configMethod")," fields. For a Domain to be created, a configuration method must be defined. The supported methods are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"dpApp")," - Domain configuration via ",Object(a.b)("inlineCode",{parentName:"li"},"config")," and ",Object(a.b)("inlineCode",{parentName:"li"},"local")," ConfigMaps.")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"name")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"name")," field is just that: the name of the domain. This will propagate into the pod and be the name of the resultant DataPower Domain."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"certs")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"certs")," is a list of all certificate, key, or general crypto files that need to be dropped into a Domain. There are two fields for each item in the ",Object(a.b)("inlineCode",{parentName:"p"},"certs")," list:"),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"certType")),Object(a.b)("p",null,"Defines the type of cert. The accepted values are ",Object(a.b)("inlineCode",{parentName:"p"},"usrcerts")," and ",Object(a.b)("inlineCode",{parentName:"p"},"sharedcerts"),". A ",Object(a.b)("inlineCode",{parentName:"p"},"usrcerts")," type will apply only to the specific Domain. A ",Object(a.b)("inlineCode",{parentName:"p"},"sharedcerts")," type will be available to all Domains. The best practice for ",Object(a.b)("inlineCode",{parentName:"p"},"sharedcerts")," types is to associate them with the ",Object(a.b)("inlineCode",{parentName:"p"},"default")," domain, but this is not required."),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"secret")),Object(a.b)("p",null,"Defines the name of the Kubernetes or OpenShift secret containing the crypto files. This secret can contain any number of certificates."),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"subPath")),Object(a.b)("p",null,"Defines the SubPath to place the cert into. This field is optional, and only allowed if ",Object(a.b)("inlineCode",{parentName:"p"},"certType")," is ",Object(a.b)("inlineCode",{parentName:"p"},"usrcerts"),". The provided SubPath must be a relative path, and will be appended to the domain’s directory path. If not included or left empty, the cert will not be placed in a subpath. An example would be ",Object(a.b)("inlineCode",{parentName:"p"},"dir1/dir2"),"."),Object(a.b)("h3",null,"Creating a Secret"),Object(a.b)("p",null,"To create a secret containing your crypto information, use:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n")),Object(a.b)("p",null,"Or alternatively, for a TLS secret:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n")),Object(a.b)("h2",null,"Config Method: ",Object(a.b)("inlineCode",{parentName:"h2"},"dpApp")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"dpApp")," is a basic configuration method for the DataPower operand. It takes two ConfigMap arrays:"),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"config")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Array of ConfigMaps containing DataPower configuration file(s)."),Object(a.b)("li",{parentName:"ul"},"At least one ConfigMap must be provided for ",Object(a.b)("inlineCode",{parentName:"li"},"config"),".")),Object(a.b)("p",null,"Each ConfigMap specified in ",Object(a.b)("inlineCode",{parentName:"p"},"config")," must be a ConfigMap created directly from standard DataPower config file(s)."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create configmap domain-config --from-file=/path/to/domain.cfg\n")),Object(a.b)("p",null,"You can also specify multiple config files, which will all be used to build the ConfigMap, and thus be applied to the same target Domain:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create configmap domain-config \\\n  --from-file=/path/to/domain-config-pt1.cfg \\\n  --from-file=/path/to/domain-config-pt2.cfg \\\n  --from-file=/path/to/domain-config-pt3.cfg\n")),Object(a.b)("p",null,"Depending on your use-case, you can either create the ConfigMap from multiple files, or create a ConfigMap for each config part, and list each ConfigMap in the ",Object(a.b)("inlineCode",{parentName:"p"},"config")," array. For example:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'spec:\n  domains:\n  - name: "test-domain"\n    dpApp:\n      config:\n      - "domain-config-pt1"\n      - "domain-config-pt2"\n      - "domain-config-pt3"\n')),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"local")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Array of ConfigMaps each containing a tarball of local files to be used by the Domain."),Object(a.b)("li",{parentName:"ul"},"This value is optional.")),Object(a.b)("p",null,"Each ConfigMap specified in ",Object(a.b)("inlineCode",{parentName:"p"},"local")," must be a ConfigMap created from a tarball containing local files for the Domain. The expectation is that the tarball contains the top-level files and directories you expect to be placed in the ",Object(a.b)("inlineCode",{parentName:"p"},"local:///")," directory of the targeted domain."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create configmap domain-local --from-file=/path/to/domain-local.tar.gz\n")),Object(a.b)("p",null,"The contents of each tarball are expanded and then copied into the Domain’s ",Object(a.b)("inlineCode",{parentName:"p"},"local:///")," filesystem."),Object(a.b)(d,{mdxType:"InlineNotification"},Object(a.b)("p",null,"Note that if multiple ConfigMaps are specified for ",Object(a.b)("inlineCode",{parentName:"p"},"local"),", you must be aware that if the same file/path exists in more than one ConfigMap the resulting file will be overwritten by the last ConfigMap to provide that file.")),Object(a.b)("h3",null,"Example"),Object(a.b)("p",null,"This example shows the complete end-to-end flow for creating all resources necessary to configure a domain via the ",Object(a.b)("inlineCode",{parentName:"p"},"dpApp")," configuration method."),Object(a.b)("p",null,"Starting with a ",Object(a.b)("inlineCode",{parentName:"p"},"testdomain")," structure as follows:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"$ ls\ntestdomain\n\n$ tree\n.\n`-- testdomain\n    |-- config\n    |   `-- testdomain.cfg\n    `-- local\n        `-- test.xsl\n\n3 directories, 2 files\n")),Object(a.b)("p",null,"Create the ",Object(a.b)("inlineCode",{parentName:"p"},"config")," ConfigMap from the ",Object(a.b)("inlineCode",{parentName:"p"},"cfg")," file:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create configmap testdomain-config \\\n  --from-file=/path/to/testdomain/config/testdomain.cfg\n")),Object(a.b)("p",null,"Create a tarball for the ",Object(a.b)("inlineCode",{parentName:"p"},"local")," files:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"tar --directory=/path/to/testdomain/local -czvf testdomain-local.tar.gz .\n")),Object(a.b)("p",null,"The created tarball should have the local file(s) at the top-level:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"$ tar -tzvf testdomain-local.tar.gz\ndrwxrwxr-x aharbis/aharbis   0 2020-04-09 15:37 ./\n-rw-rw-r-- aharbis/aharbis  14 2020-04-09 15:27 ./test.xsl\n")),Object(a.b)("p",null,"Create the ",Object(a.b)("inlineCode",{parentName:"p"},"local")," ConfigMap from the tarball:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl create configmap testdomain-local \\\n  --from-file=/path/to/testdomain-local.tar.gz\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," snippet with ",Object(a.b)("inlineCode",{parentName:"p"},"domains")," spec for the ",Object(a.b)("inlineCode",{parentName:"p"},"testdomain"),":"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'spec:\n  domains:\n  - name: "testdomain"\n    dpApp:\n      config:\n      - "testdomain-config"\n      local:\n      - "testdomain-local"\n')),Object(a.b)("p",null,"Once deployed via the DataPower Operator, the config and local files could be validated from the DataPower CLI."),Object(a.b)("p",null,"To attach to a given DataPower Pod:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"kubectl -n namespace attach -it pod/name -c datapower\n")),Object(a.b)("p",null,"From the DataPower CLI (once logged in):"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"idg# config\nidg(config)# switch testdomain\nidg[testdomain](config)# dir local:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   test.xsl                     Apr 9, 2020 3:54:03 PM           14\n\n   227782.0 MB available to local:\n\nidg[testdomain](config)# dir config:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   testdomain.cfg               Apr 9, 2020 3:54:03 PM           24\n\n   227782.0 MB available to config:\n")),Object(a.b)("h2",null,"Updating Domains"),Object(a.b)("p",null,"As described above, Domains are comprised of ConfigMaps and Secrets that exist in the k8s cluster. It is expected that over time a Domain configuration will need to be updated, including the ",Object(a.b)("inlineCode",{parentName:"p"},"config")," and ",Object(a.b)("inlineCode",{parentName:"p"},"local")," ConfigMaps and Secrets that comprise the ",Object(a.b)("inlineCode",{parentName:"p"},"serts")," for the Domain. These ConfigMaps and Secrets can be updated in-place in the cluster, and the DataPower Operator will automatically reconcile those changes."),Object(a.b)("p",null,"When an update is detected on a ConfigMap or Secret referenced by a Domain, a rolling update is triggered across the Pods in the StatefulSet. This allows for Domains to be updated without modifying the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," Custom Resource directly."),Object(a.b)("p",null,"For example, if we define the following Domain spec:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'spec:\n  domains:\n  - name: "testdomain"\n    certs:\n    - certType: "usrcerts"\n      secret: "testdomain-certs"\n    dpApp:\n      config:\n      - "testdomain-config"\n      local:\n      - "testdomain-local"\n')),Object(a.b)("p",null,"We could then update any of the following objects by deleting them in the cluster and recreating them with the same name:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"secret/testdomain-certs")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"configmap/testdomain-config")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"configmap/testdomain-local"))),Object(a.b)("p",null,"The StatefulSet will include annotations that provide timestamps for the last time a particular domain was modified or reconciled. You can see these by describing the StatefulSet resource in the cluster:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-yaml"}),'apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      annotations:\n        datapower.ibm.com/domains.default.reconciled: "2020-06-04T02:36:55Z"\n        datapower.ibm.com/domains.testdomain.reconciled: "2020-06-04T02:36:55Z"\n')))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-domain-configuration-mdx-32051ff22ac47c5ea6a4.js.map