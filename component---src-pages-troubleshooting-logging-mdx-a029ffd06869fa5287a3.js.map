{"version":3,"sources":["webpack:///./src/pages/troubleshooting/logging.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,wHAEF,mCACA,6HACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UACpB,kBAAIA,WAAW,MAAf,gBAEF,+BACA,sBACE,kBAAIA,WAAW,MAAf,yDAA8E,0BAAYA,WAAW,MAAvB,UAC9E,kBAAIA,WAAW,MAAf,4EAAiG,0BAAYA,WAAW,MAAvB,SAAjG,uEACA,kBAAIA,WAAW,MAAf,gGAEF,0HACA,4CAIA,kDAAiC,0BAAYA,WAAW,KAAvB,qBAAjC,kDACA,4CACA,iDAAgC,0BAAYA,WAAW,KAAvB,cAAhC,0GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iGAOL,mEAAkD,mBAAGA,WAAW,KAAQ,CACpE,KAAQ,wFADsC,WAEjC,0BAAYA,WAAW,KAAvB,OAFiC,WAAlD,mBAGA,yCACA,oFAAmE,0BAAYA,WAAW,KAAvB,gBAAnE,KAAiI,0BAAYA,WAAW,KAAvB,WAAjI,wDACA,6CAA4B,0BAAYA,WAAW,KAAvB,sCAA5B,qBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8RAeTH,EAAWI,gBAAiB","file":"component---src-pages-troubleshooting-logging-mdx-a029ffd06869fa5287a3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The logging level for the DataPower Operator can be adjusted to aid in troubleshooting issues.`}</p>\n    </PageDescription>\n    <h2>{`Log level`}</h2>\n    <p>{`You can adjust the log level of the DataPower Operator Pod. The supported log levels are as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`error`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`info`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`debug`}</inlineCode></li>\n      <li parentName=\"ul\">{`integer > 0`}</li>\n    </ul>\n    <p>{`Notes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Setting the log level to 1 is the equivalent of using `}<inlineCode parentName=\"li\">{`debug`}</inlineCode></li>\n      <li parentName=\"ul\">{`Setting the log level to an integer > 1 will increase the log level past `}<inlineCode parentName=\"li\">{`debug`}</inlineCode>{` for increased verbosity of operator code, as well as library code.`}</li>\n      <li parentName=\"ul\">{`Setting the log level to an integer >= 4 will set the log level for Kubernetes API logging.`}</li>\n    </ul>\n    <p>{`The mechanism by which you change the logging level may depend on how you installed the operator.`}</p>\n    <h3>{`Set via Helm chart`}</h3>\n    {\n      /* TODO: add link to Helm chart once published */\n    }\n    <p>{`Our Helm chart offers the `}<inlineCode parentName=\"p\">{`operator.logLevel`}</inlineCode>{` property as a method to change the log level.`}</p>\n    <h3>{`Set via Deployment`}</h3>\n    <p>{`The DataPower Operatorâ€™s `}<inlineCode parentName=\"p\">{`Deployment`}</inlineCode>{` can also be modified in the cluster directly. In the container spec you will see something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`args:\n  - \"--zap-encoder=json\"\n  - \"--zap-level=info\"\n  - \"--zap-time-encoding=iso8601\"\n`}</code></pre>\n    <p>{`These values can be modified following the `}<a parentName=\"p\" {...{\n        \"href\": \"https://sdk.operatorframework.io/docs/golang/references/logging/#default-zap-logger\"\n      }}>{`default `}<inlineCode parentName=\"a\">{`zap`}</inlineCode>{` logger`}</a>{` documentation.`}</p>\n    <h2>{`Retrieving logs`}</h2>\n    <p>{`Logs can be retrieved from the DataPower Operator pod using `}<inlineCode parentName=\"p\">{`kubectl logs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`oc logs`}</inlineCode>{`, or the OpenShift console if deployed on OpenShift.`}</p>\n    <p>{`Some examples, where `}<inlineCode parentName=\"p\">{`datapower-operator-777fccc85-68gs6`}</inlineCode>{` is the Pod name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# dump all logs to file\noc logs datapower-operator-777fccc85-68gs6 > datapower-operator-logs.txt\n\n# stream logs\noc logs -f datapower-operator-777fccc85-68gs6\n\n# dump logs from previous container (i.e. after a restart)\noc logs --previous datapower-operator-777fccc85-68gs6\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}