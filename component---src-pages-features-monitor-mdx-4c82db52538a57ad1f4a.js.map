{"version":3,"sources":["webpack:///./src/pages/features/monitor.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-features-monitor-mdx-4c82db52538a57ad1f4a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Monitor provides valueable pod lifecycle event logging as well as ensuring the stability of peering among DataPower gateway pods.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Relation to DataPowerService</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Pod Events</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Gateway Peering Monitoring</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Relation to DataPowerService`}</h2>\n    <p>{`For a given `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance, there must be a matching `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` instance. This relationship or linkage is held through the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` metadata property of each instance. The `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` custom resource instances `}<strong parentName=\"p\">{`must`}</strong>{` share the same `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` to be considered linked.`}</p>\n    <h3>{`Automatic creation`}</h3>\n    <p>{`During the reconciliation of a `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance, the DataPower Operator will look in the same namespace for a matching `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` instance with the same `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`. If no instance is found, one will be created with default values.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance will own the `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` instance, and thus if the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance is deleted, the `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` will be garbage collected automatically.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`You can modify the `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` instance spec once it’s automatically created.`}</p>\n    </InlineNotification>\n    <h3>{`Creating a DataPowerMonitor manually`}</h3>\n    <p>{`If you wish to control the lifecycle of the `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` resource and provide custom configuration at deploy-time, you can create the `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` instance yourself.`}</p>\n    <p>{`The following rules apply:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode>{` custom resource instance `}<strong parentName=\"li\">{`must be created before`}</strong>{` the matching `}<inlineCode parentName=\"li\">{`DataPowerService`}</inlineCode>{` custom resource instance.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` of the `}<inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode>{` custom resource you create `}<strong parentName=\"li\">{`must`}</strong>{` match the `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` of the `}<inlineCode parentName=\"li\">{`DataPowerService`}</inlineCode>{` you intend to create.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode>{` instance `}<strong parentName=\"li\">{`will not`}</strong>{` be automatically cleaned up when the matching `}<inlineCode parentName=\"li\">{`DataPowerService`}</inlineCode>{` is deleted.`}</li>\n    </ul>\n    <h2>{`Pod Events`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` controller watches for Pod events from the cluster. When an event is received, it’s inspected to determine if the associated Pod is managed by the linked `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` custom resource instance. If the associated Pod is managed by the linked `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance, then the Pod event is handled.`}</p>\n    <p>{`When a Pod event is first received and handled, the `}<inlineCode parentName=\"p\">{`lastEvent`}</inlineCode>{` Status property will be set with the timestamp of the Pod event, and `}<inlineCode parentName=\"p\">{`workPending`}</inlineCode>{` will be set `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/apis/datapowermonitor/v1beta2#lifecycledebouncems\"\n      }}><inlineCode parentName=\"a\">{`lifecycleDebounceMs`}</inlineCode></a>{` property determines how much time should pass between Pod events before work will be performed. Once that time has elapsed, work will be completed.`}</p>\n    <p>{`When work is in-progress (e.g., `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/features/monitor#gateway-peering-monitoring\"\n      }}>{`Gateway Peering Monitoring`}</a>{`), the `}<inlineCode parentName=\"p\">{`workInProgress`}</inlineCode>{` Status property will be set `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`workPending`}</inlineCode>{` set back to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`lastEvent`}</inlineCode>{` cleared.`}</p>\n    <p>{`Once work is complete, `}<inlineCode parentName=\"p\">{`workInProgress`}</inlineCode>{` will be set `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <p>{`For more details on the properties and status discussed, see the `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/apis/datapowermonitor/v1beta2\"\n      }}>{`API documentation`}</a>{`.`}</p>\n    <h3>{`Logging`}</h3>\n    <p>{`All Pod events associated with the linked `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` will be logged (at `}<inlineCode parentName=\"p\">{`info`}</inlineCode>{` level) with various metadata for troubleshooting purposes. The logs themselves can contain the following information:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Message (`}<inlineCode parentName=\"li\">{`msg`}</inlineCode>{`) will be one of:`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Observed Pod event`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Warning: Pod failed to schedule`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Warning: Container is in waiting state`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Monitor.Name`}</inlineCode>{`: the name of the associated `}<inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Pod.Name`}</inlineCode>{`: the name of the Pod that triggered the event`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Pod.Namespace`}</inlineCode>{`: the namespace in which the Pod resides`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Pod.UID`}</inlineCode>{`: the Pod’s UID`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Pod.IP`}</inlineCode>{`: the Pod’s IP address`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Reason`}</inlineCode>{`: reason associated event condition or container status`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Message`}</inlineCode>{`: message associated with event condition or container status`}</li>\n    </ul>\n    <h2>{`Gateway Peering Monitoring`}</h2>\n    <p>{`When a `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` set of Pods are configured to use gateway peering (e.g. in the API Connect Gateway Service) and the associated `}<inlineCode parentName=\"p\">{`DataPowerMonitor`}</inlineCode>{` has `}<inlineCode parentName=\"p\">{`monitorGatewayPeering`}</inlineCode>{` enabled, the DataPower Operator will ensure that the gateway peering configurations remain stable.`}</p>\n    <p>{`The DataPower Monitor achieves this by responding to pod lifecycle events (e.g., when a DataPower pod is deleted or restarts) by examining the gateway peering status for every active pod. If a pod has “stale peers” (i.e., failed connections to peers that no longer exist), the DataPower Monitor will issue a maintanence command to reset its peering status. This will cause the pod to drop its connections to all of its peers, both active and inactive, at which point the active peers will reestablish their connections to the pod, and thus only connections to active peers will remain.`}</p>\n    <p>{`This process is all necessary because individual gateways do not always have enough information to determine when a peer has been removed permanently, and thus assistance from the Operator is needed.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/troubleshooting/gateway-peering-monitoring\"\n      }}>{`here`}</a>{` for troubleshooting known issues when Gateway Peering Monitoring is enabled.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}