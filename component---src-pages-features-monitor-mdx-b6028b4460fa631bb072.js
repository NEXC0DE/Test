(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{Schu:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return h}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),i=n("013z");n("qKvR");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var r={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},c=l("PageDescription"),b=l("AnchorLinks"),s=l("AnchorLink"),p=l("InlineNotification"),d={_frontmatter:r},m=i.a;function h(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(m,o({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{mdxType:"PageDescription"},Object(a.b)("p",null,"The DataPower Monitor provides valueable pod lifecycle event logging as well as ensuring the stability of peering among DataPower gateway pods.")),Object(a.b)(b,{mdxType:"AnchorLinks"},Object(a.b)(s,{mdxType:"AnchorLink"},"Relation to DataPowerService"),Object(a.b)(s,{mdxType:"AnchorLink"},"Pod Events"),Object(a.b)(s,{mdxType:"AnchorLink"},"Gateway Peering Monitoring")),Object(a.b)("h2",null,"Relation to DataPowerService"),Object(a.b)("p",null,"For a given ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," instance, there must be a matching ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," instance. This relationship or linkage is held through the ",Object(a.b)("inlineCode",{parentName:"p"},"name")," metadata property of each instance. The ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," and ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," custom resource instances ",Object(a.b)("strong",{parentName:"p"},"must")," share the same ",Object(a.b)("inlineCode",{parentName:"p"},"name")," to be considered linked."),Object(a.b)("h3",null,"Automatic creation"),Object(a.b)("p",null,"During the reconciliation of a ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," instance, the DataPower Operator will look in the same namespace for a matching ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," instance with the same ",Object(a.b)("inlineCode",{parentName:"p"},"name"),". If no instance is found, one will be created with default values."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," instance will own the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," instance, and thus if the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," instance is deleted, the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," will be garbage collected automatically."),Object(a.b)(p,{mdxType:"InlineNotification"},Object(a.b)("p",null,"You can modify the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," instance spec once it’s automatically created.")),Object(a.b)("h3",null,"Creating a DataPowerMonitor manually"),Object(a.b)("p",null,"If you wish to control the lifecycle of the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," resource and provide custom configuration at deploy-time, you can create the ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," instance yourself."),Object(a.b)("p",null,"The following rules apply:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")," custom resource instance ",Object(a.b)("strong",{parentName:"li"},"must be created before")," the matching ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerService")," custom resource instance."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"name")," of the ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")," custom resource you create ",Object(a.b)("strong",{parentName:"li"},"must")," match the ",Object(a.b)("inlineCode",{parentName:"li"},"name")," of the ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerService")," you intend to create."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")," instance ",Object(a.b)("strong",{parentName:"li"},"will not")," be automatically cleaned up when the matching ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerService")," is deleted.")),Object(a.b)("h2",null,"Pod Events"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," controller watches for Pod events from the cluster. When an event is received, it’s inspected to determine if the associated Pod is managed by the linked ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," custom resource instance. If the associated Pod is managed by the linked ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," instance, then the Pod event is handled."),Object(a.b)("p",null,"When a Pod event is first received and handled, the ",Object(a.b)("inlineCode",{parentName:"p"},"lastEvent")," Status property will be set with the timestamp of the Pod event, and ",Object(a.b)("inlineCode",{parentName:"p"},"workPending")," will be set ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"."),Object(a.b)("p",null,"The ",Object(a.b)("a",o({parentName:"p"},{href:"/datapower-operator-doc/apis/datapowermonitor/v1beta2#lifecycledebouncems"}),Object(a.b)("inlineCode",{parentName:"a"},"lifecycleDebounceMs"))," property determines how much time should pass between Pod events before work will be performed. Once that time has elapsed, work will be completed."),Object(a.b)("p",null,"When work is in-progress (e.g., ",Object(a.b)("a",o({parentName:"p"},{href:"/datapower-operator-doc/features/monitor#gateway-peering-monitoring"}),"Gateway Peering Monitoring"),"), the ",Object(a.b)("inlineCode",{parentName:"p"},"workInProgress")," Status property will be set ",Object(a.b)("inlineCode",{parentName:"p"},"true"),", ",Object(a.b)("inlineCode",{parentName:"p"},"workPending")," set back to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"lastEvent")," cleared."),Object(a.b)("p",null,"Once work is complete, ",Object(a.b)("inlineCode",{parentName:"p"},"workInProgress")," will be set ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("p",null,"For more details on the properties and status discussed, see the ",Object(a.b)("a",o({parentName:"p"},{href:"/datapower-operator-doc/apis/datapowermonitor/v1beta2"}),"API documentation"),"."),Object(a.b)("h3",null,"Logging"),Object(a.b)("p",null,"All Pod events associated with the linked ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," will be logged (at ",Object(a.b)("inlineCode",{parentName:"p"},"info")," level) with various metadata for troubleshooting purposes. The logs themselves can contain the following information:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Message (",Object(a.b)("inlineCode",{parentName:"li"},"msg"),") will be one of:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Observed Pod event")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Warning: Pod failed to schedule")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Warning: Container is in waiting state")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Monitor.Name"),": the name of the associated ",Object(a.b)("inlineCode",{parentName:"li"},"DataPowerMonitor")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Pod.Name"),": the name of the Pod that triggered the event"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Pod.Namespace"),": the namespace in which the Pod resides"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Pod.UID"),": the Pod’s UID"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Pod.IP"),": the Pod’s IP address"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Reason"),": reason associated event condition or container status"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Message"),": message associated with event condition or container status")),Object(a.b)("h2",null,"Gateway Peering Monitoring"),Object(a.b)("p",null,"When a ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerService")," set of Pods are configured to use gateway peering (e.g. in the API Connect Gateway Service) and the associated ",Object(a.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," has ",Object(a.b)("inlineCode",{parentName:"p"},"monitorGatewayPeering")," enabled, the DataPower Operator will ensure that the gateway peering configurations remain stable."),Object(a.b)("p",null,"The DataPower Monitor achieves this by responding to pod lifecycle events (e.g., when a DataPower pod is deleted or restarts) by examining the gateway peering status for every active pod. If a pod has “stale peers” (i.e., failed connections to peers that no longer exist), the DataPower Monitor will issue a maintanence command to reset its peering status. This will cause the pod to drop its connections to all of its peers, both active and inactive, at which point the active peers will reestablish their connections to the pod, and thus only connections to active peers will remain."),Object(a.b)("p",null,"This process is all necessary because individual gateways do not always have enough information to determine when a peer has been removed permanently, and thus assistance from the Operator is needed."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-features-monitor-mdx-b6028b4460fa631bb072.js.map