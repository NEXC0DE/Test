{"version":3,"sources":["webpack:///./src/pages/features/webhooks.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","isMDXComponent"],"mappings":"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","file":"component---src-pages-features-webhooks-mdx-ef4256be38bef54f2e6d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator deploys and manages various Kubernetes API webhooks in the cluster to assist in management of its custom resources.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Defaulting webhook</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Validating webhook</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Conversion webhook</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Defaulting webhook`}</h2>\n    <h3>{`Purpose`}</h3>\n    <p>{`The defaulting webhook is a type of `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook\"\n      }}>{`MutatingAdmissionWebhook`}</a>{` which runs against Custom Resources (CRs) at `}<inlineCode parentName=\"p\">{`CREATE`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` time to populate default values in the CR’s `}<inlineCode parentName=\"p\">{`spec`}</inlineCode>{`. Our API documentation for each CRD includes what defaults will be set by the webhook.`}</p>\n    <h3>{`Creation`}</h3>\n    <p>{`Currently the defaulting webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` resources for each CRD (listed below). This `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.`}</p>\n    <p>{`The name for the `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` resource for each CRD will take the following form:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<namespace>.<crd-name>.defaulter.datapower.ibm.com\n`}</code></pre>\n    <p>{`The following CustomResourceDefinitions utilize a defaulting webhook:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataPowerService`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode></li>\n    </ul>\n    <h3>{`Lifecycle`}</h3>\n    <p>{`While the defaulting webhook runtime itself lives within the DataPower Operator pod, the `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` is a cluster-scope resource and is stand-alone. When it is created, an `}<inlineCode parentName=\"p\">{`ownerReference`}</inlineCode>{` is set on it that references the DataPower Operator’s `}<inlineCode parentName=\"p\">{`ClusterRole`}</inlineCode>{`. Thus, the lifecycle of the `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` resources will be linked with the `}<inlineCode parentName=\"p\">{`ClusterRole`}</inlineCode>{`, which is linked with the installation of the operator itself.`}</p>\n    <p>{`When the operator is uninstalled, the `}<inlineCode parentName=\"p\">{`MutatingWebhookConfiguration`}</inlineCode>{` resources for that operator instance are also removed.`}</p>\n    <h3>{`Example`}</h3>\n    <p>{`The below output shows the defaulting webhook configurations created for an operator deployed in the `}<inlineCode parentName=\"p\">{`datapower-operator`}</inlineCode>{` namespace. One can be seen for each CRD.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ oc get mutatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.defaulter.datapower.ibm.com   1          3h30m\ndatapower-operator.datapowerservices.defaulter.datapower.ibm.com   1          3h30m\n`}</code></pre>\n    <h2>{`Validating webhook`}</h2>\n    <h3>{`Purpose`}</h3>\n    <p>{`The validating webhook is a type of `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook\"\n      }}>{`ValidatingAdmissionWebhook`}</a>{` which runs against Custom Resources (CRs) at `}<inlineCode parentName=\"p\">{`CREATE`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` time to validate the CR contains a configuration which will yield an operable cluster. The CustomResourceDefinitions use OpenAPI schema validation for basic property checks (such as integer bounds and non-empty strings), but more complex validation of the configuration is done via the webhook.`}</p>\n    <h3>{`Creation`}</h3>\n    <p>{`Currently the validating webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` resources for each CRD (listed below). This `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.`}</p>\n    <p>{`The name for the `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` resource for each CRD will take the following form:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<namespace>.<crd-name>.validator.datapower.ibm.com\n`}</code></pre>\n    <p>{`The following CustomResourceDefinitions utilize a validating webhook:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataPowerService`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataPowerMonitor`}</inlineCode></li>\n    </ul>\n    <h3>{`Lifecycle`}</h3>\n    <p>{`While the validating webhook runtime itself lives within the DataPower Operator pod, the `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` is a cluster-scope resource and is stand-alone. When it is created, an `}<inlineCode parentName=\"p\">{`ownerReference`}</inlineCode>{` is set on it that references the DataPower Operator’s `}<inlineCode parentName=\"p\">{`ClusterRole`}</inlineCode>{`. Thus, the lifecycle of the `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` resources will be linked with the `}<inlineCode parentName=\"p\">{`ClusterRole`}</inlineCode>{`, which is linked with the installation of the operator itself.`}</p>\n    <p>{`When the operator is uninstalled, the `}<inlineCode parentName=\"p\">{`ValidatingWebhookConfiguration`}</inlineCode>{` resources for that operator instance are also removed.`}</p>\n    <h3>{`Example`}</h3>\n    <p>{`The below output shows the validating webhook configurations created for an operator deployed in the `}<inlineCode parentName=\"p\">{`datapower-operator`}</inlineCode>{` namespace. One can be seen for each CRD.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ oc get validatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.validator.datapower.ibm.com   1          3h44m\ndatapower-operator.datapowerservices.validator.datapower.ibm.com   1          3h44m\n`}</code></pre>\n    <h2>{`Conversion webhook`}</h2>\n    <h3>{`Purpose`}</h3>\n    <p>{`The DataPowerService CustomResource now has multiple versions which have some large, meaningful changes between them that cannot be resolved with the default Kubernetes conversion strategy. An example of such a change is the removal of the `}<inlineCode parentName=\"p\">{`datapowerMonitor`}</inlineCode>{` spec in the upgrade from DataPowerService `}<inlineCode parentName=\"p\">{`v1beta1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`v1beta2`}</inlineCode>{`. In the default mode, the `}<inlineCode parentName=\"p\">{`datapowerMonitor`}</inlineCode>{` spec would be dropped after the CRD is upgraded from `}<inlineCode parentName=\"p\">{`v1beta1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`v1beta2`}</inlineCode>{`, losing user data. To define a more intelligent upgrade path, a conversion webhook is used. Continuing the example of the `}<inlineCode parentName=\"p\">{`datapowerMonitor`}</inlineCode>{` spec, the DataPower Operator conversion webhook preserves the user data by pulling out the `}<inlineCode parentName=\"p\">{`datapowerMonitor`}</inlineCode>{` spec and putting that spec into the related DataPowerMonitor CustomResource, which is what removed the need for the `}<inlineCode parentName=\"p\">{`datapowerMonitor`}</inlineCode>{` spec.`}</p>\n    <h3>{`Resources`}</h3>\n    <p>{`The conversion webhook is made up of four components:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Service`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`datapower-conversion-key-cert`}</inlineCode>{` Secret`}</li>\n      <li parentName=\"ol\">{`Conversion definition in DataPowerService CRD`}</li>\n    </ol>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment`}</strong></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment manages the conversion webhook runtime Pod.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Service`}</strong></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Service is used by the KubeAPI to reach the conversion webhook runtime as defined in the DataPowerService CRD.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`datapower-conversion-key-cert`}</inlineCode>{` Secret`}</strong></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`datapower-conversion-key-cert`}</inlineCode>{` Secret contains the TLS key and cert used to authenticate communication with the KubeAPI. If this Secret is deleted, a new key-cert pair will be generated and used instead.`}</p>\n    <p><strong parentName=\"p\">{`Conversion definition in DataPowerService CRD`}</strong></p>\n    <p>{`The DataPowerService CRD defines how one version should be converted to another. By default, the `}<inlineCode parentName=\"p\">{`conversionStrategy`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{` but this is changed by the DataPower Operator to use a `}<inlineCode parentName=\"p\">{`conversionStrategy`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`Webhook`}</inlineCode>{`. This conversion definition contains the Service name, port, etc that should be used to communicate with the webhook runtime and a representation of the TLS certificate for authentication. This definition is updated as needed by the DataPower Operator managing the cluster’s `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment.`}</p>\n    <h3>{`Creation`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment is created and managed by the DataPower Operator. However, there can only be a single active conversion webhook in a cluster as only a single conversion definition is stored in the CRD. To accomodate this, the DataPower Operator scans all namespaces looking for an existing `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{`. This requires having cluster level permissions for listing/getting Namespaces and Deployments. If a `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment is found, the DataPower Operator will check an annotation `}<inlineCode parentName=\"p\">{`datapower.ibm.com/managed-by`}</inlineCode>{` to determine if that webhook is managed by another DataPower Operator instance. If it is not being managed, the DataPower Operator that found the instance will claim ownership of the conversion webhook Deployment. If a conversion webhook Deployment is not found, one will be created in the same namespace as the DataPower Operator doing the scanning. In this way, there is always only one DataPower Operator conversion webhook in a cluster at a time.`}</p>\n    <p>{`When a `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment is being managed, the managing DataPower Operator will inspect the namespace to verify that a correct `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Service and `}<inlineCode parentName=\"p\">{`datapower-conversion-key-cert`}</inlineCode>{` Secret exist. If they don’t exist or are not correct, they will be created. Once all resources are created and correct, the managing DataPower Operator will update the conversion definition in the DataPowerService CRD to reflect the new configuration.`}</p>\n    <h3>{`Lifecycle`}</h3>\n    <p>{`All conversion resources (1, 2, 3 above) are owned by the managing DataPower Operator. When the managing DataPower Operator Deployment is deleted, all conversion resources will be garbage collected. The conversion definition stored in the DataPowerService CRD is not cleaned up and will remain. This will potentially cause problems during uninstallation of the last DataPower Operator in the cluster, follow the `}<a parentName=\"p\" {...{\n        \"href\": \"/uninstall\"\n      }}>{`uninstallation guide`}</a>{` to be safe.`}</p>\n    <h3>{`Image override`}</h3>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`You should not override the `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` image unless instructed to do so by IBM Support.`}</p>\n    </InlineNotification>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Note: This feature is only available in version `}<inlineCode parentName=\"p\">{`1.4.0`}</inlineCode>{` onward.`}</p>\n    </InlineNotification>\n    <p>{`The `}<inlineCode parentName=\"p\">{`datapower-operator-conversion-webhook`}</inlineCode>{` Deployment’s image can be overridden by setting an environment variable (`}<inlineCode parentName=\"p\">{`CONVERSION_WEBHOOK_IMAGE`}</inlineCode>{`) in the `}<inlineCode parentName=\"p\">{`datapower-operator`}</inlineCode>{` Deployment. The value of the environment variable must be the full image URL for the desired image.`}</p>\n    <h4>{`Example`}</h4>\n    <p>{`The below yaml snippet shows how to set this variable within the `}<inlineCode parentName=\"p\">{`datapower-operator`}</inlineCode>{` Deployment resource, using the `}<inlineCode parentName=\"p\">{`1.4.0`}</inlineCode>{` version image as example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: datapower-operator\n  ...\nspec:\n  template:\n    spec:\n      ...\n      containers:\n        - name: datapower-operator\n          env:\n          - name: CONVERSION_WEBHOOK_IMAGE\n            value: icr.io/cpopen/datapower-operator-conversion-webhook:1.4.0\n          ...\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}