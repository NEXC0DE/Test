{"componentChunkName":"component---src-pages-features-webhooks-mdx","path":"/features/webhooks/","result":{"pageContext":{"frontmatter":{"title":"Webhooks","description":"Admission controllers and conversion webhooks deployed and managed by the DataPower Operator"},"relativePagePath":"/features/webhooks.mdx","titleType":"page","MdxNode":{"id":"5ec42caa-c270-52c1-81b2-42c2c808017c","children":[],"parent":"3ed9a9c6-a34a-5b83-819a-a4a7adb8d2c0","internal":{"content":"---\ntitle: Webhooks\ndescription: Admission controllers and conversion webhooks deployed and managed by the DataPower Operator\n---\n\n<PageDescription>\n\nThe DataPower Operator deploys and manages various Kubernetes API webhooks in the cluster to assist in management of its custom resources.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Defaulting webhook</AnchorLink>\n  <AnchorLink>Validating webhook</AnchorLink>\n  <AnchorLink>Conversion webhook</AnchorLink>\n</AnchorLinks>\n\n## Defaulting webhook\n\n### Purpose\n\nThe defaulting webhook is a type of [MutatingAdmissionWebhook](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook) which runs against Custom Resources (CRs) at `CREATE` or `UPDATE` time to populate default values in the CR's `spec`. Our API documentation for each CRD includes what defaults will be set by the webhook.\n\n### Creation\n\nCurrently the defaulting webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `MutatingWebhookConfiguration` resources for each CRD (listed below). This `MutatingWebhookConfiguration` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.\n\nThe name for the `MutatingWebhookConfiguration` resource for each CRD will take the following form:\n\n```\n<namespace>.<crd-name>.defaulter.datapower.ibm.com\n```\n\nThe following CustomResourceDefinitions utilize a defaulting webhook:\n\n- `DataPowerService`\n- `DataPowerMonitor`\n\n### Lifecycle\n\nWhile the defaulting webhook runtime itself lives within the DataPower Operator pod, the `MutatingWebhookConfiguration` is a cluster-scope resource and is stand-alone. When it is created, an `ownerReference` is set on it that references the DataPower Operator's `ClusterRole`. Thus, the lifecycle of the `MutatingWebhookConfiguration` resources will be linked with the `ClusterRole`, which is linked with the installation of the operator itself.\n\nWhen the operator is uninstalled, the `MutatingWebhookConfiguration` resources for that operator instance are also removed.\n\n### Example\n\nThe below output shows the defaulting webhook configurations created for an operator deployed in the `datapower-operator` namespace. One can be seen for each CRD.\n\n```\n$ oc get mutatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.defaulter.datapower.ibm.com   1          3h30m\ndatapower-operator.datapowerservices.defaulter.datapower.ibm.com   1          3h30m\n```\n\n## Validating webhook\n\n### Purpose\n\nThe validating webhook is a type of [ValidatingAdmissionWebhook](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook) which runs against Custom Resources (CRs) at `CREATE` or `UPDATE` time to validate the CR contains a configuration which will yield an operable cluster. The CustomResourceDefinitions use OpenAPI schema validation for basic property checks (such as integer bounds and non-empty strings), but more complex validation of the configuration is done via the webhook.\n\n### Creation\n\nCurrently the validating webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `ValidatingWebhookConfiguration` resources for each CRD (listed below). This `ValidatingWebhookConfiguration` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.\n\nThe name for the `ValidatingWebhookConfiguration` resource for each CRD will take the following form:\n\n```\n<namespace>.<crd-name>.validator.datapower.ibm.com\n```\n\nThe following CustomResourceDefinitions utilize a validating webhook:\n\n- `DataPowerService`\n- `DataPowerMonitor`\n\n### Lifecycle\n\nWhile the validating webhook runtime itself lives within the DataPower Operator pod, the `ValidatingWebhookConfiguration` is a cluster-scope resource and is stand-alone. When it is created, an `ownerReference` is set on it that references the DataPower Operator's `ClusterRole`. Thus, the lifecycle of the `ValidatingWebhookConfiguration` resources will be linked with the `ClusterRole`, which is linked with the installation of the operator itself.\n\nWhen the operator is uninstalled, the `ValidatingWebhookConfiguration` resources for that operator instance are also removed.\n\n### Example\n\nThe below output shows the validating webhook configurations created for an operator deployed in the `datapower-operator` namespace. One can be seen for each CRD.\n\n```\n$ oc get validatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.validator.datapower.ibm.com   1          3h44m\ndatapower-operator.datapowerservices.validator.datapower.ibm.com   1          3h44m\n```\n\n## Conversion webhook\n\n### Purpose\n\nThe DataPowerService CustomResource now has multiple versions which have some large, meaningful changes between them that cannot be resolved with the default Kubernetes conversion strategy. An example of such a change is the removal of the `datapowerMonitor` spec in the upgrade from DataPowerService `v1beta1` to `v1beta2`. In the default mode, the `datapowerMonitor` spec would be dropped after the CRD is upgraded from `v1beta1` to `v1beta2`, losing user data. To define a more intelligent upgrade path, a conversion webhook is used. Continuing the example of the `datapowerMonitor` spec, the DataPower Operator conversion webhook preserves the user data by pulling out the `datapowerMonitor` spec and putting that spec into the related DataPowerMonitor CustomResource, which is what removed the need for the `datapowerMonitor` spec.\n\n### Resources\n\nThe conversion webhook is made up of four components:\n1. `datapower-operator-conversion-webhook` Deployment\n2. `datapower-operator-conversion-webhook` Service\n3. `datapower-conversion-key-cert` Secret\n4. Conversion definition in DataPowerService CRD\n\n**`datapower-operator-conversion-webhook` Deployment**\n\nThe `datapower-operator-conversion-webhook` Deployment manages the conversion webhook runtime Pod.\n\n**`datapower-operator-conversion-webhook` Service**\n\nThe `datapower-operator-conversion-webhook` Service is used by the KubeAPI to reach the conversion webhook runtime as defined in the DataPowerService CRD.\n\n**`datapower-conversion-key-cert` Secret**\n\nThe `datapower-conversion-key-cert` Secret contains the TLS key and cert used to authenticate communication with the KubeAPI. If this Secret is deleted, a new key-cert pair will be generated and used instead.\n\n**Conversion definition in DataPowerService CRD**\n\nThe DataPowerService CRD defines how one version should be converted to another. By default, the `conversionStrategy` is `None` but this is changed by the DataPower Operator to use a `conversionStrategy` of `Webhook`. This conversion definition contains the Service name, port, etc that should be used to communicate with the webhook runtime and a representation of the TLS certificate for authentication. This definition is updated as needed by the DataPower Operator managing the cluster's `datapower-operator-conversion-webhook` Deployment.\n\n### Creation\n\nThe `datapower-operator-conversion-webhook` Deployment is created and managed by the DataPower Operator. However, there can only be a single active conversion webhook in a cluster as only a single conversion definition is stored in the CRD. To accomodate this, the DataPower Operator scans all namespaces looking for an existing `datapower-operator-conversion-webhook`. This requires having cluster level permissions for listing/getting Namespaces and Deployments. If a `datapower-operator-conversion-webhook` Deployment is found, the DataPower Operator will check an annotation `datapower.ibm.com/managed-by` to determine if that webhook is managed by another DataPower Operator instance. If it is not being managed, the DataPower Operator that found the instance will claim ownership of the conversion webhook Deployment. If a conversion webhook Deployment is not found, one will be created in the same namespace as the DataPower Operator doing the scanning. In this way, there is always only one DataPower Operator conversion webhook in a cluster at a time.\n\nWhen a `datapower-operator-conversion-webhook` Deployment is being managed, the managing DataPower Operator will inspect the namespace to verify that a correct `datapower-operator-conversion-webhook` Service and `datapower-conversion-key-cert` Secret exist. If they don't exist or are not correct, they will be created. Once all resources are created and correct, the managing DataPower Operator will update the conversion definition in the DataPowerService CRD to reflect the new configuration.\n\n### Lifecycle\n\nAll conversion resources (1, 2, 3 above) are owned by the managing DataPower Operator. When the managing DataPower Operator Deployment is deleted, all conversion resources will be garbage collected. The conversion definition stored in the DataPowerService CRD is not cleaned up and will remain. This will potentially cause problems during uninstallation of the last DataPower Operator in the cluster, follow the [uninstallation guide](/uninstall) to be safe.\n\n### Image override\n\n<InlineNotification kind=\"warning\">\n\nYou should not override the `datapower-operator-conversion-webhook` image unless instructed to do so by IBM Support.\n\n</InlineNotification>\n\n<InlineNotification>\n\nNote: This feature is only available in version `1.4.0` onward.\n\n</InlineNotification>\n\nThe `datapower-operator-conversion-webhook` Deployment's image can be overridden by setting an environment variable (`CONVERSION_WEBHOOK_IMAGE`) in the `datapower-operator` Deployment. The value of the environment variable must be the full image URL for the desired image.\n\n#### Example\n\nThe below yaml snippet shows how to set this variable within the `datapower-operator` Deployment resource, using the `1.4.0` version image as example.\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: datapower-operator\n  ...\nspec:\n  template:\n    spec:\n      ...\n      containers:\n        - name: datapower-operator\n          env:\n          - name: CONVERSION_WEBHOOK_IMAGE\n            value: icr.io/cpopen/datapower-operator-conversion-webhook:1.4.0\n          ...\n\n```\n","type":"Mdx","contentDigest":"7f6276fce77506ab5ec1f7d378d731a2","counter":119,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Webhooks","description":"Admission controllers and conversion webhooks deployed and managed by the DataPower Operator"},"exports":{},"rawBody":"---\ntitle: Webhooks\ndescription: Admission controllers and conversion webhooks deployed and managed by the DataPower Operator\n---\n\n<PageDescription>\n\nThe DataPower Operator deploys and manages various Kubernetes API webhooks in the cluster to assist in management of its custom resources.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Defaulting webhook</AnchorLink>\n  <AnchorLink>Validating webhook</AnchorLink>\n  <AnchorLink>Conversion webhook</AnchorLink>\n</AnchorLinks>\n\n## Defaulting webhook\n\n### Purpose\n\nThe defaulting webhook is a type of [MutatingAdmissionWebhook](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook) which runs against Custom Resources (CRs) at `CREATE` or `UPDATE` time to populate default values in the CR's `spec`. Our API documentation for each CRD includes what defaults will be set by the webhook.\n\n### Creation\n\nCurrently the defaulting webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `MutatingWebhookConfiguration` resources for each CRD (listed below). This `MutatingWebhookConfiguration` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.\n\nThe name for the `MutatingWebhookConfiguration` resource for each CRD will take the following form:\n\n```\n<namespace>.<crd-name>.defaulter.datapower.ibm.com\n```\n\nThe following CustomResourceDefinitions utilize a defaulting webhook:\n\n- `DataPowerService`\n- `DataPowerMonitor`\n\n### Lifecycle\n\nWhile the defaulting webhook runtime itself lives within the DataPower Operator pod, the `MutatingWebhookConfiguration` is a cluster-scope resource and is stand-alone. When it is created, an `ownerReference` is set on it that references the DataPower Operator's `ClusterRole`. Thus, the lifecycle of the `MutatingWebhookConfiguration` resources will be linked with the `ClusterRole`, which is linked with the installation of the operator itself.\n\nWhen the operator is uninstalled, the `MutatingWebhookConfiguration` resources for that operator instance are also removed.\n\n### Example\n\nThe below output shows the defaulting webhook configurations created for an operator deployed in the `datapower-operator` namespace. One can be seen for each CRD.\n\n```\n$ oc get mutatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.defaulter.datapower.ibm.com   1          3h30m\ndatapower-operator.datapowerservices.defaulter.datapower.ibm.com   1          3h30m\n```\n\n## Validating webhook\n\n### Purpose\n\nThe validating webhook is a type of [ValidatingAdmissionWebhook](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook) which runs against Custom Resources (CRs) at `CREATE` or `UPDATE` time to validate the CR contains a configuration which will yield an operable cluster. The CustomResourceDefinitions use OpenAPI schema validation for basic property checks (such as integer bounds and non-empty strings), but more complex validation of the configuration is done via the webhook.\n\n### Creation\n\nCurrently the validating webhook runtime is part of the DataPower Operator runtime, i.e. it exists within the DataPower Operator pod and container. When the operator boots, it creates `ValidatingWebhookConfiguration` resources for each CRD (listed below). This `ValidatingWebhookConfiguration` is a cluster-scope resource, but the configuration within will be specific to the namespace and operator instance which created it. If more than one instance of the DataPower Operator is deployed across a cluster (in different namespaces) there will be a set of webhook configurations for each DataPower Operator instance and namespace.\n\nThe name for the `ValidatingWebhookConfiguration` resource for each CRD will take the following form:\n\n```\n<namespace>.<crd-name>.validator.datapower.ibm.com\n```\n\nThe following CustomResourceDefinitions utilize a validating webhook:\n\n- `DataPowerService`\n- `DataPowerMonitor`\n\n### Lifecycle\n\nWhile the validating webhook runtime itself lives within the DataPower Operator pod, the `ValidatingWebhookConfiguration` is a cluster-scope resource and is stand-alone. When it is created, an `ownerReference` is set on it that references the DataPower Operator's `ClusterRole`. Thus, the lifecycle of the `ValidatingWebhookConfiguration` resources will be linked with the `ClusterRole`, which is linked with the installation of the operator itself.\n\nWhen the operator is uninstalled, the `ValidatingWebhookConfiguration` resources for that operator instance are also removed.\n\n### Example\n\nThe below output shows the validating webhook configurations created for an operator deployed in the `datapower-operator` namespace. One can be seen for each CRD.\n\n```\n$ oc get validatingwebhookconfiguration\nNAME                                                               WEBHOOKS   AGE\ndatapower-operator.datapowermonitors.validator.datapower.ibm.com   1          3h44m\ndatapower-operator.datapowerservices.validator.datapower.ibm.com   1          3h44m\n```\n\n## Conversion webhook\n\n### Purpose\n\nThe DataPowerService CustomResource now has multiple versions which have some large, meaningful changes between them that cannot be resolved with the default Kubernetes conversion strategy. An example of such a change is the removal of the `datapowerMonitor` spec in the upgrade from DataPowerService `v1beta1` to `v1beta2`. In the default mode, the `datapowerMonitor` spec would be dropped after the CRD is upgraded from `v1beta1` to `v1beta2`, losing user data. To define a more intelligent upgrade path, a conversion webhook is used. Continuing the example of the `datapowerMonitor` spec, the DataPower Operator conversion webhook preserves the user data by pulling out the `datapowerMonitor` spec and putting that spec into the related DataPowerMonitor CustomResource, which is what removed the need for the `datapowerMonitor` spec.\n\n### Resources\n\nThe conversion webhook is made up of four components:\n1. `datapower-operator-conversion-webhook` Deployment\n2. `datapower-operator-conversion-webhook` Service\n3. `datapower-conversion-key-cert` Secret\n4. Conversion definition in DataPowerService CRD\n\n**`datapower-operator-conversion-webhook` Deployment**\n\nThe `datapower-operator-conversion-webhook` Deployment manages the conversion webhook runtime Pod.\n\n**`datapower-operator-conversion-webhook` Service**\n\nThe `datapower-operator-conversion-webhook` Service is used by the KubeAPI to reach the conversion webhook runtime as defined in the DataPowerService CRD.\n\n**`datapower-conversion-key-cert` Secret**\n\nThe `datapower-conversion-key-cert` Secret contains the TLS key and cert used to authenticate communication with the KubeAPI. If this Secret is deleted, a new key-cert pair will be generated and used instead.\n\n**Conversion definition in DataPowerService CRD**\n\nThe DataPowerService CRD defines how one version should be converted to another. By default, the `conversionStrategy` is `None` but this is changed by the DataPower Operator to use a `conversionStrategy` of `Webhook`. This conversion definition contains the Service name, port, etc that should be used to communicate with the webhook runtime and a representation of the TLS certificate for authentication. This definition is updated as needed by the DataPower Operator managing the cluster's `datapower-operator-conversion-webhook` Deployment.\n\n### Creation\n\nThe `datapower-operator-conversion-webhook` Deployment is created and managed by the DataPower Operator. However, there can only be a single active conversion webhook in a cluster as only a single conversion definition is stored in the CRD. To accomodate this, the DataPower Operator scans all namespaces looking for an existing `datapower-operator-conversion-webhook`. This requires having cluster level permissions for listing/getting Namespaces and Deployments. If a `datapower-operator-conversion-webhook` Deployment is found, the DataPower Operator will check an annotation `datapower.ibm.com/managed-by` to determine if that webhook is managed by another DataPower Operator instance. If it is not being managed, the DataPower Operator that found the instance will claim ownership of the conversion webhook Deployment. If a conversion webhook Deployment is not found, one will be created in the same namespace as the DataPower Operator doing the scanning. In this way, there is always only one DataPower Operator conversion webhook in a cluster at a time.\n\nWhen a `datapower-operator-conversion-webhook` Deployment is being managed, the managing DataPower Operator will inspect the namespace to verify that a correct `datapower-operator-conversion-webhook` Service and `datapower-conversion-key-cert` Secret exist. If they don't exist or are not correct, they will be created. Once all resources are created and correct, the managing DataPower Operator will update the conversion definition in the DataPowerService CRD to reflect the new configuration.\n\n### Lifecycle\n\nAll conversion resources (1, 2, 3 above) are owned by the managing DataPower Operator. When the managing DataPower Operator Deployment is deleted, all conversion resources will be garbage collected. The conversion definition stored in the DataPowerService CRD is not cleaned up and will remain. This will potentially cause problems during uninstallation of the last DataPower Operator in the cluster, follow the [uninstallation guide](/uninstall) to be safe.\n\n### Image override\n\n<InlineNotification kind=\"warning\">\n\nYou should not override the `datapower-operator-conversion-webhook` image unless instructed to do so by IBM Support.\n\n</InlineNotification>\n\n<InlineNotification>\n\nNote: This feature is only available in version `1.4.0` onward.\n\n</InlineNotification>\n\nThe `datapower-operator-conversion-webhook` Deployment's image can be overridden by setting an environment variable (`CONVERSION_WEBHOOK_IMAGE`) in the `datapower-operator` Deployment. The value of the environment variable must be the full image URL for the desired image.\n\n#### Example\n\nThe below yaml snippet shows how to set this variable within the `datapower-operator` Deployment resource, using the `1.4.0` version image as example.\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: datapower-operator\n  ...\nspec:\n  template:\n    spec:\n      ...\n      containers:\n        - name: datapower-operator\n          env:\n          - name: CONVERSION_WEBHOOK_IMAGE\n            value: icr.io/cpopen/datapower-operator-conversion-webhook:1.4.0\n          ...\n\n```\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/features/webhooks.mdx"}}}}