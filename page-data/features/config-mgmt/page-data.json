{"componentChunkName":"component---src-pages-features-config-mgmt-mdx","path":"/features/config-mgmt/","result":{"pageContext":{"frontmatter":{"title":"Configuration Management","description":"Management of IBM DataPower configuration"},"relativePagePath":"/features/config-mgmt.mdx","titleType":"page","MdxNode":{"id":"0f37e828-82c6-5ee2-bcfd-a9e716f811dc","children":[],"parent":"0206a513-20bb-5458-bb01-3008785d3614","internal":{"content":"---\ntitle: Configuration Management\ndescription: Management of IBM DataPower configuration\n---\n\n<PageDescription>\n\nThe DataPower Operator deploys and manages configuration defined by the `DataPowerService` Custom Resource spec.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Reconciliation</AnchorLink>\n  <AnchorLink>Domains</AnchorLink>\n  <AnchorLink>Users</AnchorLink>\n</AnchorLinks>\n\n## Reconciliation\n\nThe DataPower Operator will reconcile any `DataPowerService` Custom Resource instance created or updated in the namespace(s) it watches. This means that when you create a new `DataPowerService` instance, the DataPower Operator will see that new instance and begin to reconcile the requested configuration.\n\nEach `DataPowerService` will be translated to a StatefulSet, which is created in the cluster in the same namespace the `DataPowerService` resides in. This StatefulSet will deploy the actual DataPower Pods. When updates are made to the `DataPowerService`, those changes are propagated to the StatefulSet automatically. When the StatefulSet is updated, it performs a rolling update to propagate any changes out to the DataPower Pods.\n\nThis reconciliation behavior allows you to create a `DataPowerService` instance which specifies (for example) a couple of `users` and `domains`, and then update the backing resources (Secrets, ConfigMaps, etc.) directly in the cluster. When those resources are updated in the cluster, the DataPower Operator will automatically pick those changes up and propogate them to the StatefulSet.\n\n## Domains\n\nEach DataPower domain specified in the [domains](/apis/datapowerservice/spec#domains) property can be managed independently of the others. You can add, remove, or update any domain in the `domains` array, by modifying the `DataPowerService` instance in the cluster. For an in-depth look at what goes into configuring the `domains` property, see the [Domain Configuration](/guides/domain-configuration) guide.\n\nWhile the domain structures can be updated in the `domains` property (such as defining new ConfigMaps, or adding entirely new domains), the resources which back the domains can also be updated directly in the cluster.\n\nFor example, if the Secret resource referenced by a domain's `certs` spec is updated to include new crypto material (such as new certs or keys), this will trigger a reconciliation of that domain to serialize the changes to the StatefulSet and DataPower Pods.\n\nSimilarly, any ConfigMap referenced by the domain's `dpApp` spec can be updated in-place, and this will cause the new configuration / files to be deployed to the StatefulSet.\n\n### Annotations\n\nAnnotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when the last update was made to a particular domain:\n\n```yaml\ndatapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n```\n\nIn the above example, you can see there are two configured domains, `default` and `testdomain`, with their respective reconciled timestamps.\n\n## Users\n\nSimilarly to domains, each user specified in the [users](/apis/datapowerservice/spec#users) property can be managed independently of the others. You can add, remove, or update any user in the `users` array, by modifying the `DataPowerService` instance in the cluster.\n\nWhile the user structures can be updated in the `users` property (such as changing the `accessLevel` or `group`), the Secret specified by the `passwordSecret` can also be updated directly in the cluster.\n\nFor example, if the Secret specified by a user's `passwordSecret` is updated in the cluster, the DataPower Operator will reconcile this change to the StatefulSet, deploying the updated user configuration.\n\n### user-commands ConfigMap\n\nThe `accessLevel` and `group` properties for each user are added to a `user-commands` ConfigMap, which is mounted to each DataPower Pod in the StatefulSet. The name of this ConfigMap in built by appending `-user-commands` to the `name` of the `DataPowerService` instance.\n\nThus, if the `accessLevel` or `group` of an existing user is updated, or any users are added or removed from the `users` spec, this ConfigMap will also be updated.\n\n### Annotations\n\nAnnotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when user configuration has been changed. There will be a single annotation for each user, by name, and then another annotation for the `user-commands` ConfigMap.\n\n```yaml\ndatapower.ibm.com/user.admin.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/username.commands.reconciled: \"2020-06-04T02:36:55Z\"\n```\n\nIn the above example, you can see the `admin` user was reconciled at `2020-06-04T02:36:55Z` which aligns with the last update to the `username-commands` ConfigMap.\n","type":"Mdx","contentDigest":"7e30a4e64536d079424261e7b7c7ce8e","counter":86,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Configuration Management","description":"Management of IBM DataPower configuration"},"exports":{},"rawBody":"---\ntitle: Configuration Management\ndescription: Management of IBM DataPower configuration\n---\n\n<PageDescription>\n\nThe DataPower Operator deploys and manages configuration defined by the `DataPowerService` Custom Resource spec.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Reconciliation</AnchorLink>\n  <AnchorLink>Domains</AnchorLink>\n  <AnchorLink>Users</AnchorLink>\n</AnchorLinks>\n\n## Reconciliation\n\nThe DataPower Operator will reconcile any `DataPowerService` Custom Resource instance created or updated in the namespace(s) it watches. This means that when you create a new `DataPowerService` instance, the DataPower Operator will see that new instance and begin to reconcile the requested configuration.\n\nEach `DataPowerService` will be translated to a StatefulSet, which is created in the cluster in the same namespace the `DataPowerService` resides in. This StatefulSet will deploy the actual DataPower Pods. When updates are made to the `DataPowerService`, those changes are propagated to the StatefulSet automatically. When the StatefulSet is updated, it performs a rolling update to propagate any changes out to the DataPower Pods.\n\nThis reconciliation behavior allows you to create a `DataPowerService` instance which specifies (for example) a couple of `users` and `domains`, and then update the backing resources (Secrets, ConfigMaps, etc.) directly in the cluster. When those resources are updated in the cluster, the DataPower Operator will automatically pick those changes up and propogate them to the StatefulSet.\n\n## Domains\n\nEach DataPower domain specified in the [domains](/apis/datapowerservice/spec#domains) property can be managed independently of the others. You can add, remove, or update any domain in the `domains` array, by modifying the `DataPowerService` instance in the cluster. For an in-depth look at what goes into configuring the `domains` property, see the [Domain Configuration](/guides/domain-configuration) guide.\n\nWhile the domain structures can be updated in the `domains` property (such as defining new ConfigMaps, or adding entirely new domains), the resources which back the domains can also be updated directly in the cluster.\n\nFor example, if the Secret resource referenced by a domain's `certs` spec is updated to include new crypto material (such as new certs or keys), this will trigger a reconciliation of that domain to serialize the changes to the StatefulSet and DataPower Pods.\n\nSimilarly, any ConfigMap referenced by the domain's `dpApp` spec can be updated in-place, and this will cause the new configuration / files to be deployed to the StatefulSet.\n\n### Annotations\n\nAnnotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when the last update was made to a particular domain:\n\n```yaml\ndatapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n```\n\nIn the above example, you can see there are two configured domains, `default` and `testdomain`, with their respective reconciled timestamps.\n\n## Users\n\nSimilarly to domains, each user specified in the [users](/apis/datapowerservice/spec#users) property can be managed independently of the others. You can add, remove, or update any user in the `users` array, by modifying the `DataPowerService` instance in the cluster.\n\nWhile the user structures can be updated in the `users` property (such as changing the `accessLevel` or `group`), the Secret specified by the `passwordSecret` can also be updated directly in the cluster.\n\nFor example, if the Secret specified by a user's `passwordSecret` is updated in the cluster, the DataPower Operator will reconcile this change to the StatefulSet, deploying the updated user configuration.\n\n### user-commands ConfigMap\n\nThe `accessLevel` and `group` properties for each user are added to a `user-commands` ConfigMap, which is mounted to each DataPower Pod in the StatefulSet. The name of this ConfigMap in built by appending `-user-commands` to the `name` of the `DataPowerService` instance.\n\nThus, if the `accessLevel` or `group` of an existing user is updated, or any users are added or removed from the `users` spec, this ConfigMap will also be updated.\n\n### Annotations\n\nAnnotations are added to the StatefulSet PodTemplate (and thus the Pods themselves) which provide metadata regarding when user configuration has been changed. There will be a single annotation for each user, by name, and then another annotation for the `user-commands` ConfigMap.\n\n```yaml\ndatapower.ibm.com/user.admin.reconciled: \"2020-06-04T02:36:55Z\"\ndatapower.ibm.com/username.commands.reconciled: \"2020-06-04T02:36:55Z\"\n```\n\nIn the above example, you can see the `admin` user was reconciled at `2020-06-04T02:36:55Z` which aligns with the last update to the `username-commands` ConfigMap.\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/features/config-mgmt.mdx"}}}}