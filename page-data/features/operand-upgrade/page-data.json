{"componentChunkName":"component---src-pages-features-operand-upgrade-mdx","path":"/features/operand-upgrade/","result":{"pageContext":{"frontmatter":{"title":"Operand Upgrades","description":"Manual and automatic upgrade of IBM DataPower operands"},"relativePagePath":"/features/operand-upgrade.mdx","titleType":"page","MdxNode":{"id":"4966e7e7-ae16-5440-b588-03cd5d4d3a35","children":[],"parent":"8fd9bcac-35fd-5401-913a-4b4993563ba6","internal":{"content":"---\ntitle: Operand Upgrades\ndescription: Manual and automatic upgrade of IBM DataPower operands\n---\n\n<PageDescription>\n\nThe DataPower Operator supports both manual and automatic upgrades of the IBM DataPower Pods it manages via the StatefulSet.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Upgrade Strategy</AnchorLink>\n  <AnchorLink>Specifying a Version</AnchorLink>\n  <AnchorLink>Manual Upgrades</AnchorLink>\n  <AnchorLink>Automatic Upgrades</AnchorLink>\n  <AnchorLink>Checking the Reconciled Version</AnchorLink>\n</AnchorLinks>\n\n## Upgrade Strategy\n\nThe DataPower pods are managed by a StatefulSet, which is managed by the DataPower Operator. When any change is made to the `DataPowerService` Custom Resource (CR), the StatefulSet performs a rolling update to serialize the change across the pods. This same strategy is used to perform an upgrade, as the specified version of the DataPower operand is simply a property in the `DataPowerService` spec.\n\n## Specifying a Version\n\nOne of the required fields of the `DataPowerService` spec is [version](/apis/datapowerservice/spec#version). This property will determine which version the operator reconciles, unless a custom image is provided via the [image](/apis/datapowerservice/spec#image) property.\n\nIf a custom `image` is provided, the exact `version` must also be specified to inform the operator of what base image version is being used.\n\n### Manual Upgrades\n\nTo manually schedule the upgrade, an existing `DataPowerService` CR can be modified to specify a new `version`.\n\nFor example, let's assume `10.0.0.0` was the currently specified `version`, and `10.0.0.1` was available. To apply the CR change:\n\n```\noc patch dp <name> -p '{\"spec\":{\"version\":\"10.0.0.1\"}}' --type=merge\n```\n\nThis change could also be applied via `oc edit` or by `oc apply` with the appropriate YAML.\n\n### Automatic Upgrades\n\nThe DataPower Operator supports automatically upgrading the DataPower pods when new versions are available. To subscribe to an upgrade channel, specify an available channel name as the `version` in the `DataPowerService` CR spec. For example:\n\n```yaml\napiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  name: example\nspec:\n  version: 10.0-lts\n```\n\nIn the above example, the DataPower Operator will automatically apply the latest version when the CR is created. When a new version becomes available within that channel (i.e. `10.0.1.x`), the operator will automatically reconcile the new version, using the same Upgrade Strategy as above (rolling update).\n\n## Accepting the license on upgrade\n\nAs of version `1.3.0` (and the `v1beta3` API), the `spec.license.license` field must be updated for the automatic upgrade to complete. See [licenses](/guides/licenses) for more details.\n\n## Checking the Reconciled Version\n\nThe reconciled version of the `DataPowerService` will always represent the current version being used by the StatefulSet. If a channel is supplied in the `version` field, the reconciled version will reflect the chosen latest version within that channel. If a custom `image` is provided, the reconciled version will reflect the version specified in the `version` property, which is expected to match that of the `image`.\n\nThe reconciled version is available in the `DataPowerService` status at `status.versions.reconciled`. More on this topic [here](/apis/datapowerservice/status#versions).\n","type":"Mdx","contentDigest":"5cffd17a689bd4692d5ec6f9fb827e70","counter":112,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Operand Upgrades","description":"Manual and automatic upgrade of IBM DataPower operands"},"exports":{},"rawBody":"---\ntitle: Operand Upgrades\ndescription: Manual and automatic upgrade of IBM DataPower operands\n---\n\n<PageDescription>\n\nThe DataPower Operator supports both manual and automatic upgrades of the IBM DataPower Pods it manages via the StatefulSet.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Upgrade Strategy</AnchorLink>\n  <AnchorLink>Specifying a Version</AnchorLink>\n  <AnchorLink>Manual Upgrades</AnchorLink>\n  <AnchorLink>Automatic Upgrades</AnchorLink>\n  <AnchorLink>Checking the Reconciled Version</AnchorLink>\n</AnchorLinks>\n\n## Upgrade Strategy\n\nThe DataPower pods are managed by a StatefulSet, which is managed by the DataPower Operator. When any change is made to the `DataPowerService` Custom Resource (CR), the StatefulSet performs a rolling update to serialize the change across the pods. This same strategy is used to perform an upgrade, as the specified version of the DataPower operand is simply a property in the `DataPowerService` spec.\n\n## Specifying a Version\n\nOne of the required fields of the `DataPowerService` spec is [version](/apis/datapowerservice/spec#version). This property will determine which version the operator reconciles, unless a custom image is provided via the [image](/apis/datapowerservice/spec#image) property.\n\nIf a custom `image` is provided, the exact `version` must also be specified to inform the operator of what base image version is being used.\n\n### Manual Upgrades\n\nTo manually schedule the upgrade, an existing `DataPowerService` CR can be modified to specify a new `version`.\n\nFor example, let's assume `10.0.0.0` was the currently specified `version`, and `10.0.0.1` was available. To apply the CR change:\n\n```\noc patch dp <name> -p '{\"spec\":{\"version\":\"10.0.0.1\"}}' --type=merge\n```\n\nThis change could also be applied via `oc edit` or by `oc apply` with the appropriate YAML.\n\n### Automatic Upgrades\n\nThe DataPower Operator supports automatically upgrading the DataPower pods when new versions are available. To subscribe to an upgrade channel, specify an available channel name as the `version` in the `DataPowerService` CR spec. For example:\n\n```yaml\napiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  name: example\nspec:\n  version: 10.0-lts\n```\n\nIn the above example, the DataPower Operator will automatically apply the latest version when the CR is created. When a new version becomes available within that channel (i.e. `10.0.1.x`), the operator will automatically reconcile the new version, using the same Upgrade Strategy as above (rolling update).\n\n## Accepting the license on upgrade\n\nAs of version `1.3.0` (and the `v1beta3` API), the `spec.license.license` field must be updated for the automatic upgrade to complete. See [licenses](/guides/licenses) for more details.\n\n## Checking the Reconciled Version\n\nThe reconciled version of the `DataPowerService` will always represent the current version being used by the StatefulSet. If a channel is supplied in the `version` field, the reconciled version will reflect the chosen latest version within that channel. If a custom `image` is provided, the reconciled version will reflect the version specified in the `version` property, which is expected to match that of the `image`.\n\nThe reconciled version is available in the `DataPowerService` status at `status.versions.reconciled`. More on this topic [here](/apis/datapowerservice/status#versions).\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/features/operand-upgrade.mdx"}}}}