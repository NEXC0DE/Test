{"componentChunkName":"component---src-pages-apis-datapowerservice-v-1-beta-2-mdx","path":"/apis/datapowerservice/v1beta2/","result":{"pageContext":{"frontmatter":{"title":"DataPowerService","tabs":["v1beta3","v1beta2","v1beta1"],"description":"DataPowerService API definition"},"relativePagePath":"/apis/datapowerservice/v1beta2.mdx","titleType":"page","MdxNode":{"id":"2361842b-2470-5c08-ae1a-47699257c7fc","children":[],"parent":"46396fd6-b579-50ea-81d1-b51c0ccbe3e3","internal":{"content":"---\ntitle: DataPowerService\ntabs: ['v1beta3', 'v1beta2', 'v1beta1']\ndescription: DataPowerService API definition\n---\n\n<PageDescription>\n\nThe `DataPowerService` is a Custom Resource Definition used to deploy and manage a DataPower StatefulSet.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Spec</AnchorLink>\n  <AnchorLink>Status</AnchorLink>\n</AnchorLinks>\n\n# Spec\n\n## Properties\n\n|Property             |Description                                                         |Required|Default      |\n|---------------------|--------------------------------------------------------------------|--------|-------------|\n|`license`            |License acceptance and use                                          |Yes     |None         |\n|`version`            |DataPower firmware version                                          |Yes     |None         |\n|`replicas`           |Desired number of Pods in the Statefulset                           |Yes     |None         |\n|`image`              |Custom DataPower image                                              |No      |None         |\n|`imagePullSecrets`   |Image pull secrets                                                  |No      |None         |\n|`users`              |List of `Users` to associate with DataPower                         |No      |See doc below|\n|`domains`            |List of `DataPowerDomains` to associate with Service                |No      |None         |\n|`env`                |Environment variables                                               |No      |None         |\n|`initCmds`           |Commands to run during user-specified initialization stage          |No      |None         |\n|`extraExe`           |List of ConfigMap names to mount containing extra executables       |No      |None         |\n|`debug`              |Enable debug logging on init scripts                                |No      |`false`      |\n|`resources`          |Resource specifications for StatefulSet                             |No      |See doc below|\n|`livenessProbe`      |Custom LivenessProbe                                                |No      |See doc below|\n|`readinessProbe`     |Custom ReadinessProbe                                               |No      |See doc below|\n|`affinity`           |Custom Kubernetes `Affinity` configuration                          |No      |See doc below|\n|`storage`            |Persistent volume requests                                          |No      |See doc below|\n|`podManagementPolicy`|Control how pods are deployed                                       |No      |`Parallel`   |\n|`serviceAccountName` |Name of desired service account                                     |No      |None         |\n|`odTracing`          |OpenTracing Agent and Collector container configurations            |No      |See doc below|\n|`annotations`        |Custom annotations to apply to Pods                                 |No      |None         |\n|`labels`             |Custom labels to apply to Pods                                      |No      |None         |\n|`tolerations`        |Toleration settings to apply when scheduling DataPower Pods         |No      |None         |\n|`nodeSelector`       |NodeSelector key-value pairs to match when scheduling DataPower Pods|No      |None         |\n|`lifecycle`          |Container lifecycle hook to be executed                             |No      |None         |\n\n<AnchorLinks small>\n  <AnchorLink>license</AnchorLink>\n  <AnchorLink>version</AnchorLink>\n  <AnchorLink>replicas</AnchorLink>\n  <AnchorLink>image</AnchorLink>\n  <AnchorLink>imagePullSecrets</AnchorLink>\n  <AnchorLink>users</AnchorLink>\n  <AnchorLink>domains</AnchorLink>\n  <AnchorLink>env</AnchorLink>\n  <AnchorLink>initCmds</AnchorLink>\n  <AnchorLink>extraExe</AnchorLink>\n  <AnchorLink>debug</AnchorLink>\n  <AnchorLink>resources</AnchorLink>\n  <AnchorLink>livenessProbe</AnchorLink>\n  <AnchorLink>readinessProbe</AnchorLink>\n  <AnchorLink>affinity</AnchorLink>\n  <AnchorLink>storage</AnchorLink>\n  <AnchorLink>podManagementPolicy</AnchorLink>\n  <AnchorLink>serviceAccountName</AnchorLink>\n  <AnchorLink>odTracing</AnchorLink>\n  <AnchorLink>annotations</AnchorLink>\n  <AnchorLink>labels</AnchorLink>\n  <AnchorLink>tolerations</AnchorLink>\n  <AnchorLink>nodeSelector</AnchorLink>\n  <AnchorLink>lifecycle</AnchorLink>\n</AnchorLinks>\n\n## `license`\n\n### Description\n\nThe `License` property contains two required fields:\n\n- `accept`: must be boolean `true` for the DataPower pod(s) to start successfully. This property directly sets the DataPower `DATAPOWER_LICENSE_ACCEPT` environment variable in pods, which acknowledges the license acceptance.\n- `use`: the license use. Can be one of the following values:\n  - `production`\n  - `nonproduction`\n  - `developers`\n  - `developers-limited`\n\nThe `license.use` is used in tandem with the `version` property to determine what DataPower firmware image to pull and use in the deployment, see [Image selection](/features/entitled-registry#image-selection).\n\n<InlineNotification>\n\nWhen deploying in IBM Cloud Pak for Integration, only the `production` or `nonproduction` values can be used.\n\n</InlineNotification>\n\nTo view the full license terms, you can:\n\n```\ndocker run --rm <image> --show-license\n```\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  license:\n    accept: true\n    use: production\n  ...\n```\n\n## `version`\n\n### Description\n\nThe `version` property specifies the desired DataPower firmware version to reconcile. This value must match an available version or channel the CRD and operator provide. Subscribing to a channel will allow for automatic updates to future versions on that channel. If the `DataPowerService` instance is created with a channel specified in `version`, the latest available version in that channel will be reconciled.\n\nYou are also able to lock in a specific version by specifying the full version string, for example `10.0.0.0`.\n\nYou can view the reconciled and available versions and channels on the `DataPowerService` instance's status, once created.\n\n### Channels\n\n#### Supported\n\nThe table below shows the **supported** channels for this CRD version (`v1beta2`) and operator version (`1.2.x`). Supported channels indicate channels which can be specified by `spec.version` for which this version of the DataPower Operator will understand and reconcile.\n\n|Channel   |Stream    |Latest        |\n|----------|----------|--------------|\n|`10.0-eus`|`10.0.1.x`|`10.0.1.6-eus`|\n|`10.0-lts`|`10.0.1.x`|`10.0.1.6`    |\n|`10.0-cd` |`10.0.0.x`|`10.0.0.1`    |\n\n#### Available\n\nThe table below shows the **available** channels for this CRD version (`v1beta2`) and operator version (`1.2.x`). Available channels (and version) are advertised in Cloud Pak for Integration as targets for operand upgrade. To enable and support the Cloud Pak for Integration EUS strategy, version `1.2.x` will only advertise EUS operand channels and versions.\n\n|Channel   |Stream    |Latest        |\n|----------|----------|--------------|\n|`10.0-eus`|`10.0.1.x`|`10.0.1.6-eus`|\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  version: 10.0-eus\n```\n\n## `replicas`\n\n### Description\n\nThe `replicas` property is an integer that directly sets the `replicas` field on the `StatefulSet` of DataPower pods. This property sets the number of DataPower pods you wish to deploy.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  replicas: 3\n  ...\n```\n\n## `image`\n\n### Description\n\nThe `image` property allows for a custom built DataPower Docker image to be used in the deployment. This field is optional, and will override the image that would be specified by `version` and `license.use`. The value of this property, if provided, will be directly used in the DataPower Pod specs.\n\n<InlineNotification>\n\n**Note:** If this field is set, you are responsible for setting the `version` property to the appropriate matching version that your custom image is based on. For example, if you are using a custom `image` based on `10.0.0.0`, then set `version` to `10.0.0.0`.\n\n</InlineNotification>\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  image: my.registry.com/my-custom-datapower:v10\n  version: 10.0.0.0\n  ...\n```\n\n## `imagePullSecrets`\n\n### Description\n\nThe `imagePullSecrets` property specifies the name of Kubernetes `Secret` objects in the cluster which will provide the Docker registry credentials to pull any images needed during reconciliation and deployment.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  imagePullSecrets:\n  - datapower-cred-one\n  - datapower-cred-two\n  ...\n```\n\n## `users`\n\n### Description\n\nThe `users` property defines the user accounts to be created. The `name` field will be the name of the account and the `passwordSecret` field is the name of the secret that contains the credentials for the user account. The `access-level` and `group` property define the access-level, either `privileged` or `group-defined`, and the group, if access-level is `group-defined`. If using groups, it is expected that the configuration provided for the default domain would define the user group in RBM settings. This property does not create the group, it just creates a user asigned to the specified group.\n\nAn admin account must be defined. By default, an admin account is defined using the secret name `admin-credentials`. You can either create a secret with that name containing the credentials for the admin account, or use a different secret name by changing the `passwordSecret` field for the admin user in the CR.\n\nThe following are values in the secret which can be used to define the user's credentials:\n\n- `password-hashed`: The hashed value (see Linux `man 3 crypt` for format) of the user's password. Required if `password` is not defined.\n- `password`: The user's password. Required if `password-hashed` is not defined; ignored if `password-hashed` is defined.\n- `salt`: The salt value used when hashing `password` (see `man 3 crypt`). Optional; ignored when `password-hashed` is defined. (Default: 12345678)\n- `method`: The name of the hashing algorithm used to hash `password`. Valid options: md5, sha256. Optional; ignored when `password-hashed` is defined. (Default: md5)\n\nThe following examples create Secrets with different values, but result in an user with the same credentials (and the same password hash):\n\n-  `kubectl create secret generic userName-credentials --from-literal=password=helloworld --from-literal=salt=12345678 --from-literal=method=md5`\n-  `kubectl create secret generic userName-credentials --from-literal=password=helloworld`\n-  `kubectl create secret generic userName-credentials --from-literal=password-hashed='$1$12345678$8.nskQfP4gQ8tk5xw6Wa8/'`\n\nThese two examples also result in Secrets with different values but identical user credentials\n\n-  `kubectl create secret generic userName-credentials --from-literal=password=hunter2 --from-literal=salt=NaCl --from-literal=method=sha256`\n-  `kubectl create secret generic userName-credentials --from-literal=password-hashed='$5$NaCl$aOrRVimQNvZ2ZLjnAyMvT3WgaUEXoWgwkgyBrhwIg04'`\n\n    Notice that, when setting `password-hashed`, the value must be surrounded by single-quotes\n\nFor more information, read the Kubernetes documentation on [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  users:\n  - name: admin\n    passwordSecret: admin-credentials\n    access-level: privileged\n  - name: user1\n    passwordSecret: user1-credentials\n    accessLevel: group-defined\n    group: group1\n  - name: user2\n    passwordSecret: user2-credentials\n    accessLevel: group-defined\n    group: group2\n  ...\n```\n\n## `domains`\n\n### Description\n\nThe `domains` property allows for user-provided domain configuration(s) to be injected into the DataPower pods at runtime, prior to the DataPower process starting.\n\nFor an in-depth look at utilizing this property, please see [Domain Configuration](/guides/domain-configuration).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  domains:\n  - name: \"default\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"default-cert\"\n    - certType: \"sharedcerts\"\n      secret: \"shared-cert\"\n    dpApp:\n      config:\n      - \"default-config\"\n      local:\n      - \"default-local\"\n  - name: \"example\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"example-cert\"\n      subPath: \"/example/path\"\n    dpApp:\n      config:\n      - \"example-config-pt-0\"\n      - \"example-config-pt-1\"\n      - \"example-config-pt-2\"\n      local:\n      - \"example-local-pt-0\"\n      - \"example-local-pt-1\"\n      - \"example-local-pt-2\"\n  ...\n```\n\n## `env`\n\n### Description\n\nThe `env` property allows you to set custom environment variables that will be set and used within the DataPower containers in the StatefulSet. This property exposes the Kubernetes API for declaring environment variables in the container, and thus follows the same schema. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  env:\n  - name: DATAPOWER_LOG_LEVEL\n    value: \"7\"\n  ...\n```\n\n## `initCmds`\n\n### Description\n\nThe `initCmds` property is an array of strings that represent initialization commands that you wish to run prior to the DataPower process starting. These commands will be run after the DataPower Operator internal initialization scripts, but before the DataPower `start.sh` script.\n\nThis property can be used in conjunction with the `extraExe` property to run custom initialization scripts that you've added to the DataPower pod(s), or any custom sidecar processes you wish to run in the DataPower containers.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  initCmds:\n  - /usr/local/extra/test.sh\n  - ls -al /opt/ibm/datapower/drouter/config\n  ...\n```\n\n## `extraExe`\n\n### Description\n\nThe `extraExe` property is an array of strings that represent name(s) of ConfigMaps in the cluster. When the DataPower pod(s) are created, the ConfigMaps specified by `extraExe` are mounted with `r+x` permissions at `/usr/local/extra`.\n\nThis property can be used in conjunction with the `initCmds` property to run custom initialization scripts that you've added to the DataPower pod(s), or any custom sidecar processes you wish to run in the DataPower containers.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  extraExe:\n  - config-map-one\n  - config-map-two\n  - config-map-three\n  ...\n```\n\n## `debug`\n\n### Description\n\nThe `debug` property is a user toggleable debugging utility. If not set, it will default to `false`. For more information on the use of this property, see the [Init Scripts](/troubleshooting/init-scripts) troubleshooting guide.\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** The `debug` property should only be set `true` if instructed by IBM Support.\n\n</InlineNotification>\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  debug: true\n```\n\n## `resources`\n\n### Description\n\nThe `resources` property specifies the desired resources to allocate to the DataPower containers in the statefulset. It is worth noting that you can only request CPU, there is not a limit field, as the DataPower Operator will set:\n\n```\nDATAPOWER_WORKER_THREADS == container.limits.cpu == container.requests.cpu\n```\n\nThus, when you define the CPU request, all of the above three values will get that value in the statefulset. This ensures best practices are followed in the DataPower runtime statefulset.\n\nYou are still able to set both requests and limits for memory. In both cases (`cpu` and `memory`) the values must follow Kubernetes formatting constraints.\n\nIf this field is not provided, or parts of the `resources` object are left unset, the example below shows the default value(s) that will be used.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  resources:\n    requests:\n      cpu: 4\n      memory: 4Gi\n    limits:\n      memory: 8Gi\n  ...\n```\n\n## `livenessProbe`\n\n### Description\n\nThe `livenessProbe` property allows you to set a custom Livensss Probe for the DataPower container(s) in the StatefulSet. The value of this property must be a well formed Kubernetes `Probe` type. If not specified, the following default will be used:\n\n```yaml\nlivenessProbe:\n  failureThreshold: 3\n  httpGet:\n    path: /\n    port: 7879\n    scheme: HTTP\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 5\n```\n\nThis default `livenessProbe` leverages the built-in DataPower health-check sidecar process.\n\n### Example\n\nIn addition to the above example, it's worth reviewing Kubernetes documentation on [Configure Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) for additional details on what configuration capabilities are available for this field.\n\n## `readinessProbe`\n\n### Description\n\nThe `readinessProbe` property allows you to set a custom Readiness Probe for the DataPower container(s) in the statefulset. The value of this property must be a well formed Kubernetes `Probe` type. If not specified, the following default will be used:\n\n```yaml\nreadinessProbe:\n  failureThreshold: 3\n  httpGet:\n    path: /\n    port: 7879\n    scheme: HTTP\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 5\n```\n\nThis default `readinessProbe` leverages the built-in DataPower health-check sidecar process.\n\n### Example\n\nIn addition to the above example, it's worth reviewing Kubernetes documentation on [Configure Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) for additional details on what configuration capabilities are available for this field.\n\n## `affinity`\n\n### Description\n\n`Affinity` is an interface for specifying custom affinity settings. This field is a literal `Affinity` object from the Kubernetes library, so it is fully featured and applies directly to the pods. When no Affinity is specified, the defaults shown in the example below are used.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"beta.kubernetes.io/arch\"\n              operator: In\n              values: [\"amd64\"]\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        podAffinityTerm:\n          topologyKey: \"kubernetes.io/hostname\"\n          labelSelector:\n            matchLabels:\n              app: datapower\n              release: example-dpservice\n```\n\n## `storage`\n\n### Description\n\nThe `Storage` property is a list of storage definitions. Storage definitions fall into two categories: ephermeral and persistent. For persistent storage definitions, the [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) must use an access mode of `ReadWriteOnce`.\n\nThe following fields can be modified:\n\n- `type`\n- `path`\n- `size`\n- `class`\n- `volumeMode`\n- `selector`\n- `deleteClaim`\n\n#### `type`\n\n`type` defines the kind of storage volume that will be created. There are two valid options: `ephemeral` and `persistent`. Ephemeral storage takes the form of EmptyDir volumes mounted on `path`. Persistent storage takes the form of Persistent Volume Claims.\n\n<InlineNotification kind=\"warning\">\n\nStorage definitions of type `persistent` need to be decided and delcared at initial deployment time. Updates to the `storage` definition that modify (add, remove, update) `persistent` storage requests are not allowed, and will be rejected.\n\n<br/>\n\nIf changes to `persistent` storage definitions must be made, the `DataPowerService` instance will need to be **deleted and recreated** with the new definitions. Note that deleting the `DataPowerService` instance will also delete the associated `StatefulSet`.\n\n</InlineNotification>\n\n#### `path`\n\n`path` is simply the path internal to the container to persist. The `path` also informs the names of the volume resources to ensure uniqueness.\n\nThis field applies to both ephemeral and persistent types.\n\n#### `size`\n\n`size` is the size of the persisted volume. The expected format is some form of `#Gi`. For more information on resource definitions, see Kubernetes [Resources documentation](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md).\n\nThis field applies to both ephermeral and persistent types.\n\n#### `class`\n\n`class` is a direct pass through to the `storageClassName` field for the Persistent Volume Claim. It determines which class to use for the volume. See Kubernetes [StorageClass documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1) for more details.\n\nThis field applies only to the persistent type.\n\n#### `volumeMode`\n\n<InlineNotification kind=\"warning\">\n\nThis field is **deprecated** in `1.2.0`. If set to `Block` previously, the CR will be migrated to use `Filesystem` instead.\n\n</InlineNotification>\n\nIf a value for `volumeMode` is provided, it will be overridden and set to `Filesystem` instead. See Kubernetes [VolumeMode documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-modes) for more details.\n\nThis field applies only to the persistent type.\n\n#### `selector`\n\n`selector` is a set of label selectors to refine the search for a Persistent Volume to bind.\n\nThis field applies only to the persistent type.\n\n#### `deleteClaim`\n\n`deleteClaim` is a boolean value to specify whether a persistent volume claim should be deleted or retained.\n\nThis field applies only to the persistent type.\n\n### Example\n\n```yaml\nstorage:\n- type: persistent\n  path: /opt/ibm/datapower/drouter/config\n  size: 10Gi\n  class: some-storage-class\n  volumeMode: Filesystem\n  selector:\n    matchLabels:\n      example.label: some.value\n- type: ephemeral\n  path: /opt/ibm/datapower/drouter/temporary\n  size: 2Gi\n```\n\n## `podManagementPolicy`\n\n### Description\n\nThe `podManagementPolicy` property maps directly to the StatefulSet PodManagementPolicy. There are two valid options: `Parallel` and `OrderedReady`. `Parallel`, the DataPowerService default, will make pods initially install in parallel to decrease time-to-ready. `OrderedReady` will make pods install sequentially, each waiting for the previous to become Ready before begining to install. For more information, read the Kubernetes documentation on [PodManagementPolicy](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies).\n\n### Example\n\n```yaml\nspec:\n  podManagementPolicy: OrderedReady\n```\n\n## `serviceAccountName`\n\n### Description\n\nThe `serviceAccountName` is a pass-through field for a Pod's ServiceAccountName. This field should be a string that is the name of the Service Account that is to be used by the deployed DataPower Pods.\n\nIf no value is provided, a minimal Service Account will be generated for use by the StatefulSet. The generated Service Account will also include reference to the `ibm-entitlement-key` image pull secret. For more information on this, see the [Entitled Registry](/features/entitled-registry) documentation.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  serviceAccountName: \"example-serviceaccount\"\n```\n\n## `odTracing`\n\n### Description\n\nThe `odTracing` property contains the necessary information to enable OpenTracing and run an agent and collector containers. If `odTracing` is not defined, OpenTracing will be disabled by default. All of the required properties must be provided. It is recomended to only provide values for the agent and collector probes if instructed by IBM support. The agent and collector probes will default to recomended values shown in the example below when not included. If including custom probe settings, only properties that need to be changed have to be included. When going through the OpenTracing registration process, the secret that stores credentials should be named `icp4i-od-store-cred`.\n\nRequired:\n\n- `enabled`\n- `imagePullPolicy`\n- `odTracingRegistrationHostname`\n- `odTracingDataHostname`\n- `imageAgent`\n- `imageCollector`\n\nOptional:\n\n- `agent`\n- `collector`\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  odTracing:\n    enabled: true\n    imagePullPolicy: \"IfNotPresent\"\n    odTracingRegistrationHostname: icp4i-od.tracing.svc\n    odTracingDataHostname: od-store-od.tracing.svc\n    imageAgent: docker.io/ibmcom/icp4i_od_agent:1.0.0-amd64\n    imageCollector: docker.io/ibmcom/icp4i_od_collector:1.0.0-amd64\n    collector:\n      livenessProbe:\n        initialDelaySeconds: 8\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n      readinessProbe:\n        initialDelaySeconds: 10\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n    agent:\n      livenessProbe:\n        initialDelaySeconds: 8\n        periodSeconds: 10\n        timeoutSeconds: 2\n       failureThreshold: 3\n      readinessProbe:\n        initialDelaySeconds: 10\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n  ...\n```\n\n## `annotations`\n\n### Description\n\nThe `annotations` field serves as a pass-through for Pod annotations. Users can add any annotation to this field and have it apply to the Pod. The annotations here overwrite the default annotations if provided. For example, if the annotation `prometheus.io/scrape` was provided, it would overwrite our default value of `\"true\"`.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  annotations:\n    prometheus.io/scrape: \"false\"\n```\n\n## `labels`\n\n### Description\n\nThe `labels` field serves as a pass-through for Pod labels. Users can add any label to this field and have it apply to the Pod. The labels here overwrite the default labels if provided. For example, if the label `app.kubernetes.io/instance` was provided, it would overwrite our default value of `<cr.namespace>-<cr.name>`.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  labels:\n    app.kubernetes.io/instance: \"my-service\"\n```\n\n## `tolerations`\n\n### Description\n\nThe `Tolerations` field allows users to select which nodes DataPower Pods can be scheduled or not scheduled. By specifying a set of matching tolerations, users can control whether specific nodes can be used for scheduling DataPower Pods. In order for this to work, the corresponding nodes must have been tainted accoringly. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).\n\n### Example\n\nThe following tolerations allow DataPower Pods to be scheduled on nodes tainted with `host=dp:NoSchedule`.\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  tolerations:\n  - key: \"host\"\n    value: \"db\"\n    operator: \"Equal\"\n    effect: \"NoSchedule\"\n```\n\n## `nodeSelector`\n\n### Description\n\nThe `NodeSelector` field allows users to specify a set of key value pair that must be matched against the node labels to decide whether DataPower Pods can be scheduled on that node. Only nodes matching all of these key value pairs in their labels will be selected for scheduling DataPower Pods. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).\n\n### Example\n\nThe following illustrates how to schedule DataPower Pods only on nodes labeled `hostType=gateway`.\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  nodeSelector:\n    hostType: gateway\n```\n\n## `lifecycle`\n\n### Description\n\n`lifecycle` allows scripts to be executed after starting and before stopping the DataPower container. For more details on container lifecycle hooks, please refer to the following Kubernetes documentation:\n\n- [Container Lifecycle Hooks](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/)\n- [Attach Handlers to Container Lifecycle Events](https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/)\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  lifecycle:\n    postStart:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"echo Hello from the postStart handler >> ~/lifecycle.log\"]\n    preStop:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"echo Hello from the preStop handler >> ~/lifecycle.log\"]\n\n```\n\n### Delaying SIGTERM with preStop\n\nWhen the DataPower container is terminated by Kubernetes under normal conditions (such as a scaling event or rolling update), any in-flight transactions may be terminated. The use of the `preStop` lifecycle hook can help to mitigate this by delaying the `SIGTERM` being sent to the container. For example, a 20 second delay in the below example would delay the shutdown by 20 seconds giving in-flight transactions on the gateway that much time to complete successfully before being terminated.\n\n```yaml\nspec:\n  lifecycle:\n    preStop:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"sleep 20\"]\n```\n\n<InlineNotification kind=\"warning\">\n\nThe `preStop` handler should complete within `terminationGracePeriodSeconds`, which by default is 30 seconds. Otherwise it will not prevent the `TERM` signal being sent to the DataPower container. Thus it is not recommended to exceed `sleep 30`. See the Kubernetes documentation on [termination of Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination) for a deeper understanding of this lifecycle.\n\n</InlineNotification>\n\n# Status\n\n<AnchorLinks>\n  <AnchorLink>Conditions</AnchorLink>\n  <AnchorLink>Custom Images</AnchorLink>\n  <AnchorLink>Management Ports</AnchorLink>\n  <AnchorLink>Nodes</AnchorLink>\n  <AnchorLink>Phase</AnchorLink>\n  <AnchorLink>Versions</AnchorLink>\n</AnchorLinks>\n\n## Example\n\n```\n$ oc get dp\nNAME        PHASE     READY   SUMMARY                           VERSION    AGE\nexample     Running   True    StatefulSet replicas ready: 3/3   10.0.1.0   171m\n\n$ oc describe dp/example\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2020-09-21T17:19:02Z\n    Message:               StatefulSet replicas ready: 3/3\n    Reason:                StatefulSetReady\n    Status:                True\n    Type:                  Ready\n  Custom Images:           true\n  Mgmt Ports:\n    Name:  rest-mgmt\n    Port:  5554\n  Nodes:\n    dpservice-0\n    dpservice-1\n    dpservice-2\n  Phase:  Running\n  Versions:\n    Available:\n      Channels:\n        Name:  10.0-lts\n        Name:  10.0-cd\n      Versions:\n        Name:    10.0.1.0\n        Name:    10.0.0.1\n        Name:    10.0.0.0\n    Reconciled:  10.0.1.0\n```\n\n## Conditions\n\nThe `DataPowerService` supports Kubernetes [Conditions](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties). These `Conditions` can be viewed as a snapshot of the current and most up-to-date status of the `DataPowerService` instance.\n\n- The `Pending` condition will be set `True` when the `DataPowerService` is first created and is reconciling the desired StatefulSet. Once the `StatefulSet` is created and `Ready`, this `Pending` condition will be removed.\n- The `Ready` condition will be set `True` when all of the Pods in the StatefulSet are `Ready`, and the number of replicas in the StatefulSet matches the desired number of replicas set by the `DataPowerService` instance spec.\n- The `Error` condition will be set `True` when an error is encountered during reconciliation of the `DataPowerService`. The `Reason` and `Message` should have details regarding what the error may have been, such as a referenced ConfigMap not being found.\n\n## Custom Images\n\nThe `CustomImages` status property is a boolean flag that will be set `True` when a custom image (set via the `image` property in the CR spec) is being used.\n\n## Managment Ports\n\nThe `MgmtPorts` status property is a list of management ports for the DataPowerService. Each item in the list will show the configured port for the respective management interface.\n\n<InlineNotification>\n\nCurrently, only the `rest-mgmt` interface is supported.\n\n</InlineNotification>\n\n## Nodes\n\nThe `Nodes` status provides the list of DataPower Pods currently deployed via the StatefulSet.\n\n## Phase\n\nThe `Phase` status property provides the current phase of the `DataPowerService`. The value can be one the following:\n\n- `Pending` - There are no errors, but the `DataPowerService` is not yet `Ready`.\n- `Running` - There are no errors, and the `DataPowerService` is `Ready`.\n- `Failed` - There has been a `ReconcileError`.\n\n## Versions\n\nThe `Versions` status provides information about the currently reconciled version of the operand (DataPower), as well as the available versions and channels the operator supports.\n\nA channel, such as `10.0-lts`, allows for a user to subscribe to a stream of releases. When initially deployed with the `version` property in the CR spec set to a channel, the operator will automatically install the latest available version within that channel. When new versions are released in that channel, the operands (CR instances) will automatically be upgraded by the operator.\n\nThe currently reconciled version will always be available in `status.versions.reconciled`, even if the `version` specified in the CR spec is a channel.\n","type":"Mdx","contentDigest":"0794e5c48307dda6f69a3ad44be88433","counter":152,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"DataPowerService","tabs":["v1beta3","v1beta2","v1beta1"],"description":"DataPowerService API definition"},"exports":{},"rawBody":"---\ntitle: DataPowerService\ntabs: ['v1beta3', 'v1beta2', 'v1beta1']\ndescription: DataPowerService API definition\n---\n\n<PageDescription>\n\nThe `DataPowerService` is a Custom Resource Definition used to deploy and manage a DataPower StatefulSet.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Spec</AnchorLink>\n  <AnchorLink>Status</AnchorLink>\n</AnchorLinks>\n\n# Spec\n\n## Properties\n\n|Property             |Description                                                         |Required|Default      |\n|---------------------|--------------------------------------------------------------------|--------|-------------|\n|`license`            |License acceptance and use                                          |Yes     |None         |\n|`version`            |DataPower firmware version                                          |Yes     |None         |\n|`replicas`           |Desired number of Pods in the Statefulset                           |Yes     |None         |\n|`image`              |Custom DataPower image                                              |No      |None         |\n|`imagePullSecrets`   |Image pull secrets                                                  |No      |None         |\n|`users`              |List of `Users` to associate with DataPower                         |No      |See doc below|\n|`domains`            |List of `DataPowerDomains` to associate with Service                |No      |None         |\n|`env`                |Environment variables                                               |No      |None         |\n|`initCmds`           |Commands to run during user-specified initialization stage          |No      |None         |\n|`extraExe`           |List of ConfigMap names to mount containing extra executables       |No      |None         |\n|`debug`              |Enable debug logging on init scripts                                |No      |`false`      |\n|`resources`          |Resource specifications for StatefulSet                             |No      |See doc below|\n|`livenessProbe`      |Custom LivenessProbe                                                |No      |See doc below|\n|`readinessProbe`     |Custom ReadinessProbe                                               |No      |See doc below|\n|`affinity`           |Custom Kubernetes `Affinity` configuration                          |No      |See doc below|\n|`storage`            |Persistent volume requests                                          |No      |See doc below|\n|`podManagementPolicy`|Control how pods are deployed                                       |No      |`Parallel`   |\n|`serviceAccountName` |Name of desired service account                                     |No      |None         |\n|`odTracing`          |OpenTracing Agent and Collector container configurations            |No      |See doc below|\n|`annotations`        |Custom annotations to apply to Pods                                 |No      |None         |\n|`labels`             |Custom labels to apply to Pods                                      |No      |None         |\n|`tolerations`        |Toleration settings to apply when scheduling DataPower Pods         |No      |None         |\n|`nodeSelector`       |NodeSelector key-value pairs to match when scheduling DataPower Pods|No      |None         |\n|`lifecycle`          |Container lifecycle hook to be executed                             |No      |None         |\n\n<AnchorLinks small>\n  <AnchorLink>license</AnchorLink>\n  <AnchorLink>version</AnchorLink>\n  <AnchorLink>replicas</AnchorLink>\n  <AnchorLink>image</AnchorLink>\n  <AnchorLink>imagePullSecrets</AnchorLink>\n  <AnchorLink>users</AnchorLink>\n  <AnchorLink>domains</AnchorLink>\n  <AnchorLink>env</AnchorLink>\n  <AnchorLink>initCmds</AnchorLink>\n  <AnchorLink>extraExe</AnchorLink>\n  <AnchorLink>debug</AnchorLink>\n  <AnchorLink>resources</AnchorLink>\n  <AnchorLink>livenessProbe</AnchorLink>\n  <AnchorLink>readinessProbe</AnchorLink>\n  <AnchorLink>affinity</AnchorLink>\n  <AnchorLink>storage</AnchorLink>\n  <AnchorLink>podManagementPolicy</AnchorLink>\n  <AnchorLink>serviceAccountName</AnchorLink>\n  <AnchorLink>odTracing</AnchorLink>\n  <AnchorLink>annotations</AnchorLink>\n  <AnchorLink>labels</AnchorLink>\n  <AnchorLink>tolerations</AnchorLink>\n  <AnchorLink>nodeSelector</AnchorLink>\n  <AnchorLink>lifecycle</AnchorLink>\n</AnchorLinks>\n\n## `license`\n\n### Description\n\nThe `License` property contains two required fields:\n\n- `accept`: must be boolean `true` for the DataPower pod(s) to start successfully. This property directly sets the DataPower `DATAPOWER_LICENSE_ACCEPT` environment variable in pods, which acknowledges the license acceptance.\n- `use`: the license use. Can be one of the following values:\n  - `production`\n  - `nonproduction`\n  - `developers`\n  - `developers-limited`\n\nThe `license.use` is used in tandem with the `version` property to determine what DataPower firmware image to pull and use in the deployment, see [Image selection](/features/entitled-registry#image-selection).\n\n<InlineNotification>\n\nWhen deploying in IBM Cloud Pak for Integration, only the `production` or `nonproduction` values can be used.\n\n</InlineNotification>\n\nTo view the full license terms, you can:\n\n```\ndocker run --rm <image> --show-license\n```\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  license:\n    accept: true\n    use: production\n  ...\n```\n\n## `version`\n\n### Description\n\nThe `version` property specifies the desired DataPower firmware version to reconcile. This value must match an available version or channel the CRD and operator provide. Subscribing to a channel will allow for automatic updates to future versions on that channel. If the `DataPowerService` instance is created with a channel specified in `version`, the latest available version in that channel will be reconciled.\n\nYou are also able to lock in a specific version by specifying the full version string, for example `10.0.0.0`.\n\nYou can view the reconciled and available versions and channels on the `DataPowerService` instance's status, once created.\n\n### Channels\n\n#### Supported\n\nThe table below shows the **supported** channels for this CRD version (`v1beta2`) and operator version (`1.2.x`). Supported channels indicate channels which can be specified by `spec.version` for which this version of the DataPower Operator will understand and reconcile.\n\n|Channel   |Stream    |Latest        |\n|----------|----------|--------------|\n|`10.0-eus`|`10.0.1.x`|`10.0.1.6-eus`|\n|`10.0-lts`|`10.0.1.x`|`10.0.1.6`    |\n|`10.0-cd` |`10.0.0.x`|`10.0.0.1`    |\n\n#### Available\n\nThe table below shows the **available** channels for this CRD version (`v1beta2`) and operator version (`1.2.x`). Available channels (and version) are advertised in Cloud Pak for Integration as targets for operand upgrade. To enable and support the Cloud Pak for Integration EUS strategy, version `1.2.x` will only advertise EUS operand channels and versions.\n\n|Channel   |Stream    |Latest        |\n|----------|----------|--------------|\n|`10.0-eus`|`10.0.1.x`|`10.0.1.6-eus`|\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  version: 10.0-eus\n```\n\n## `replicas`\n\n### Description\n\nThe `replicas` property is an integer that directly sets the `replicas` field on the `StatefulSet` of DataPower pods. This property sets the number of DataPower pods you wish to deploy.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  replicas: 3\n  ...\n```\n\n## `image`\n\n### Description\n\nThe `image` property allows for a custom built DataPower Docker image to be used in the deployment. This field is optional, and will override the image that would be specified by `version` and `license.use`. The value of this property, if provided, will be directly used in the DataPower Pod specs.\n\n<InlineNotification>\n\n**Note:** If this field is set, you are responsible for setting the `version` property to the appropriate matching version that your custom image is based on. For example, if you are using a custom `image` based on `10.0.0.0`, then set `version` to `10.0.0.0`.\n\n</InlineNotification>\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  image: my.registry.com/my-custom-datapower:v10\n  version: 10.0.0.0\n  ...\n```\n\n## `imagePullSecrets`\n\n### Description\n\nThe `imagePullSecrets` property specifies the name of Kubernetes `Secret` objects in the cluster which will provide the Docker registry credentials to pull any images needed during reconciliation and deployment.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  imagePullSecrets:\n  - datapower-cred-one\n  - datapower-cred-two\n  ...\n```\n\n## `users`\n\n### Description\n\nThe `users` property defines the user accounts to be created. The `name` field will be the name of the account and the `passwordSecret` field is the name of the secret that contains the credentials for the user account. The `access-level` and `group` property define the access-level, either `privileged` or `group-defined`, and the group, if access-level is `group-defined`. If using groups, it is expected that the configuration provided for the default domain would define the user group in RBM settings. This property does not create the group, it just creates a user asigned to the specified group.\n\nAn admin account must be defined. By default, an admin account is defined using the secret name `admin-credentials`. You can either create a secret with that name containing the credentials for the admin account, or use a different secret name by changing the `passwordSecret` field for the admin user in the CR.\n\nThe following are values in the secret which can be used to define the user's credentials:\n\n- `password-hashed`: The hashed value (see Linux `man 3 crypt` for format) of the user's password. Required if `password` is not defined.\n- `password`: The user's password. Required if `password-hashed` is not defined; ignored if `password-hashed` is defined.\n- `salt`: The salt value used when hashing `password` (see `man 3 crypt`). Optional; ignored when `password-hashed` is defined. (Default: 12345678)\n- `method`: The name of the hashing algorithm used to hash `password`. Valid options: md5, sha256. Optional; ignored when `password-hashed` is defined. (Default: md5)\n\nThe following examples create Secrets with different values, but result in an user with the same credentials (and the same password hash):\n\n-  `kubectl create secret generic userName-credentials --from-literal=password=helloworld --from-literal=salt=12345678 --from-literal=method=md5`\n-  `kubectl create secret generic userName-credentials --from-literal=password=helloworld`\n-  `kubectl create secret generic userName-credentials --from-literal=password-hashed='$1$12345678$8.nskQfP4gQ8tk5xw6Wa8/'`\n\nThese two examples also result in Secrets with different values but identical user credentials\n\n-  `kubectl create secret generic userName-credentials --from-literal=password=hunter2 --from-literal=salt=NaCl --from-literal=method=sha256`\n-  `kubectl create secret generic userName-credentials --from-literal=password-hashed='$5$NaCl$aOrRVimQNvZ2ZLjnAyMvT3WgaUEXoWgwkgyBrhwIg04'`\n\n    Notice that, when setting `password-hashed`, the value must be surrounded by single-quotes\n\nFor more information, read the Kubernetes documentation on [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  users:\n  - name: admin\n    passwordSecret: admin-credentials\n    access-level: privileged\n  - name: user1\n    passwordSecret: user1-credentials\n    accessLevel: group-defined\n    group: group1\n  - name: user2\n    passwordSecret: user2-credentials\n    accessLevel: group-defined\n    group: group2\n  ...\n```\n\n## `domains`\n\n### Description\n\nThe `domains` property allows for user-provided domain configuration(s) to be injected into the DataPower pods at runtime, prior to the DataPower process starting.\n\nFor an in-depth look at utilizing this property, please see [Domain Configuration](/guides/domain-configuration).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  domains:\n  - name: \"default\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"default-cert\"\n    - certType: \"sharedcerts\"\n      secret: \"shared-cert\"\n    dpApp:\n      config:\n      - \"default-config\"\n      local:\n      - \"default-local\"\n  - name: \"example\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"example-cert\"\n      subPath: \"/example/path\"\n    dpApp:\n      config:\n      - \"example-config-pt-0\"\n      - \"example-config-pt-1\"\n      - \"example-config-pt-2\"\n      local:\n      - \"example-local-pt-0\"\n      - \"example-local-pt-1\"\n      - \"example-local-pt-2\"\n  ...\n```\n\n## `env`\n\n### Description\n\nThe `env` property allows you to set custom environment variables that will be set and used within the DataPower containers in the StatefulSet. This property exposes the Kubernetes API for declaring environment variables in the container, and thus follows the same schema. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/).\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  env:\n  - name: DATAPOWER_LOG_LEVEL\n    value: \"7\"\n  ...\n```\n\n## `initCmds`\n\n### Description\n\nThe `initCmds` property is an array of strings that represent initialization commands that you wish to run prior to the DataPower process starting. These commands will be run after the DataPower Operator internal initialization scripts, but before the DataPower `start.sh` script.\n\nThis property can be used in conjunction with the `extraExe` property to run custom initialization scripts that you've added to the DataPower pod(s), or any custom sidecar processes you wish to run in the DataPower containers.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  initCmds:\n  - /usr/local/extra/test.sh\n  - ls -al /opt/ibm/datapower/drouter/config\n  ...\n```\n\n## `extraExe`\n\n### Description\n\nThe `extraExe` property is an array of strings that represent name(s) of ConfigMaps in the cluster. When the DataPower pod(s) are created, the ConfigMaps specified by `extraExe` are mounted with `r+x` permissions at `/usr/local/extra`.\n\nThis property can be used in conjunction with the `initCmds` property to run custom initialization scripts that you've added to the DataPower pod(s), or any custom sidecar processes you wish to run in the DataPower containers.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  extraExe:\n  - config-map-one\n  - config-map-two\n  - config-map-three\n  ...\n```\n\n## `debug`\n\n### Description\n\nThe `debug` property is a user toggleable debugging utility. If not set, it will default to `false`. For more information on the use of this property, see the [Init Scripts](/troubleshooting/init-scripts) troubleshooting guide.\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** The `debug` property should only be set `true` if instructed by IBM Support.\n\n</InlineNotification>\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  debug: true\n```\n\n## `resources`\n\n### Description\n\nThe `resources` property specifies the desired resources to allocate to the DataPower containers in the statefulset. It is worth noting that you can only request CPU, there is not a limit field, as the DataPower Operator will set:\n\n```\nDATAPOWER_WORKER_THREADS == container.limits.cpu == container.requests.cpu\n```\n\nThus, when you define the CPU request, all of the above three values will get that value in the statefulset. This ensures best practices are followed in the DataPower runtime statefulset.\n\nYou are still able to set both requests and limits for memory. In both cases (`cpu` and `memory`) the values must follow Kubernetes formatting constraints.\n\nIf this field is not provided, or parts of the `resources` object are left unset, the example below shows the default value(s) that will be used.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  resources:\n    requests:\n      cpu: 4\n      memory: 4Gi\n    limits:\n      memory: 8Gi\n  ...\n```\n\n## `livenessProbe`\n\n### Description\n\nThe `livenessProbe` property allows you to set a custom Livensss Probe for the DataPower container(s) in the StatefulSet. The value of this property must be a well formed Kubernetes `Probe` type. If not specified, the following default will be used:\n\n```yaml\nlivenessProbe:\n  failureThreshold: 3\n  httpGet:\n    path: /\n    port: 7879\n    scheme: HTTP\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 5\n```\n\nThis default `livenessProbe` leverages the built-in DataPower health-check sidecar process.\n\n### Example\n\nIn addition to the above example, it's worth reviewing Kubernetes documentation on [Configure Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) for additional details on what configuration capabilities are available for this field.\n\n## `readinessProbe`\n\n### Description\n\nThe `readinessProbe` property allows you to set a custom Readiness Probe for the DataPower container(s) in the statefulset. The value of this property must be a well formed Kubernetes `Probe` type. If not specified, the following default will be used:\n\n```yaml\nreadinessProbe:\n  failureThreshold: 3\n  httpGet:\n    path: /\n    port: 7879\n    scheme: HTTP\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 5\n```\n\nThis default `readinessProbe` leverages the built-in DataPower health-check sidecar process.\n\n### Example\n\nIn addition to the above example, it's worth reviewing Kubernetes documentation on [Configure Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) for additional details on what configuration capabilities are available for this field.\n\n## `affinity`\n\n### Description\n\n`Affinity` is an interface for specifying custom affinity settings. This field is a literal `Affinity` object from the Kubernetes library, so it is fully featured and applies directly to the pods. When no Affinity is specified, the defaults shown in the example below are used.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"beta.kubernetes.io/arch\"\n              operator: In\n              values: [\"amd64\"]\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        podAffinityTerm:\n          topologyKey: \"kubernetes.io/hostname\"\n          labelSelector:\n            matchLabels:\n              app: datapower\n              release: example-dpservice\n```\n\n## `storage`\n\n### Description\n\nThe `Storage` property is a list of storage definitions. Storage definitions fall into two categories: ephermeral and persistent. For persistent storage definitions, the [Persistent Volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) must use an access mode of `ReadWriteOnce`.\n\nThe following fields can be modified:\n\n- `type`\n- `path`\n- `size`\n- `class`\n- `volumeMode`\n- `selector`\n- `deleteClaim`\n\n#### `type`\n\n`type` defines the kind of storage volume that will be created. There are two valid options: `ephemeral` and `persistent`. Ephemeral storage takes the form of EmptyDir volumes mounted on `path`. Persistent storage takes the form of Persistent Volume Claims.\n\n<InlineNotification kind=\"warning\">\n\nStorage definitions of type `persistent` need to be decided and delcared at initial deployment time. Updates to the `storage` definition that modify (add, remove, update) `persistent` storage requests are not allowed, and will be rejected.\n\n<br/>\n\nIf changes to `persistent` storage definitions must be made, the `DataPowerService` instance will need to be **deleted and recreated** with the new definitions. Note that deleting the `DataPowerService` instance will also delete the associated `StatefulSet`.\n\n</InlineNotification>\n\n#### `path`\n\n`path` is simply the path internal to the container to persist. The `path` also informs the names of the volume resources to ensure uniqueness.\n\nThis field applies to both ephemeral and persistent types.\n\n#### `size`\n\n`size` is the size of the persisted volume. The expected format is some form of `#Gi`. For more information on resource definitions, see Kubernetes [Resources documentation](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md).\n\nThis field applies to both ephermeral and persistent types.\n\n#### `class`\n\n`class` is a direct pass through to the `storageClassName` field for the Persistent Volume Claim. It determines which class to use for the volume. See Kubernetes [StorageClass documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1) for more details.\n\nThis field applies only to the persistent type.\n\n#### `volumeMode`\n\n<InlineNotification kind=\"warning\">\n\nThis field is **deprecated** in `1.2.0`. If set to `Block` previously, the CR will be migrated to use `Filesystem` instead.\n\n</InlineNotification>\n\nIf a value for `volumeMode` is provided, it will be overridden and set to `Filesystem` instead. See Kubernetes [VolumeMode documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-modes) for more details.\n\nThis field applies only to the persistent type.\n\n#### `selector`\n\n`selector` is a set of label selectors to refine the search for a Persistent Volume to bind.\n\nThis field applies only to the persistent type.\n\n#### `deleteClaim`\n\n`deleteClaim` is a boolean value to specify whether a persistent volume claim should be deleted or retained.\n\nThis field applies only to the persistent type.\n\n### Example\n\n```yaml\nstorage:\n- type: persistent\n  path: /opt/ibm/datapower/drouter/config\n  size: 10Gi\n  class: some-storage-class\n  volumeMode: Filesystem\n  selector:\n    matchLabels:\n      example.label: some.value\n- type: ephemeral\n  path: /opt/ibm/datapower/drouter/temporary\n  size: 2Gi\n```\n\n## `podManagementPolicy`\n\n### Description\n\nThe `podManagementPolicy` property maps directly to the StatefulSet PodManagementPolicy. There are two valid options: `Parallel` and `OrderedReady`. `Parallel`, the DataPowerService default, will make pods initially install in parallel to decrease time-to-ready. `OrderedReady` will make pods install sequentially, each waiting for the previous to become Ready before begining to install. For more information, read the Kubernetes documentation on [PodManagementPolicy](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies).\n\n### Example\n\n```yaml\nspec:\n  podManagementPolicy: OrderedReady\n```\n\n## `serviceAccountName`\n\n### Description\n\nThe `serviceAccountName` is a pass-through field for a Pod's ServiceAccountName. This field should be a string that is the name of the Service Account that is to be used by the deployed DataPower Pods.\n\nIf no value is provided, a minimal Service Account will be generated for use by the StatefulSet. The generated Service Account will also include reference to the `ibm-entitlement-key` image pull secret. For more information on this, see the [Entitled Registry](/features/entitled-registry) documentation.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  serviceAccountName: \"example-serviceaccount\"\n```\n\n## `odTracing`\n\n### Description\n\nThe `odTracing` property contains the necessary information to enable OpenTracing and run an agent and collector containers. If `odTracing` is not defined, OpenTracing will be disabled by default. All of the required properties must be provided. It is recomended to only provide values for the agent and collector probes if instructed by IBM support. The agent and collector probes will default to recomended values shown in the example below when not included. If including custom probe settings, only properties that need to be changed have to be included. When going through the OpenTracing registration process, the secret that stores credentials should be named `icp4i-od-store-cred`.\n\nRequired:\n\n- `enabled`\n- `imagePullPolicy`\n- `odTracingRegistrationHostname`\n- `odTracingDataHostname`\n- `imageAgent`\n- `imageCollector`\n\nOptional:\n\n- `agent`\n- `collector`\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  odTracing:\n    enabled: true\n    imagePullPolicy: \"IfNotPresent\"\n    odTracingRegistrationHostname: icp4i-od.tracing.svc\n    odTracingDataHostname: od-store-od.tracing.svc\n    imageAgent: docker.io/ibmcom/icp4i_od_agent:1.0.0-amd64\n    imageCollector: docker.io/ibmcom/icp4i_od_collector:1.0.0-amd64\n    collector:\n      livenessProbe:\n        initialDelaySeconds: 8\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n      readinessProbe:\n        initialDelaySeconds: 10\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n    agent:\n      livenessProbe:\n        initialDelaySeconds: 8\n        periodSeconds: 10\n        timeoutSeconds: 2\n       failureThreshold: 3\n      readinessProbe:\n        initialDelaySeconds: 10\n        periodSeconds: 10\n        timeoutSeconds: 2\n        failureThreshold: 3\n  ...\n```\n\n## `annotations`\n\n### Description\n\nThe `annotations` field serves as a pass-through for Pod annotations. Users can add any annotation to this field and have it apply to the Pod. The annotations here overwrite the default annotations if provided. For example, if the annotation `prometheus.io/scrape` was provided, it would overwrite our default value of `\"true\"`.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  annotations:\n    prometheus.io/scrape: \"false\"\n```\n\n## `labels`\n\n### Description\n\nThe `labels` field serves as a pass-through for Pod labels. Users can add any label to this field and have it apply to the Pod. The labels here overwrite the default labels if provided. For example, if the label `app.kubernetes.io/instance` was provided, it would overwrite our default value of `<cr.namespace>-<cr.name>`.\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  labels:\n    app.kubernetes.io/instance: \"my-service\"\n```\n\n## `tolerations`\n\n### Description\n\nThe `Tolerations` field allows users to select which nodes DataPower Pods can be scheduled or not scheduled. By specifying a set of matching tolerations, users can control whether specific nodes can be used for scheduling DataPower Pods. In order for this to work, the corresponding nodes must have been tainted accoringly. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).\n\n### Example\n\nThe following tolerations allow DataPower Pods to be scheduled on nodes tainted with `host=dp:NoSchedule`.\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  tolerations:\n  - key: \"host\"\n    value: \"db\"\n    operator: \"Equal\"\n    effect: \"NoSchedule\"\n```\n\n## `nodeSelector`\n\n### Description\n\nThe `NodeSelector` field allows users to specify a set of key value pair that must be matched against the node labels to decide whether DataPower Pods can be scheduled on that node. Only nodes matching all of these key value pairs in their labels will be selected for scheduling DataPower Pods. For more information, please see the Kubernetes [documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).\n\n### Example\n\nThe following illustrates how to schedule DataPower Pods only on nodes labeled `hostType=gateway`.\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  nodeSelector:\n    hostType: gateway\n```\n\n## `lifecycle`\n\n### Description\n\n`lifecycle` allows scripts to be executed after starting and before stopping the DataPower container. For more details on container lifecycle hooks, please refer to the following Kubernetes documentation:\n\n- [Container Lifecycle Hooks](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/)\n- [Attach Handlers to Container Lifecycle Events](https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/)\n\n### Example\n\n```yaml\napiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  lifecycle:\n    postStart:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"echo Hello from the postStart handler >> ~/lifecycle.log\"]\n    preStop:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"echo Hello from the preStop handler >> ~/lifecycle.log\"]\n\n```\n\n### Delaying SIGTERM with preStop\n\nWhen the DataPower container is terminated by Kubernetes under normal conditions (such as a scaling event or rolling update), any in-flight transactions may be terminated. The use of the `preStop` lifecycle hook can help to mitigate this by delaying the `SIGTERM` being sent to the container. For example, a 20 second delay in the below example would delay the shutdown by 20 seconds giving in-flight transactions on the gateway that much time to complete successfully before being terminated.\n\n```yaml\nspec:\n  lifecycle:\n    preStop:\n      exec:\n        command: [\"/bin/sh\", \"-c\", \"sleep 20\"]\n```\n\n<InlineNotification kind=\"warning\">\n\nThe `preStop` handler should complete within `terminationGracePeriodSeconds`, which by default is 30 seconds. Otherwise it will not prevent the `TERM` signal being sent to the DataPower container. Thus it is not recommended to exceed `sleep 30`. See the Kubernetes documentation on [termination of Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination) for a deeper understanding of this lifecycle.\n\n</InlineNotification>\n\n# Status\n\n<AnchorLinks>\n  <AnchorLink>Conditions</AnchorLink>\n  <AnchorLink>Custom Images</AnchorLink>\n  <AnchorLink>Management Ports</AnchorLink>\n  <AnchorLink>Nodes</AnchorLink>\n  <AnchorLink>Phase</AnchorLink>\n  <AnchorLink>Versions</AnchorLink>\n</AnchorLinks>\n\n## Example\n\n```\n$ oc get dp\nNAME        PHASE     READY   SUMMARY                           VERSION    AGE\nexample     Running   True    StatefulSet replicas ready: 3/3   10.0.1.0   171m\n\n$ oc describe dp/example\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2020-09-21T17:19:02Z\n    Message:               StatefulSet replicas ready: 3/3\n    Reason:                StatefulSetReady\n    Status:                True\n    Type:                  Ready\n  Custom Images:           true\n  Mgmt Ports:\n    Name:  rest-mgmt\n    Port:  5554\n  Nodes:\n    dpservice-0\n    dpservice-1\n    dpservice-2\n  Phase:  Running\n  Versions:\n    Available:\n      Channels:\n        Name:  10.0-lts\n        Name:  10.0-cd\n      Versions:\n        Name:    10.0.1.0\n        Name:    10.0.0.1\n        Name:    10.0.0.0\n    Reconciled:  10.0.1.0\n```\n\n## Conditions\n\nThe `DataPowerService` supports Kubernetes [Conditions](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties). These `Conditions` can be viewed as a snapshot of the current and most up-to-date status of the `DataPowerService` instance.\n\n- The `Pending` condition will be set `True` when the `DataPowerService` is first created and is reconciling the desired StatefulSet. Once the `StatefulSet` is created and `Ready`, this `Pending` condition will be removed.\n- The `Ready` condition will be set `True` when all of the Pods in the StatefulSet are `Ready`, and the number of replicas in the StatefulSet matches the desired number of replicas set by the `DataPowerService` instance spec.\n- The `Error` condition will be set `True` when an error is encountered during reconciliation of the `DataPowerService`. The `Reason` and `Message` should have details regarding what the error may have been, such as a referenced ConfigMap not being found.\n\n## Custom Images\n\nThe `CustomImages` status property is a boolean flag that will be set `True` when a custom image (set via the `image` property in the CR spec) is being used.\n\n## Managment Ports\n\nThe `MgmtPorts` status property is a list of management ports for the DataPowerService. Each item in the list will show the configured port for the respective management interface.\n\n<InlineNotification>\n\nCurrently, only the `rest-mgmt` interface is supported.\n\n</InlineNotification>\n\n## Nodes\n\nThe `Nodes` status provides the list of DataPower Pods currently deployed via the StatefulSet.\n\n## Phase\n\nThe `Phase` status property provides the current phase of the `DataPowerService`. The value can be one the following:\n\n- `Pending` - There are no errors, but the `DataPowerService` is not yet `Ready`.\n- `Running` - There are no errors, and the `DataPowerService` is `Ready`.\n- `Failed` - There has been a `ReconcileError`.\n\n## Versions\n\nThe `Versions` status provides information about the currently reconciled version of the operand (DataPower), as well as the available versions and channels the operator supports.\n\nA channel, such as `10.0-lts`, allows for a user to subscribe to a stream of releases. When initially deployed with the `version` property in the CR spec set to a channel, the operator will automatically install the latest available version within that channel. When new versions are released in that channel, the operands (CR instances) will automatically be upgraded by the operator.\n\nThe currently reconciled version will always be available in `status.versions.reconciled`, even if the `version` specified in the CR spec is a channel.\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/apis/datapowerservice/v1beta2.mdx"}}}}