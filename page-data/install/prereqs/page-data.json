{"componentChunkName":"component---src-pages-install-prereqs-mdx","path":"/install/prereqs/","result":{"pageContext":{"frontmatter":{"title":"Prerequisites","description":"Prerequisites to validate prior to installation"},"relativePagePath":"/install/prereqs.mdx","titleType":"page","MdxNode":{"id":"7548c36f-c0e0-5fb9-8249-eff9a1185865","children":[],"parent":"914c80aa-a972-5e1d-b072-5a4589fb9309","internal":{"content":"---\ntitle: Prerequisites\ndescription: Prerequisites to validate prior to installation\n---\n\n<PageDescription>\n\nEnsure your environment meets the following requirements prior to installing the DataPower Operator and deploying Custom Resources.\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Container environment</AnchorLink>\n  <AnchorLink>Resource requirements</AnchorLink>\n  <AnchorLink>Cluster-scope permissions</AnchorLink>\n  <AnchorLink>Optional: Multiple Failure Zones</AnchorLink>\n  <AnchorLink>Optional: Vertical Pod Autoscaler</AnchorLink>\n  <AnchorLink>Optional: Certificate Manager</AnchorLink>\n</AnchorLinks>\n\n## Container environment\n\n### Supported platforms\n\nThe DataPower Operator currently supports:\n\n- OpenShift Container Platform (OCP) 4.6+\n- Kubernetes 1.19+\n\n### Worker node configuration\n\nInstallation of the DataPower Operator does not support adding Tolerations to the Operator Deployment resource out-of-the-box. To install properly, there must be one worker in the desired availability zone that is not tainted. If Tolerations are nonnegotiable, you can install the DataPower Operator using the [helm chart](https://github.com/IBM/datapower-operator-chart) and add the Tolerations to the Deployment template manually.\n\n## Resource requirements\n\n### Operator\n\nThe DataPower Operator's `Deployment` uses the following resource spec:\n\n```yaml\nresources:\n  requests:\n    cpu: \"500m\"\n    memory: \"512Mi\"\n  limits:\n    cpu: 2\n    memory: \"2Gi\"\n```\n\nFor more information on what this spec means, see [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).\n\n### Operand\n\n- The **minimum** resource requirements for a single DataPower container are 1 CPU and 4 GB memory.\n- For API Connect workloads, a minimum of 8 GB of memory is required per container.\n- For production high-availability, a minimum of 3 replicas (one per node) are recommended.\n\nSee also: [System requirements for IBM DataPower Gateways](https://www.ibm.com/support/pages/node/613133)\n\n## Cluster-scope permissions\n\nThe DataPower Operator requires the following cluster-scope permissions. These are brought in by a `ClusterRole` and bound to the operator's `ServiceAccount` via `ClusterRoleBinding`.\n\nPermissions to manage CustomResourceDefinition defaulting and validating webhooks:\n  - API Groups: `admissionregistration.k8s.io`\n  - Resources: `mutatingwebhookconfigurations`, `validatingwebhookconfigurations`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for reconciliation of admission controllers (webhooks):\n  - API Groups: `rbac.authorization.k8s.io`\n  - Resources: `clusterroles`, `clusterrolebindings`\n  - Verbs: `get`, `list`\n\nPermissions needed for management of owned CustomResourceDefinitions:\n  - API Groups: `apiextensions.k8s.io`\n  - Resources: `customresourcedefinitions`\n  - Verbs: `get`, `update`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: (none)\n  - Resources: `namespaces`\n  - Verbs: `get`, `list`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: (none)\n  - Resources: `services`, `secrets`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: `apps`\n  - Resources: `deployments`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for conversion webhook implementation across namespaces:\n  - API Groups: `datapower.ibm.com`\n  - Resources: `*`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for OCP platform related checks:\n  - API Groups: `config.openshift.io`\n  - Resources: `clusterversions`\n  - Verbs: `get`\n\n## Optional: Multiple Failure Zones\n\nThe DataPower Operator `Deployment` is designed to pods evenly across multiple Kubernetes zones. To take advantage of this functionality, follow the [prerequisites](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#prerequisites) for Pod Topology Spread Constraints.\n\nWith `EvenPodsSpread` enabled in the cluster, no more than one DataPower Operator pod will be deployed per zone. If `replicaCount` is higher than the number of available zones, the remaining replicas will not be scheduled.\n\n## Optional: Vertical Pod Autoscaler\n\nThe DataPower Operator supports [Vertical Pod Autoscaling](/features/pod-auto-scaling) of the DataPowerService operand. If you wish to utilize this functionality, the Vertical Pod Autoscaler must be first installed and configured in your Kubernetes or OpenShift cluster.\n\n## Optional: Certificate Manager\n\nCertificates used by the `operator` and `webhook` pods will be configured to be automatically managed by cert-manager when cert-manager version `v1.0` or later deployment is detected in the cluster during operator installation.\n\n### Installing on Kubernetes\n\nFor traditional Kubernetes clusters, reference the Kubernetes [documentation](https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler#installation) for installation.\n\n### Installing on OpenShift\n\nFor OpenShift clusters, reference the OpenShift [documentation](https://docs.openshift.com/container-platform/4.6/nodes/pods/nodes-pods-vertical-autoscaler.html) for installation.\n\n### Configure RBAC\n\nTo enable the VPA to provide scaling recommendations for the DataPowerService operand, a `ClusterRole` and `ClusterRoleBinding` must be created and links to the `vpa-recommender` Service Account installed with VPA.\n\nDepending on whether you are installing on normal Kubernetes or OpenShift (OCP), the `namespace` of the `vpa-recommender` Service Account may vary. For Kubernetes, it is most likely `kube-system`, and for OCP it is most likely `openshift-vertical-pod-autoscaler`.\n\n1. Determine the namespace of the `vpa-recommender` Service Account. If you are not sure, you can find it with the following:\n\n    ```\n    $ kubectl get sa --all-namespaces | grep vpa-recommender\n    openshift-vertical-pod-autoscaler                  vpa-recommender                            2         177m\n    ```\n\n    The first column indicates the namespace, i.e. `openshift-vertical-pod-autoscaler`.\n\n2. Create the `ClusterRole` resource, using the following YAML:\n\n    ```yaml\n    kind: ClusterRole\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: datapower-operator-vpa-recommender\n    rules:\n    - apiGroups:\n      - datapower.ibm.com\n      resources:\n      - datapowerservices/scale\n      verbs:\n      - get\n      - watch\n    ```\n\n3. Create the `ClusterRoleBinding` resource, using the following YAML as a template. The `namespace` under `subjects` must match the namespace determined in Step 1.\n\n    ```yaml\n    kind: ClusterRoleBinding\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: datapower-operator-vpa-recommender\n    subjects:\n    - kind: ServiceAccount\n      name: vpa-recommender\n      namespace: openshift-vertical-pod-autoscaler\n    roleRef:\n      kind: ClusterRole\n      name: datapower-operator-vpa-recommender\n      apiGroup: rbac.authorization.k8s.io\n    ```\n","type":"Mdx","contentDigest":"d21770c3abd7d73b1e865dac2b40b546","counter":131,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Prerequisites","description":"Prerequisites to validate prior to installation"},"exports":{},"rawBody":"---\ntitle: Prerequisites\ndescription: Prerequisites to validate prior to installation\n---\n\n<PageDescription>\n\nEnsure your environment meets the following requirements prior to installing the DataPower Operator and deploying Custom Resources.\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Container environment</AnchorLink>\n  <AnchorLink>Resource requirements</AnchorLink>\n  <AnchorLink>Cluster-scope permissions</AnchorLink>\n  <AnchorLink>Optional: Multiple Failure Zones</AnchorLink>\n  <AnchorLink>Optional: Vertical Pod Autoscaler</AnchorLink>\n  <AnchorLink>Optional: Certificate Manager</AnchorLink>\n</AnchorLinks>\n\n## Container environment\n\n### Supported platforms\n\nThe DataPower Operator currently supports:\n\n- OpenShift Container Platform (OCP) 4.6+\n- Kubernetes 1.19+\n\n### Worker node configuration\n\nInstallation of the DataPower Operator does not support adding Tolerations to the Operator Deployment resource out-of-the-box. To install properly, there must be one worker in the desired availability zone that is not tainted. If Tolerations are nonnegotiable, you can install the DataPower Operator using the [helm chart](https://github.com/IBM/datapower-operator-chart) and add the Tolerations to the Deployment template manually.\n\n## Resource requirements\n\n### Operator\n\nThe DataPower Operator's `Deployment` uses the following resource spec:\n\n```yaml\nresources:\n  requests:\n    cpu: \"500m\"\n    memory: \"512Mi\"\n  limits:\n    cpu: 2\n    memory: \"2Gi\"\n```\n\nFor more information on what this spec means, see [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).\n\n### Operand\n\n- The **minimum** resource requirements for a single DataPower container are 1 CPU and 4 GB memory.\n- For API Connect workloads, a minimum of 8 GB of memory is required per container.\n- For production high-availability, a minimum of 3 replicas (one per node) are recommended.\n\nSee also: [System requirements for IBM DataPower Gateways](https://www.ibm.com/support/pages/node/613133)\n\n## Cluster-scope permissions\n\nThe DataPower Operator requires the following cluster-scope permissions. These are brought in by a `ClusterRole` and bound to the operator's `ServiceAccount` via `ClusterRoleBinding`.\n\nPermissions to manage CustomResourceDefinition defaulting and validating webhooks:\n  - API Groups: `admissionregistration.k8s.io`\n  - Resources: `mutatingwebhookconfigurations`, `validatingwebhookconfigurations`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for reconciliation of admission controllers (webhooks):\n  - API Groups: `rbac.authorization.k8s.io`\n  - Resources: `clusterroles`, `clusterrolebindings`\n  - Verbs: `get`, `list`\n\nPermissions needed for management of owned CustomResourceDefinitions:\n  - API Groups: `apiextensions.k8s.io`\n  - Resources: `customresourcedefinitions`\n  - Verbs: `get`, `update`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: (none)\n  - Resources: `namespaces`\n  - Verbs: `get`, `list`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: (none)\n  - Resources: `services`, `secrets`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for management of conversion webhook, which can exist in other namespaces:\n  - API Groups: `apps`\n  - Resources: `deployments`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for conversion webhook implementation across namespaces:\n  - API Groups: `datapower.ibm.com`\n  - Resources: `*`\n  - Verbs: `create`, `delete`, `get`, `list`, `patch`, `update`, `watch`\n\nPermissions needed for OCP platform related checks:\n  - API Groups: `config.openshift.io`\n  - Resources: `clusterversions`\n  - Verbs: `get`\n\n## Optional: Multiple Failure Zones\n\nThe DataPower Operator `Deployment` is designed to pods evenly across multiple Kubernetes zones. To take advantage of this functionality, follow the [prerequisites](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#prerequisites) for Pod Topology Spread Constraints.\n\nWith `EvenPodsSpread` enabled in the cluster, no more than one DataPower Operator pod will be deployed per zone. If `replicaCount` is higher than the number of available zones, the remaining replicas will not be scheduled.\n\n## Optional: Vertical Pod Autoscaler\n\nThe DataPower Operator supports [Vertical Pod Autoscaling](/features/pod-auto-scaling) of the DataPowerService operand. If you wish to utilize this functionality, the Vertical Pod Autoscaler must be first installed and configured in your Kubernetes or OpenShift cluster.\n\n## Optional: Certificate Manager\n\nCertificates used by the `operator` and `webhook` pods will be configured to be automatically managed by cert-manager when cert-manager version `v1.0` or later deployment is detected in the cluster during operator installation.\n\n### Installing on Kubernetes\n\nFor traditional Kubernetes clusters, reference the Kubernetes [documentation](https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler#installation) for installation.\n\n### Installing on OpenShift\n\nFor OpenShift clusters, reference the OpenShift [documentation](https://docs.openshift.com/container-platform/4.6/nodes/pods/nodes-pods-vertical-autoscaler.html) for installation.\n\n### Configure RBAC\n\nTo enable the VPA to provide scaling recommendations for the DataPowerService operand, a `ClusterRole` and `ClusterRoleBinding` must be created and links to the `vpa-recommender` Service Account installed with VPA.\n\nDepending on whether you are installing on normal Kubernetes or OpenShift (OCP), the `namespace` of the `vpa-recommender` Service Account may vary. For Kubernetes, it is most likely `kube-system`, and for OCP it is most likely `openshift-vertical-pod-autoscaler`.\n\n1. Determine the namespace of the `vpa-recommender` Service Account. If you are not sure, you can find it with the following:\n\n    ```\n    $ kubectl get sa --all-namespaces | grep vpa-recommender\n    openshift-vertical-pod-autoscaler                  vpa-recommender                            2         177m\n    ```\n\n    The first column indicates the namespace, i.e. `openshift-vertical-pod-autoscaler`.\n\n2. Create the `ClusterRole` resource, using the following YAML:\n\n    ```yaml\n    kind: ClusterRole\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: datapower-operator-vpa-recommender\n    rules:\n    - apiGroups:\n      - datapower.ibm.com\n      resources:\n      - datapowerservices/scale\n      verbs:\n      - get\n      - watch\n    ```\n\n3. Create the `ClusterRoleBinding` resource, using the following YAML as a template. The `namespace` under `subjects` must match the namespace determined in Step 1.\n\n    ```yaml\n    kind: ClusterRoleBinding\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: datapower-operator-vpa-recommender\n    subjects:\n    - kind: ServiceAccount\n      name: vpa-recommender\n      namespace: openshift-vertical-pod-autoscaler\n    roleRef:\n      kind: ClusterRole\n      name: datapower-operator-vpa-recommender\n      apiGroup: rbac.authorization.k8s.io\n    ```\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/install/prereqs.mdx"}}}}