{"componentChunkName":"component---src-pages-install-case-mdx","path":"/install/case/","result":{"pageContext":{"frontmatter":{"title":"Installation via CASE","description":"Guide to installing the DataPower Operator using Container Application Software for Enterprises (CASE)"},"relativePagePath":"/install/case.mdx","titleType":"page","MdxNode":{"id":"5bc93fb2-66ca-5482-a081-480fa1241e19","children":[],"parent":"0edcd382-d43c-556e-aeaf-508dac568466","internal":{"content":"---\ntitle: Installation via CASE\ndescription: Guide to installing the DataPower Operator using Container Application Software for Enterprises (CASE)\n---\n\n<PageDescription>\n\nThe [Container Application Software for Enterprises (CASE)](https://github.com/IBM/case) provides a common packaging definition for the many ways to install, manage, operate, upgrade, and uninstall complex software using multiple roles and personas.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>CASE inventory</AnchorLink>\n  <AnchorLink>datapowerOperator actions</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\nTo install the CASE, you must have:\n- Downloaded the [CASE bundle](https://github.com/IBM/cloud-pak/tree/master/repo/case) appropriate for your license.\n- Installed the `cloudctl` [tool](https://github.com/IBM/cloud-pak-cli/releases).\n- An OCP 4.6+ cluster.\n\n## CASE inventory\n\nThe IBM CASE structure has a concept of inventory items. These items are discrete sets of functionality; installing the DataPower Operator, for example. The DataPower Operator CASE has two inventory items: `datapowerOperator` and `kibanaDashboard`. The `datapowerOperator` inventory item contains multiple scripted installation actions to install and uninstall the Operator either with OLM or using standard Kubernetes objects (Deployments). There are additional actions for configuring your cluster to support air-gapped installation of the Operator and DataPower Firmware. The `kibanaDashboard` item simply contains the dashboard json along with instructions for importing it in the README.\n\n## datapowerOperator actions\n\nPrior to running any actions for `datapowerOperator`, you **must** save the CASE bundle:\n```\ncloudctl case save \\\n  --case /path/to/case \\\n  --outputdir /tmp/cases\n```\nThe above command will distill the CASE into various artifacts contained in `/tmp/cases` for processing by the actions.\n\nAvailable datapowerOperator actions, in the order they would typically be run:\n\n<AnchorLinks small>\n  <AnchorLink>1. configure-creds-airgap</AnchorLink>\n  <AnchorLink>2. init-registry</AnchorLink>\n  <AnchorLink>3. start-registry</AnchorLink>\n  <AnchorLink>4. mirror-images</AnchorLink>\n  <AnchorLink>5. stop-registry</AnchorLink>\n  <AnchorLink>6. configure-cluster-airgap</AnchorLink>\n  <AnchorLink>7. install-catalog</AnchorLink>\n  <AnchorLink>8. install-operator</AnchorLink>\n  <AnchorLink>9. uninstall-operator</AnchorLink>\n  <AnchorLink>10. uninstall-catalog</AnchorLink>\n  <AnchorLink>11. install-operator-native</AnchorLink>\n  <AnchorLink>12. uninstall-operator-native</AnchorLink>\n</AnchorLinks>\n\n## 1. `configure-creds-airgap`\n\nConfigure credentials for airgap installation.\n\nRun this action to save the credentials needed for the target and source container image registries. This command will be run twice, once for the source and once for the target.\n\n### Arguments\n```\n--registry               : source/target container image registry (required)\n--user                   : login user name for the container image registry (required)\n--pass                   : login password for the container image registry (required)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-creds-airgap \\\n  --args \"--registry $SOURCE_REGISTRY --user $SOURCE_REGISTRY_USER --pass $SOURCE_REGISTRY_PASS\"\n\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-creds-airgap \\\n  --args \"--registry $TARGET_REGISTRY --user $TARGET_REGISTRY_USER --pass $TARGET_REGISTRY_PASS\"\n```\n\nWhere:\n- `$SOURCE_REGISTRY` is the URL of the source image registry, i.e. `docker.io`.\n- `$TARGET_REGISTRY` is the URL of the internal image registry which will host the mirrored images.\n- `$SOURCE_REGISTRY_USER` and `$TARGET_REGISTRY_USER` are the usernames for the respective registries.\n- `$SOURCE_REGISTRY_PASS` and `$TARGET_REGISTRY_PASS` are the passwords for the respective registries.\n\n## 2. `init-registry`\n\nInitialize a Docker registry locally.\n\nThis action will setup a Docker registry on your localhost. This is intended to be used as a staging area for image-mirroring before physically migrating the registry behind your firewall.\n\n### Arguments\n```\n--user                   : login user name for the container image registry\n--pass                   : login password for the container image registry\n--dir                    : local directory for the docker registry (default: /tmp/docker-registry)\n--subject                : self-sign TLS certificate subject\n--registry               : IP or FQDN for the docker registry ( default: $(hostname -f))\n--clean                  : clean up all existing repositories data\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action init-registry \\\n  --args \"[args]\"\n```\n\n## 3. `start-registry`\n\nStart a local Docker registry.\n\nThis action starts the Docker registry created by `init-registry`.\n\n### Arguments\n```\n--port                   : registry service port (default: 5000 )\n--dir                    : local directory for the docker registry (default: /tmp/docker-registry)\n--engine                 : container engine to run the container (docker or podman)\n--image                  : docker registry image (default: docker.io/library/registry:2.6)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action start-registry \\\n  --args \"[args]\"\n```\n\n## 4. `mirror-images`\n\nMirror images from a public source repository to an internal target repository.\n\nRun this action to copy all images required by the CASE from their original source registries into your internal registry. All images copied in this way will maintain their namespace/registry path. For example, mirroring `docker.io/ibmcom/datapower:10.0.0.0` to `my-registry.io` will result in the image `my-registry.io/ibmcom/datapower:10.0.0.0`.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--inputDir               : path to saved CASE directory (required)\n--fromRegistry           : override the source image registry in the CASE\n--registry               : target container image registry (required)\n--chunks                 : mirror the images in batches with a given size. Default is 100\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action mirror-images \\\n  --args \"--registry $TARGET_REGISTRY --inputDir /tmp/cases\"\n```\nWhere `$TARGET_REGISTRY` is the URL of the internal mirroring image registry.\n\n## 5. `stop-registry`\n\nStop a local Docker registry.\n\nThis action stops the Docker registry started by `start-registry`. Run this action only after you've completed the mirroring process.\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action stop-registry\n```\n\n## 6. `configure-cluster-airgap`\n\nConfigure cluster to utilize mirrored image registry.\n\nThis command deploys an [ImageContentSourcePolicy](https://docs.openshift.com/container-platform/4.5/openshift_images/image-configuration.html#images-configuration-registry-mirror_image-configuration) that redirects image pull requests of Pods from their original source to the internal target registry.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--inputDir               : path to saved CASE directory\n--registry               : target container image registry (required)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-cluster-airgap \\\n  --args \"--registry $TARGET_REGISTRY --inputDir /tmp/cases\"\n```\n\n## 7. `install-catalog`\n\nInstall the CatalogSource object to your cluster.\n\nThis command deploys the OLM CatalogSource object into the cluster in the `openshift-marketplace` namespace. Once the CatalogSource is in the OCP cluster, the DataPower Operator will become a tile in the OCP Operator UI. The CatalogSource is required to create a Subscription to the DataPower Operator.\n\n<InlineNotification>\n\nThis action must be taken prior to `install-operator`.\n\n</InlineNotification>\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--registry               : target container image registry\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n#### `--registry`\n\nA target registry can be specified for pulling the CatalogSource image. If an ImageContentSourcePolicy is in place on the cluster, this argument shouldn't be required.\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-catalog \\\n  --args \"--registry $TARGET_REGISTRY\"\n```\n\n## 8. `install-operator`\n\nInstall the Operator via OLM Subscription.\n\nThis command installs the DataPower Operator by way of OLM Subscription. A Subscription yaml is applied to the cluster in the namespace provided. If an OperatorGroup is not already present, one will be created.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--channelName            : name of channel for subscription (packagemanifest default used if not specified)\n--secret                 : name of existing image pull secret for the container image registry\n--registry               : container image registry (required if pass|user specified)\n--user                   : login user name for the container image registry (required if registry|pass specified)\n--pass                   : login password for the container image registry (required if registry|user specified)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-operator\n```\n\n## 9. `uninstall-operator`\n\nUninstall the Operator OLM Subscription.\n\nThis command uninstalls the Operator by removing the OLM Subscription from the provided namespace.\n\n<InlineNotification>\n\nAll Operator Subscriptions **should** be uninstalled before uninstalling the CatalogSource.\n\n</InlineNotification>\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-operator\n```\n\n## 10. `uninstall-catalog`\n\nUninstall the Operator CatalogSource.\n\nThis command removes the CatalogSource from the cluster.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-catalog\n```\n\n## 11. `install-operator-native`\n\nInstall the Operator using standard Kubernetes resources.\n\nThis command deploys the DataPower Operator using standard Kubernetes resources, namely Deployment. Installing this way will not benefit from any of OLM's functionality.\n\n### Arguments\n```\n--secret                 : name of existing image pull secret for the container image registry\n--registry               : container image registry (required if pass|user specified)\n--user                   : login user name for the container image registry (required if pass specified)\n--pass                   : login password for the container image registry (required if user specified)\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-operator-native\n```\n\n## 12. `uninstall-operator-native`\n\nUninstall DataPower Operator which was installed using native Kubernetes resources.\n\n### Arguments\n```\n--deleteCRDs             : deletes CRD's associated with this operator (if not set, crds won't get deleted)\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-operator-native\n```\n","type":"Mdx","contentDigest":"31a90ddf7c519160130b032b694c047e","counter":129,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Installation via CASE","description":"Guide to installing the DataPower Operator using Container Application Software for Enterprises (CASE)"},"exports":{},"rawBody":"---\ntitle: Installation via CASE\ndescription: Guide to installing the DataPower Operator using Container Application Software for Enterprises (CASE)\n---\n\n<PageDescription>\n\nThe [Container Application Software for Enterprises (CASE)](https://github.com/IBM/case) provides a common packaging definition for the many ways to install, manage, operate, upgrade, and uninstall complex software using multiple roles and personas.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>CASE inventory</AnchorLink>\n  <AnchorLink>datapowerOperator actions</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\nTo install the CASE, you must have:\n- Downloaded the [CASE bundle](https://github.com/IBM/cloud-pak/tree/master/repo/case) appropriate for your license.\n- Installed the `cloudctl` [tool](https://github.com/IBM/cloud-pak-cli/releases).\n- An OCP 4.6+ cluster.\n\n## CASE inventory\n\nThe IBM CASE structure has a concept of inventory items. These items are discrete sets of functionality; installing the DataPower Operator, for example. The DataPower Operator CASE has two inventory items: `datapowerOperator` and `kibanaDashboard`. The `datapowerOperator` inventory item contains multiple scripted installation actions to install and uninstall the Operator either with OLM or using standard Kubernetes objects (Deployments). There are additional actions for configuring your cluster to support air-gapped installation of the Operator and DataPower Firmware. The `kibanaDashboard` item simply contains the dashboard json along with instructions for importing it in the README.\n\n## datapowerOperator actions\n\nPrior to running any actions for `datapowerOperator`, you **must** save the CASE bundle:\n```\ncloudctl case save \\\n  --case /path/to/case \\\n  --outputdir /tmp/cases\n```\nThe above command will distill the CASE into various artifacts contained in `/tmp/cases` for processing by the actions.\n\nAvailable datapowerOperator actions, in the order they would typically be run:\n\n<AnchorLinks small>\n  <AnchorLink>1. configure-creds-airgap</AnchorLink>\n  <AnchorLink>2. init-registry</AnchorLink>\n  <AnchorLink>3. start-registry</AnchorLink>\n  <AnchorLink>4. mirror-images</AnchorLink>\n  <AnchorLink>5. stop-registry</AnchorLink>\n  <AnchorLink>6. configure-cluster-airgap</AnchorLink>\n  <AnchorLink>7. install-catalog</AnchorLink>\n  <AnchorLink>8. install-operator</AnchorLink>\n  <AnchorLink>9. uninstall-operator</AnchorLink>\n  <AnchorLink>10. uninstall-catalog</AnchorLink>\n  <AnchorLink>11. install-operator-native</AnchorLink>\n  <AnchorLink>12. uninstall-operator-native</AnchorLink>\n</AnchorLinks>\n\n## 1. `configure-creds-airgap`\n\nConfigure credentials for airgap installation.\n\nRun this action to save the credentials needed for the target and source container image registries. This command will be run twice, once for the source and once for the target.\n\n### Arguments\n```\n--registry               : source/target container image registry (required)\n--user                   : login user name for the container image registry (required)\n--pass                   : login password for the container image registry (required)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-creds-airgap \\\n  --args \"--registry $SOURCE_REGISTRY --user $SOURCE_REGISTRY_USER --pass $SOURCE_REGISTRY_PASS\"\n\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-creds-airgap \\\n  --args \"--registry $TARGET_REGISTRY --user $TARGET_REGISTRY_USER --pass $TARGET_REGISTRY_PASS\"\n```\n\nWhere:\n- `$SOURCE_REGISTRY` is the URL of the source image registry, i.e. `docker.io`.\n- `$TARGET_REGISTRY` is the URL of the internal image registry which will host the mirrored images.\n- `$SOURCE_REGISTRY_USER` and `$TARGET_REGISTRY_USER` are the usernames for the respective registries.\n- `$SOURCE_REGISTRY_PASS` and `$TARGET_REGISTRY_PASS` are the passwords for the respective registries.\n\n## 2. `init-registry`\n\nInitialize a Docker registry locally.\n\nThis action will setup a Docker registry on your localhost. This is intended to be used as a staging area for image-mirroring before physically migrating the registry behind your firewall.\n\n### Arguments\n```\n--user                   : login user name for the container image registry\n--pass                   : login password for the container image registry\n--dir                    : local directory for the docker registry (default: /tmp/docker-registry)\n--subject                : self-sign TLS certificate subject\n--registry               : IP or FQDN for the docker registry ( default: $(hostname -f))\n--clean                  : clean up all existing repositories data\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action init-registry \\\n  --args \"[args]\"\n```\n\n## 3. `start-registry`\n\nStart a local Docker registry.\n\nThis action starts the Docker registry created by `init-registry`.\n\n### Arguments\n```\n--port                   : registry service port (default: 5000 )\n--dir                    : local directory for the docker registry (default: /tmp/docker-registry)\n--engine                 : container engine to run the container (docker or podman)\n--image                  : docker registry image (default: docker.io/library/registry:2.6)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action start-registry \\\n  --args \"[args]\"\n```\n\n## 4. `mirror-images`\n\nMirror images from a public source repository to an internal target repository.\n\nRun this action to copy all images required by the CASE from their original source registries into your internal registry. All images copied in this way will maintain their namespace/registry path. For example, mirroring `docker.io/ibmcom/datapower:10.0.0.0` to `my-registry.io` will result in the image `my-registry.io/ibmcom/datapower:10.0.0.0`.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--inputDir               : path to saved CASE directory (required)\n--fromRegistry           : override the source image registry in the CASE\n--registry               : target container image registry (required)\n--chunks                 : mirror the images in batches with a given size. Default is 100\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action mirror-images \\\n  --args \"--registry $TARGET_REGISTRY --inputDir /tmp/cases\"\n```\nWhere `$TARGET_REGISTRY` is the URL of the internal mirroring image registry.\n\n## 5. `stop-registry`\n\nStop a local Docker registry.\n\nThis action stops the Docker registry started by `start-registry`. Run this action only after you've completed the mirroring process.\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action stop-registry\n```\n\n## 6. `configure-cluster-airgap`\n\nConfigure cluster to utilize mirrored image registry.\n\nThis command deploys an [ImageContentSourcePolicy](https://docs.openshift.com/container-platform/4.5/openshift_images/image-configuration.html#images-configuration-registry-mirror_image-configuration) that redirects image pull requests of Pods from their original source to the internal target registry.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--inputDir               : path to saved CASE directory\n--registry               : target container image registry (required)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action configure-cluster-airgap \\\n  --args \"--registry $TARGET_REGISTRY --inputDir /tmp/cases\"\n```\n\n## 7. `install-catalog`\n\nInstall the CatalogSource object to your cluster.\n\nThis command deploys the OLM CatalogSource object into the cluster in the `openshift-marketplace` namespace. Once the CatalogSource is in the OCP cluster, the DataPower Operator will become a tile in the OCP Operator UI. The CatalogSource is required to create a Subscription to the DataPower Operator.\n\n<InlineNotification>\n\nThis action must be taken prior to `install-operator`.\n\n</InlineNotification>\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--registry               : target container image registry\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n#### `--registry`\n\nA target registry can be specified for pulling the CatalogSource image. If an ImageContentSourcePolicy is in place on the cluster, this argument shouldn't be required.\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-catalog \\\n  --args \"--registry $TARGET_REGISTRY\"\n```\n\n## 8. `install-operator`\n\nInstall the Operator via OLM Subscription.\n\nThis command installs the DataPower Operator by way of OLM Subscription. A Subscription yaml is applied to the cluster in the namespace provided. If an OperatorGroup is not already present, one will be created.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--channelName            : name of channel for subscription (packagemanifest default used if not specified)\n--secret                 : name of existing image pull secret for the container image registry\n--registry               : container image registry (required if pass|user specified)\n--user                   : login user name for the container image registry (required if registry|pass specified)\n--pass                   : login password for the container image registry (required if registry|user specified)\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-operator\n```\n\n## 9. `uninstall-operator`\n\nUninstall the Operator OLM Subscription.\n\nThis command uninstalls the Operator by removing the OLM Subscription from the provided namespace.\n\n<InlineNotification>\n\nAll Operator Subscriptions **should** be uninstalled before uninstalling the CatalogSource.\n\n</InlineNotification>\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n```\n\n### Example\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-operator\n```\n\n## 10. `uninstall-catalog`\n\nUninstall the Operator CatalogSource.\n\nThis command removes the CatalogSource from the cluster.\n\n### Arguments\n```\n--dryRun                 : print the actions that would be taken and exit without writing to the destinations\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-catalog\n```\n\n## 11. `install-operator-native`\n\nInstall the Operator using standard Kubernetes resources.\n\nThis command deploys the DataPower Operator using standard Kubernetes resources, namely Deployment. Installing this way will not benefit from any of OLM's functionality.\n\n### Arguments\n```\n--secret                 : name of existing image pull secret for the container image registry\n--registry               : container image registry (required if pass|user specified)\n--user                   : login user name for the container image registry (required if pass specified)\n--pass                   : login password for the container image registry (required if user specified)\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action install-operator-native\n```\n\n## 12. `uninstall-operator-native`\n\nUninstall DataPower Operator which was installed using native Kubernetes resources.\n\n### Arguments\n```\n--deleteCRDs             : deletes CRD's associated with this operator (if not set, crds won't get deleted)\n--recursive              : recursively install dependent catalogs\n--inputDir               : path to saved CASE directory ( required if --recurse is set)\n```\n\n### Example\n\n```\ncloudctl case launch \\\n  --case /path/to/case \\\n  --namespace my-namespace \\\n  --inventory datapowerOperator \\\n  --action uninstall-operator-native\n```\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/install/case.mdx"}}}}