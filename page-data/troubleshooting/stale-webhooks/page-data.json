{"componentChunkName":"component---src-pages-troubleshooting-stale-webhooks-mdx","path":"/troubleshooting/stale-webhooks/","result":{"pageContext":{"frontmatter":{"title":"Stale Webhooks","description":"Troubleshooting guide related to stale webhook configurations"},"relativePagePath":"/troubleshooting/stale-webhooks.mdx","titleType":"page","MdxNode":{"id":"f5ffa7aa-6482-5a24-92e8-4aa100b440fd","children":[],"parent":"48ad9b3d-9425-5228-9ce1-8bba17ff0c9c","internal":{"content":"---\ntitle: Stale Webhooks\ndescription: Troubleshooting guide related to stale webhook configurations\n---\n\n<PageDescription>\n\nThe DataPower Operator implements and uses [Kubernetes Admission Controllers](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) for validating and defaulting `DataPowerService` requests.\n\n</PageDescription>\n\n## Background\n\nDuring the DataPower Operator pod's boot sequence, it will attempt to fetch and/or create several Kubernetes resources for the validating and defaulting webhooks. These resources include:\n\n- `Secret` containing TLS key/cert for webhook API\n- `Service` to expose the webhook API\n- `MutatingWebhookConfiguration` for the defaulting webhook\n- `ValidatingWebhookConfiguration` for the validating webhook\n\nThe `Secret` and `Service` are owned by the DataPower Operator's `ReplicaSet`, and thus share the same life cycle as the operator pod itself. However, the two webhook configurations are cluster-scope resources, and are instead owned by the operator's `ClusterRole`. The expectation is that the `ClusterRole` shares the same life cycle as the DataPower Operator, but there are cases where this life cycle can be broken, leading to a mismatch between the TLS key/cert referenced by the configurations, and the TLS key/cert being used by the current operator pod.\n\n## Problem determination\n\nIf you see errors relating to **bad certificate** or **x509 certificate validation** being logged in the DataPower Operator pod, you are most likely seeing this issue. Some examples are shown below to assist with problem determination.\n\n```\n2020/05/05 04:13:22 http: TLS handshake error from x.x.x.x:57076: remote error: tls: bad certificate\n```\n\n```\nInternal error occurred: failed calling webhook \"datapowerservices.defaulter.datapower.ibm.com\": Post https://datapower-operator.namespace.svc:443/default-datapower-ibm-com-v1beta2-datapowerservice?timeout=2s: x509: certificate signed by unknown authority (possibly because of \"crypto/rsa: verification error\" while trying to verify candidate authority certificate \"datapower-operator-ca\")\n```\n\n## Resolution\n\nTo recover from this state, both the `MutatingWebhookConfiguration` and `ValidatingWebhookConfiguration` configurations need to be manually deleted, and then recreated by the DataPower Operator. At a high-level, this process will be the following:\n\n1. Delete stale `MutatingWebhookConfiguration` resource\n2. Delete stale `ValidatingWebhookConfiguration` resource\n3. Delete `datapower-operator` Pod\n\nWhen the `datapower-operator` Pod is deleted, it will automatically be recreated by the Deployment, and the newly created Pod will recreate the webhook configuration resources.\n\n### Steps to Recover\n\n1. Fetch the `MutatingWebhookConfiguration` resource from the cluster, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com\n    ```\n\n    <InlineNotification>\n\n    Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.\n\n    </InlineNotification>\n\n    If you need to filter down further, you can filter by the `namespace` you've deployed the DataPower Operator in. For example:\n\n    ```\n    kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n    ```\n\n2. Delete the `MutatingWebhookConfiguration` resource, where `name` is the name found in Step 1.\n\n    ```\n    kubectl delete MutatingWebhookConfiguration/name\n    ```\n\n3. Fetch the `ValidatingWebhookConfiguration` resource from the cluster, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com\n    ```\n\n    <InlineNotification>\n\n    Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.\n\n    </InlineNotification>\n\n    If you need to filter down further, you can filter by the `namespace` you've deployed the DataPower Operator in. For example:\n\n    ```\n    kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n    ```\n\n4. Delete the `ValidatingWebhookConfiguration` resource, where `name` is the name found in Step 3.\n\n    ```\n    kubectl delete ValidatingWebhookConfiguration/name\n    ```\n\n5. Fetch the DataPower Operator pod, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl [-n namespace] get pod | grep datapower-operator\n    ```\n\n6. Delete the DataPower Operator pod, where `name` is the name of the pod found in Step 5.\n\n    ```\n    kubectl [-n namespace] delete pod/name\n    ```\n\nThe DataPower Operator's ReplicaSet will schedule a new Pod, which will create all the resources in the cluster again in a clean state.\n\n## Further Troubleshooting\n\nIf you continue to see issues after following the above steps, please engage IBM Support.\n","type":"Mdx","contentDigest":"4e219c44023cbf3c14ef9c0f78054c84","counter":136,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Stale Webhooks","description":"Troubleshooting guide related to stale webhook configurations"},"exports":{},"rawBody":"---\ntitle: Stale Webhooks\ndescription: Troubleshooting guide related to stale webhook configurations\n---\n\n<PageDescription>\n\nThe DataPower Operator implements and uses [Kubernetes Admission Controllers](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) for validating and defaulting `DataPowerService` requests.\n\n</PageDescription>\n\n## Background\n\nDuring the DataPower Operator pod's boot sequence, it will attempt to fetch and/or create several Kubernetes resources for the validating and defaulting webhooks. These resources include:\n\n- `Secret` containing TLS key/cert for webhook API\n- `Service` to expose the webhook API\n- `MutatingWebhookConfiguration` for the defaulting webhook\n- `ValidatingWebhookConfiguration` for the validating webhook\n\nThe `Secret` and `Service` are owned by the DataPower Operator's `ReplicaSet`, and thus share the same life cycle as the operator pod itself. However, the two webhook configurations are cluster-scope resources, and are instead owned by the operator's `ClusterRole`. The expectation is that the `ClusterRole` shares the same life cycle as the DataPower Operator, but there are cases where this life cycle can be broken, leading to a mismatch between the TLS key/cert referenced by the configurations, and the TLS key/cert being used by the current operator pod.\n\n## Problem determination\n\nIf you see errors relating to **bad certificate** or **x509 certificate validation** being logged in the DataPower Operator pod, you are most likely seeing this issue. Some examples are shown below to assist with problem determination.\n\n```\n2020/05/05 04:13:22 http: TLS handshake error from x.x.x.x:57076: remote error: tls: bad certificate\n```\n\n```\nInternal error occurred: failed calling webhook \"datapowerservices.defaulter.datapower.ibm.com\": Post https://datapower-operator.namespace.svc:443/default-datapower-ibm-com-v1beta2-datapowerservice?timeout=2s: x509: certificate signed by unknown authority (possibly because of \"crypto/rsa: verification error\" while trying to verify candidate authority certificate \"datapower-operator-ca\")\n```\n\n## Resolution\n\nTo recover from this state, both the `MutatingWebhookConfiguration` and `ValidatingWebhookConfiguration` configurations need to be manually deleted, and then recreated by the DataPower Operator. At a high-level, this process will be the following:\n\n1. Delete stale `MutatingWebhookConfiguration` resource\n2. Delete stale `ValidatingWebhookConfiguration` resource\n3. Delete `datapower-operator` Pod\n\nWhen the `datapower-operator` Pod is deleted, it will automatically be recreated by the Deployment, and the newly created Pod will recreate the webhook configuration resources.\n\n### Steps to Recover\n\n1. Fetch the `MutatingWebhookConfiguration` resource from the cluster, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com\n    ```\n\n    <InlineNotification>\n\n    Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.\n\n    </InlineNotification>\n\n    If you need to filter down further, you can filter by the `namespace` you've deployed the DataPower Operator in. For example:\n\n    ```\n    kubectl get MutatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n    ```\n\n2. Delete the `MutatingWebhookConfiguration` resource, where `name` is the name found in Step 1.\n\n    ```\n    kubectl delete MutatingWebhookConfiguration/name\n    ```\n\n3. Fetch the `ValidatingWebhookConfiguration` resource from the cluster, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com\n    ```\n\n    <InlineNotification>\n\n    Note that if you are on a shared cluster, there may be multiple results from the above command, as there could be several instances of the DataPower Operator deployed across the cluster.\n\n    </InlineNotification>\n\n    If you need to filter down further, you can filter by the `namespace` you've deployed the DataPower Operator in. For example:\n\n    ```\n    kubectl get ValidatingWebhookConfiguration | grep datapower.ibm.com | grep namespace\n    ```\n\n4. Delete the `ValidatingWebhookConfiguration` resource, where `name` is the name found in Step 3.\n\n    ```\n    kubectl delete ValidatingWebhookConfiguration/name\n    ```\n\n5. Fetch the DataPower Operator pod, taking note of the name (will be the first column in the output).\n\n    ```\n    kubectl [-n namespace] get pod | grep datapower-operator\n    ```\n\n6. Delete the DataPower Operator pod, where `name` is the name of the pod found in Step 5.\n\n    ```\n    kubectl [-n namespace] delete pod/name\n    ```\n\nThe DataPower Operator's ReplicaSet will schedule a new Pod, which will create all the resources in the cluster again in a clean state.\n\n## Further Troubleshooting\n\nIf you continue to see issues after following the above steps, please engage IBM Support.\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/troubleshooting/stale-webhooks.mdx"}}}}