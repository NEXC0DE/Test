{"componentChunkName":"component---src-pages-troubleshooting-logging-mdx","path":"/troubleshooting/logging/","result":{"pageContext":{"frontmatter":{"title":"Logging","description":"Troubleshooting guide related to logging"},"relativePagePath":"/troubleshooting/logging.mdx","titleType":"page","MdxNode":{"id":"d362a346-9611-529b-a513-7c67fa4ddb50","children":[],"parent":"52bd409c-0d3e-5323-91de-852d7eaa0902","internal":{"content":"---\ntitle: Logging\ndescription: Troubleshooting guide related to logging\n---\n\n<PageDescription>\n\nThe logging level for the DataPower Operator can be adjusted to aid in troubleshooting issues.\n\n</PageDescription>\n\n\n## Log level\n\nYou can adjust the log level of the DataPower Operator Pod. The supported log levels are as follows:\n\n- `error`\n- `info`\n- `debug`\n- integer > 0\n\nNotes:\n\n  - Setting the log level to 1 is the equivalent of using `debug`\n  - Setting the log level to an integer > 1 will increase the log level past `debug` for increased verbosity of operator code, as well as library code.\n  - Setting the log level to an integer >= 4 will set the log level for Kubernetes API logging.\n\nThe mechanism by which you change the logging level may depend on how you installed the operator.\n\n### Set via Helm chart\n\n<!-- TODO: add link to Helm chart once published -->\nOur Helm chart offers the `operator.logLevel` property as a method to change the log level.\n\n### Set via Deployment\n\nThe DataPower Operator's `Deployment` can also be modified in the cluster directly. In the container spec you will see something like this:\n\n```yaml\nargs:\n  - \"--zap-encoder=json\"\n  - \"--zap-level=info\"\n  - \"--zap-time-encoding=iso8601\"\n```\n\nThese values can be modified following the [default `zap` logger](https://sdk.operatorframework.io/docs/golang/references/logging/#default-zap-logger) documentation.\n\n## Retrieving logs\n\nLogs can be retrieved from the DataPower Operator pod using `kubectl logs`, `oc logs`, or the OpenShift console if deployed on OpenShift.\n\nSome examples, where `datapower-operator-777fccc85-68gs6` is the Pod name:\n\n```bash\n# dump all logs to file\noc logs datapower-operator-777fccc85-68gs6 > datapower-operator-logs.txt\n\n# stream logs\noc logs -f datapower-operator-777fccc85-68gs6\n\n# dump logs from previous container (i.e. after a restart)\noc logs --previous datapower-operator-777fccc85-68gs6\n```\n","type":"Mdx","contentDigest":"79f971830b8fa984d3b9d511fd551005","counter":98,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Logging","description":"Troubleshooting guide related to logging"},"exports":{},"rawBody":"---\ntitle: Logging\ndescription: Troubleshooting guide related to logging\n---\n\n<PageDescription>\n\nThe logging level for the DataPower Operator can be adjusted to aid in troubleshooting issues.\n\n</PageDescription>\n\n\n## Log level\n\nYou can adjust the log level of the DataPower Operator Pod. The supported log levels are as follows:\n\n- `error`\n- `info`\n- `debug`\n- integer > 0\n\nNotes:\n\n  - Setting the log level to 1 is the equivalent of using `debug`\n  - Setting the log level to an integer > 1 will increase the log level past `debug` for increased verbosity of operator code, as well as library code.\n  - Setting the log level to an integer >= 4 will set the log level for Kubernetes API logging.\n\nThe mechanism by which you change the logging level may depend on how you installed the operator.\n\n### Set via Helm chart\n\n<!-- TODO: add link to Helm chart once published -->\nOur Helm chart offers the `operator.logLevel` property as a method to change the log level.\n\n### Set via Deployment\n\nThe DataPower Operator's `Deployment` can also be modified in the cluster directly. In the container spec you will see something like this:\n\n```yaml\nargs:\n  - \"--zap-encoder=json\"\n  - \"--zap-level=info\"\n  - \"--zap-time-encoding=iso8601\"\n```\n\nThese values can be modified following the [default `zap` logger](https://sdk.operatorframework.io/docs/golang/references/logging/#default-zap-logger) documentation.\n\n## Retrieving logs\n\nLogs can be retrieved from the DataPower Operator pod using `kubectl logs`, `oc logs`, or the OpenShift console if deployed on OpenShift.\n\nSome examples, where `datapower-operator-777fccc85-68gs6` is the Pod name:\n\n```bash\n# dump all logs to file\noc logs datapower-operator-777fccc85-68gs6 > datapower-operator-logs.txt\n\n# stream logs\noc logs -f datapower-operator-777fccc85-68gs6\n\n# dump logs from previous container (i.e. after a restart)\noc logs --previous datapower-operator-777fccc85-68gs6\n```\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/troubleshooting/logging.mdx"}}}}