{"componentChunkName":"component---src-pages-guides-domain-configuration-mdx","path":"/guides/domain-configuration/","result":{"pageContext":{"frontmatter":{"title":"Domain Configuration","description":"Guide to deploying IBM DataPower application domain configuration through the Operator"},"relativePagePath":"/guides/domain-configuration.mdx","titleType":"page","MdxNode":{"id":"052a715f-e416-5426-962e-cf741c7db11c","children":[],"parent":"d7ba51f6-2d01-5c7b-83db-d2df9d33d5f4","internal":{"content":"---\ntitle: Domain Configuration\ndescription: Guide to deploying IBM DataPower application domain configuration through the Operator\n---\n\n<PageDescription>\n\nThe DataPower Operator supports managing DataPower configuration through the `domains` property on the `DataPowerService` Custom Resource. This allows for independent management of each application domain on the DataPower Gateway.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>The Domains Definition</AnchorLink>\n  <AnchorLink>Creating a Secret</AnchorLink>\n  <AnchorLink>Config Method: dpApp</AnchorLink>\n  <AnchorLink>Updating Domains</AnchorLink>\n</AnchorLinks>\n\n# The Domains Definition\n\nThe following snippet of the `DataPowerService` Custom Resource contains all fields relevant to `domains`, filled with example values.\n\n```yaml\ndomains:\n- name: \"default\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"default-cert\"\n  - certType: \"sharedcerts\"\n    secret: \"shared-cert\"\n  dpApp:\n    config:\n    - \"default-config\"\n    local:\n    - \"default-local\"\n- name: \"example\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"example-cert\"\n    subPath: \"example/path\"\n  dpApp:\n    config:\n    - \"example-config\"\n    local:\n    - \"example-local\"\n```\n\n## `domains`\n\n`domains` is a list of DataPower Domains that should be configured. Domains are comprised of `name`, `certs`, and `configMethod` fields. For a Domain to be created, a configuration method must be defined. The supported methods are:\n\n- `dpApp` - Domain configuration via `config` and `local` ConfigMaps.\n\n## `name`\n\nThe `name` field is just that: the name of the domain. This will propagate into the pod and be the name of the resultant DataPower Domain.\n\n## `certs`\n\n`certs` is a list of all certificate, key, or general crypto files that need to be dropped into a Domain. There are two fields for each item in the `certs` list:\n\n### `certType`\n\nDefines the type of cert. The accepted values are `usrcerts` and `sharedcerts`. A `usrcerts` type will apply only to the specific Domain. A `sharedcerts` type will be available to all Domains. The best practice for `sharedcerts` types is to associate them with the `default` domain, but this is not required.\n\n### `secret`\n\nDefines the name of the Kubernetes or OpenShift secret containing the crypto files. This secret can contain any number of certificates.\n\n### `subPath`\n\nDefines the SubPath to place the cert into. This field is optional, and only allowed if `certType` is `usrcerts`. The provided SubPath must be a relative path, and will be appended to the domain's directory path. If not included or left empty, the cert will not be placed in a subpath. An example would be `dir1/dir2`.\n\n### Creating a Secret\n\nTo create a secret containing your crypto information, use:\n\n```\nkubectl create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n```\n\nOr alternatively, for a TLS secret:\n\n```\nkubectl create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n```\n\n## `passphraseSecret`\n\n<InlineNotification>\n\nNote: `passphraseSecret` is only available in version `1.4.0` onward, in the `v1beta3` DataPowerService CRD.\n\n</InlineNotification>\n\nOptionally, a `passphraseSecret` property can be provided for use in decrypting `password-alias` objects within the DataPower configuration. The value of this property must be the name of a Kubernetes Secret in the same namespace.\n\nThe Secret **must** contain a literal property, `passphrase`, which contains the passphrase to use in the `domain-settings` object within the DataPower domain configuration. When this `passphraseSecret` property is provided, the DataPower Operator will generate a `domain-settings` object for the configured domain, with the provided `passphrase`, such that any `password-alias` objects in the domain configuration can be decrypted and used for service implementation.\n\nExample Secret creation named `default-passphrase` with passphrase `datapower`:\n\n```\noc create secret generic default-passphrase --from-literal=passphrase=datapower\n```\n\nSpecifying this in a `domains` spec would look like:\n\n```yaml\ndomains:\n- name: \"default\"\n  passphraseSecret: \"default-passphrase\"\n  dpApp:\n    config:\n    - \"default-config\"\n    local:\n    - \"default-local\"\n```\n\nFor more details on the `domain-settings` and `passphrase` configurations, see the following IBM Documentation:\n\n- [Domain Settings commands](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=c-domain-settings-commands)\n- [passphrase](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=commands-passphrase)\n- [Creating password aliases in the password map](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=connections-creating-password-aliases-in-password-map)\n\n# Config Method: `dpApp`\n\n`dpApp` is a basic configuration method for the DataPower operand. It takes two ConfigMap arrays:\n\n## `config`\n\n- Array of ConfigMaps containing DataPower configuration file(s).\n- At least one ConfigMap must be provided for `config`.\n\nEach ConfigMap specified in `config` must be a ConfigMap created directly from standard DataPower config file(s).\n\n```\nkubectl create configmap domain-config --from-file=/path/to/domain.cfg\n```\n\nYou can also specify multiple config files, which will all be used to build the ConfigMap, and thus be applied to the same target Domain:\n\n```\nkubectl create configmap domain-config \\\n  --from-file=/path/to/domain-config-pt1.cfg \\\n  --from-file=/path/to/domain-config-pt2.cfg \\\n  --from-file=/path/to/domain-config-pt3.cfg\n```\n\nDepending on your use-case, you can either create the ConfigMap from multiple files, or create a ConfigMap for each config part, and list each ConfigMap in the `config` array. For example:\n\n```yaml\nspec:\n  domains:\n  - name: \"test-domain\"\n    dpApp:\n      config:\n      - \"domain-config-pt1\"\n      - \"domain-config-pt2\"\n      - \"domain-config-pt3\"\n```\n\n## `local`\n\n- Array of ConfigMaps each containing a tarball of local files to be used by the Domain.\n- This value is optional.\n\nEach ConfigMap specified in `local` must be a ConfigMap created from a tarball containing local files for the Domain. The expectation is that the tarball contains the top-level files and directories you expect to be placed in the `local:///` directory of the targeted domain.\n\n```\nkubectl create configmap domain-local --from-file=/path/to/domain-local.tar.gz\n```\n\nThe contents of each tarball are expanded and then copied into the Domain's `local:///` filesystem.\n\n<InlineNotification>\n\nNote that if multiple ConfigMaps are specified for `local`, you must be aware that if the same file/path exists in more than one ConfigMap the resulting file will be overwritten by the last ConfigMap to provide that file.\n\n</InlineNotification>\n\n## Example\n\nThis example shows the complete end-to-end flow for creating all resources necessary to configure a domain via the `dpApp` configuration method.\n\nStarting with a `testdomain` structure as follows:\n\n```\n$ ls\ntestdomain\n\n$ tree\n.\n`-- testdomain\n    |-- config\n    |   `-- testdomain.cfg\n    `-- local\n        `-- test.xsl\n\n3 directories, 2 files\n```\n\nCreate the `config` ConfigMap from the `cfg` file:\n\n```\nkubectl create configmap testdomain-config \\\n  --from-file=/path/to/testdomain/config/testdomain.cfg\n```\n\nCreate a tarball for the `local` files:\n\n```\ntar --directory=/path/to/testdomain/local -czvf testdomain-local.tar.gz .\n```\n\nThe created tarball should have the local file(s) at the top-level:\n\n```\n$ tar -tzvf testdomain-local.tar.gz\ndrwxrwxr-x admin/admin   0 2020-04-09 15:37 ./\n-rw-rw-r-- admin/admin  14 2020-04-09 15:27 ./test.xsl\n```\n\nCreate the `local` ConfigMap from the tarball:\n\n```\nkubectl create configmap testdomain-local \\\n  --from-file=/path/to/testdomain-local.tar.gz\n```\n\n`DataPowerService` snippet with `domains` spec for the `testdomain`:\n\n```yaml\nspec:\n  domains:\n  - name: \"testdomain\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n```\n\nOnce deployed via the DataPower Operator, the config and local files could be validated from the DataPower CLI.\n\nTo attach to a given DataPower Pod:\n\n```\nkubectl -n namespace attach -it pod/name -c datapower\n```\n\nFrom the DataPower CLI (once logged in):\n\n```\nidg# config\nidg(config)# switch testdomain\nidg[testdomain](config)# dir local:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   test.xsl                     Apr 9, 2020 3:54:03 PM           14\n\n   227782.0 MB available to local:\n\nidg[testdomain](config)# dir config:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   testdomain.cfg               Apr 9, 2020 3:54:03 PM           24\n\n   227782.0 MB available to config:\n```\n\n# Updating Domains\n\nAs described above, Domains are comprised of ConfigMaps and Secrets that exist in the k8s cluster. It is expected that over time a Domain configuration will need to be updated, including the `config` and `local` ConfigMaps and Secrets that comprise the `serts` for the Domain. These ConfigMaps and Secrets can be updated in-place in the cluster, and the DataPower Operator will automatically reconcile those changes.\n\nWhen an update is detected on a ConfigMap or Secret referenced by a Domain, a rolling update is triggered across the Pods in the StatefulSet. This allows for Domains to be updated without modifying the `DataPowerService` Custom Resource directly.\n\nFor example, if we define the following Domain spec:\n\n```yaml\nspec:\n  domains:\n  - name: \"testdomain\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"testdomain-certs\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n```\n\nWe could then update any of the following objects by deleting them in the cluster and recreating them with the same name:\n\n- `secret/testdomain-certs`\n- `configmap/testdomain-config`\n- `configmap/testdomain-local`\n\nThe StatefulSet will include annotations that provide timestamps for the last time a particular domain was modified or reconciled. You can see these by describing the StatefulSet resource in the cluster:\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      annotations:\n        datapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\n        datapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n```\n","type":"Mdx","contentDigest":"2cc431bd70b667be9d46f198a00ea403","counter":121,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Domain Configuration","description":"Guide to deploying IBM DataPower application domain configuration through the Operator"},"exports":{},"rawBody":"---\ntitle: Domain Configuration\ndescription: Guide to deploying IBM DataPower application domain configuration through the Operator\n---\n\n<PageDescription>\n\nThe DataPower Operator supports managing DataPower configuration through the `domains` property on the `DataPowerService` Custom Resource. This allows for independent management of each application domain on the DataPower Gateway.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>The Domains Definition</AnchorLink>\n  <AnchorLink>Creating a Secret</AnchorLink>\n  <AnchorLink>Config Method: dpApp</AnchorLink>\n  <AnchorLink>Updating Domains</AnchorLink>\n</AnchorLinks>\n\n# The Domains Definition\n\nThe following snippet of the `DataPowerService` Custom Resource contains all fields relevant to `domains`, filled with example values.\n\n```yaml\ndomains:\n- name: \"default\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"default-cert\"\n  - certType: \"sharedcerts\"\n    secret: \"shared-cert\"\n  dpApp:\n    config:\n    - \"default-config\"\n    local:\n    - \"default-local\"\n- name: \"example\"\n  certs:\n  - certType: \"usrcerts\"\n    secret: \"example-cert\"\n    subPath: \"example/path\"\n  dpApp:\n    config:\n    - \"example-config\"\n    local:\n    - \"example-local\"\n```\n\n## `domains`\n\n`domains` is a list of DataPower Domains that should be configured. Domains are comprised of `name`, `certs`, and `configMethod` fields. For a Domain to be created, a configuration method must be defined. The supported methods are:\n\n- `dpApp` - Domain configuration via `config` and `local` ConfigMaps.\n\n## `name`\n\nThe `name` field is just that: the name of the domain. This will propagate into the pod and be the name of the resultant DataPower Domain.\n\n## `certs`\n\n`certs` is a list of all certificate, key, or general crypto files that need to be dropped into a Domain. There are two fields for each item in the `certs` list:\n\n### `certType`\n\nDefines the type of cert. The accepted values are `usrcerts` and `sharedcerts`. A `usrcerts` type will apply only to the specific Domain. A `sharedcerts` type will be available to all Domains. The best practice for `sharedcerts` types is to associate them with the `default` domain, but this is not required.\n\n### `secret`\n\nDefines the name of the Kubernetes or OpenShift secret containing the crypto files. This secret can contain any number of certificates.\n\n### `subPath`\n\nDefines the SubPath to place the cert into. This field is optional, and only allowed if `certType` is `usrcerts`. The provided SubPath must be a relative path, and will be appended to the domain's directory path. If not included or left empty, the cert will not be placed in a subpath. An example would be `dir1/dir2`.\n\n### Creating a Secret\n\nTo create a secret containing your crypto information, use:\n\n```\nkubectl create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n```\n\nOr alternatively, for a TLS secret:\n\n```\nkubectl create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n```\n\n## `passphraseSecret`\n\n<InlineNotification>\n\nNote: `passphraseSecret` is only available in version `1.4.0` onward, in the `v1beta3` DataPowerService CRD.\n\n</InlineNotification>\n\nOptionally, a `passphraseSecret` property can be provided for use in decrypting `password-alias` objects within the DataPower configuration. The value of this property must be the name of a Kubernetes Secret in the same namespace.\n\nThe Secret **must** contain a literal property, `passphrase`, which contains the passphrase to use in the `domain-settings` object within the DataPower domain configuration. When this `passphraseSecret` property is provided, the DataPower Operator will generate a `domain-settings` object for the configured domain, with the provided `passphrase`, such that any `password-alias` objects in the domain configuration can be decrypted and used for service implementation.\n\nExample Secret creation named `default-passphrase` with passphrase `datapower`:\n\n```\noc create secret generic default-passphrase --from-literal=passphrase=datapower\n```\n\nSpecifying this in a `domains` spec would look like:\n\n```yaml\ndomains:\n- name: \"default\"\n  passphraseSecret: \"default-passphrase\"\n  dpApp:\n    config:\n    - \"default-config\"\n    local:\n    - \"default-local\"\n```\n\nFor more details on the `domain-settings` and `passphrase` configurations, see the following IBM Documentation:\n\n- [Domain Settings commands](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=c-domain-settings-commands)\n- [passphrase](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=commands-passphrase)\n- [Creating password aliases in the password map](https://www.ibm.com/docs/en/datapower-gateways/10.0.x?topic=connections-creating-password-aliases-in-password-map)\n\n# Config Method: `dpApp`\n\n`dpApp` is a basic configuration method for the DataPower operand. It takes two ConfigMap arrays:\n\n## `config`\n\n- Array of ConfigMaps containing DataPower configuration file(s).\n- At least one ConfigMap must be provided for `config`.\n\nEach ConfigMap specified in `config` must be a ConfigMap created directly from standard DataPower config file(s).\n\n```\nkubectl create configmap domain-config --from-file=/path/to/domain.cfg\n```\n\nYou can also specify multiple config files, which will all be used to build the ConfigMap, and thus be applied to the same target Domain:\n\n```\nkubectl create configmap domain-config \\\n  --from-file=/path/to/domain-config-pt1.cfg \\\n  --from-file=/path/to/domain-config-pt2.cfg \\\n  --from-file=/path/to/domain-config-pt3.cfg\n```\n\nDepending on your use-case, you can either create the ConfigMap from multiple files, or create a ConfigMap for each config part, and list each ConfigMap in the `config` array. For example:\n\n```yaml\nspec:\n  domains:\n  - name: \"test-domain\"\n    dpApp:\n      config:\n      - \"domain-config-pt1\"\n      - \"domain-config-pt2\"\n      - \"domain-config-pt3\"\n```\n\n## `local`\n\n- Array of ConfigMaps each containing a tarball of local files to be used by the Domain.\n- This value is optional.\n\nEach ConfigMap specified in `local` must be a ConfigMap created from a tarball containing local files for the Domain. The expectation is that the tarball contains the top-level files and directories you expect to be placed in the `local:///` directory of the targeted domain.\n\n```\nkubectl create configmap domain-local --from-file=/path/to/domain-local.tar.gz\n```\n\nThe contents of each tarball are expanded and then copied into the Domain's `local:///` filesystem.\n\n<InlineNotification>\n\nNote that if multiple ConfigMaps are specified for `local`, you must be aware that if the same file/path exists in more than one ConfigMap the resulting file will be overwritten by the last ConfigMap to provide that file.\n\n</InlineNotification>\n\n## Example\n\nThis example shows the complete end-to-end flow for creating all resources necessary to configure a domain via the `dpApp` configuration method.\n\nStarting with a `testdomain` structure as follows:\n\n```\n$ ls\ntestdomain\n\n$ tree\n.\n`-- testdomain\n    |-- config\n    |   `-- testdomain.cfg\n    `-- local\n        `-- test.xsl\n\n3 directories, 2 files\n```\n\nCreate the `config` ConfigMap from the `cfg` file:\n\n```\nkubectl create configmap testdomain-config \\\n  --from-file=/path/to/testdomain/config/testdomain.cfg\n```\n\nCreate a tarball for the `local` files:\n\n```\ntar --directory=/path/to/testdomain/local -czvf testdomain-local.tar.gz .\n```\n\nThe created tarball should have the local file(s) at the top-level:\n\n```\n$ tar -tzvf testdomain-local.tar.gz\ndrwxrwxr-x admin/admin   0 2020-04-09 15:37 ./\n-rw-rw-r-- admin/admin  14 2020-04-09 15:27 ./test.xsl\n```\n\nCreate the `local` ConfigMap from the tarball:\n\n```\nkubectl create configmap testdomain-local \\\n  --from-file=/path/to/testdomain-local.tar.gz\n```\n\n`DataPowerService` snippet with `domains` spec for the `testdomain`:\n\n```yaml\nspec:\n  domains:\n  - name: \"testdomain\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n```\n\nOnce deployed via the DataPower Operator, the config and local files could be validated from the DataPower CLI.\n\nTo attach to a given DataPower Pod:\n\n```\nkubectl -n namespace attach -it pod/name -c datapower\n```\n\nFrom the DataPower CLI (once logged in):\n\n```\nidg# config\nidg(config)# switch testdomain\nidg[testdomain](config)# dir local:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   test.xsl                     Apr 9, 2020 3:54:03 PM           14\n\n   227782.0 MB available to local:\n\nidg[testdomain](config)# dir config:\n   File Name                    Last Modified                    Size\n   ---------                    -------------                    ----\n   testdomain.cfg               Apr 9, 2020 3:54:03 PM           24\n\n   227782.0 MB available to config:\n```\n\n# Updating Domains\n\nAs described above, Domains are comprised of ConfigMaps and Secrets that exist in the k8s cluster. It is expected that over time a Domain configuration will need to be updated, including the `config` and `local` ConfigMaps and Secrets that comprise the `serts` for the Domain. These ConfigMaps and Secrets can be updated in-place in the cluster, and the DataPower Operator will automatically reconcile those changes.\n\nWhen an update is detected on a ConfigMap or Secret referenced by a Domain, a rolling update is triggered across the Pods in the StatefulSet. This allows for Domains to be updated without modifying the `DataPowerService` Custom Resource directly.\n\nFor example, if we define the following Domain spec:\n\n```yaml\nspec:\n  domains:\n  - name: \"testdomain\"\n    certs:\n    - certType: \"usrcerts\"\n      secret: \"testdomain-certs\"\n    dpApp:\n      config:\n      - \"testdomain-config\"\n      local:\n      - \"testdomain-local\"\n```\n\nWe could then update any of the following objects by deleting them in the cluster and recreating them with the same name:\n\n- `secret/testdomain-certs`\n- `configmap/testdomain-config`\n- `configmap/testdomain-local`\n\nThe StatefulSet will include annotations that provide timestamps for the last time a particular domain was modified or reconciled. You can see these by describing the StatefulSet resource in the cluster:\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  ...\nspec:\n  ...\n  template:\n    metadata:\n      annotations:\n        datapower.ibm.com/domains.default.reconciled: \"2020-06-04T02:36:55Z\"\n        datapower.ibm.com/domains.testdomain.reconciled: \"2020-06-04T02:36:55Z\"\n```\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/guides/domain-configuration.mdx"}}}}