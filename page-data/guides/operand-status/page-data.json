{"componentChunkName":"component---src-pages-guides-operand-status-mdx","path":"/guides/operand-status/","result":{"pageContext":{"frontmatter":{"title":"Operand Status","description":"Guide for retrieving and understanding the status of deployed operands."},"relativePagePath":"/guides/operand-status.mdx","titleType":"page","MdxNode":{"id":"3f8e307f-616c-5db3-923f-7644bb603649","children":[],"parent":"aa841d97-0e51-566c-af02-5faf932b613a","internal":{"content":"---\ntitle: Operand Status\ndescription: Guide for retrieving and understanding the status of deployed operands.\n---\n\n<PageDescription>\n\nOnce deployed, an operand's status is available via the Custom Resources that compose the workload.\n\n</PageDescription>\n\n## Operand Custom Resources\n\nThe DataPower Operator manages **operands**, e.g. IBM DataPower Gateway pods, through its Custom Resources. The primary Custom Resource is the `DataPowerService` CustomResourceDefinition (CRD). When a `DataPowerService` instance is created, the DataPower Operator will keep its `Status` up-to-date. This `Status` can contain valuable information regarding the workload's state, including the status of an update rollout, any errors during reconciliation, etc.\n\nWhile the `DataPowerService` instance is the primary instance for checking the status of the IBM DataPower Gateway deployment, the `DataPowerMonitor` instance is also a valuable component. For more details, see [DataPower Monitor](/features/monitor).\n\n## Retrieving status\n\n### DataPowerService\n\nYou can interact with the `DataPowerService` resource type similarly to how you would a `Pod` or `Deployment`.\n\n<InlineNotification>\n\n**Note:** The below examples use the `oc` CLI; however, the same commands should work with `kubectl`.\n\n</InlineNotification>\n\n```bash\n# list DataPowerService instances\noc get datapowerservice\n\n# describe one of them\noc describe datapowerservice/name\n```\n\nThe `DataPowerService` also supports a shortname, `dp`:\n\n```bash\n# list DataPowerService instances\noc get dp\n\n# describe one of them\noc describe dp/name\n```\n\n### DataPowerMonitor\n\nYou can interact with the `DataPowerMonitor` resource type similarly to the `DataPowerService`.\n\n```bash\n# list DataPowerMonitor instances\noc get datapowermonitor\n\n# describe one of them\noc describe datapowermonitor/name\n```\n\nThe `DataPowerMonitor` also supports a shortname, `dpm`:\n\n```bash\n# list DataPowerMonitor instances\noc get dpm\n\n# describe one of them\noc describe dpm/name\n```\n\n### Categories\n\nAll CRDs that the DataPower Operator manages will be included in the following categories, allowing for it to show up in aggregated `get` output:\n\n- `all`\n- `apic`\n- `cp4i`\n- `integration`\n\nTo list these categories of resources use `oc get category` where `category` is one of the above.\n\n```bash\noc get all\noc get apic\noc get cp4i\noc get integration\n```\n\n## Understanding the output\n\nThe output from `oc get dp` will show at a glance if the IBM DataPower Gateway instance(s) are `Ready`. For example:\n\n```\n$ oc get dp\nNAME        PHASE     READY   SUMMARY                           VERSION    AGE\nexample     Running   True    StatefulSet replicas ready: 3/3   10.0.1.0   171m\n```\n\nSimilarly to other Kubernetes resources, you can `describe` the custom resource for more verbose status (as well as to see its `spec`). At the bottom of the `describe` output, you will find the `Status` section. This contains conditions and other custom status entries.\n\nTo read more about the available information in the `Status` sections for each CRD, see:\n\n- [DataPowerService Status](/apis/datapowerservice/v1beta3#status)\n- [DataPowerMonitor Status](/apis/datapowermonitor/v1beta2#status)\n","type":"Mdx","contentDigest":"d6d1d4352ff897bb873fbc790bb1295c","counter":118,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Operand Status","description":"Guide for retrieving and understanding the status of deployed operands."},"exports":{},"rawBody":"---\ntitle: Operand Status\ndescription: Guide for retrieving and understanding the status of deployed operands.\n---\n\n<PageDescription>\n\nOnce deployed, an operand's status is available via the Custom Resources that compose the workload.\n\n</PageDescription>\n\n## Operand Custom Resources\n\nThe DataPower Operator manages **operands**, e.g. IBM DataPower Gateway pods, through its Custom Resources. The primary Custom Resource is the `DataPowerService` CustomResourceDefinition (CRD). When a `DataPowerService` instance is created, the DataPower Operator will keep its `Status` up-to-date. This `Status` can contain valuable information regarding the workload's state, including the status of an update rollout, any errors during reconciliation, etc.\n\nWhile the `DataPowerService` instance is the primary instance for checking the status of the IBM DataPower Gateway deployment, the `DataPowerMonitor` instance is also a valuable component. For more details, see [DataPower Monitor](/features/monitor).\n\n## Retrieving status\n\n### DataPowerService\n\nYou can interact with the `DataPowerService` resource type similarly to how you would a `Pod` or `Deployment`.\n\n<InlineNotification>\n\n**Note:** The below examples use the `oc` CLI; however, the same commands should work with `kubectl`.\n\n</InlineNotification>\n\n```bash\n# list DataPowerService instances\noc get datapowerservice\n\n# describe one of them\noc describe datapowerservice/name\n```\n\nThe `DataPowerService` also supports a shortname, `dp`:\n\n```bash\n# list DataPowerService instances\noc get dp\n\n# describe one of them\noc describe dp/name\n```\n\n### DataPowerMonitor\n\nYou can interact with the `DataPowerMonitor` resource type similarly to the `DataPowerService`.\n\n```bash\n# list DataPowerMonitor instances\noc get datapowermonitor\n\n# describe one of them\noc describe datapowermonitor/name\n```\n\nThe `DataPowerMonitor` also supports a shortname, `dpm`:\n\n```bash\n# list DataPowerMonitor instances\noc get dpm\n\n# describe one of them\noc describe dpm/name\n```\n\n### Categories\n\nAll CRDs that the DataPower Operator manages will be included in the following categories, allowing for it to show up in aggregated `get` output:\n\n- `all`\n- `apic`\n- `cp4i`\n- `integration`\n\nTo list these categories of resources use `oc get category` where `category` is one of the above.\n\n```bash\noc get all\noc get apic\noc get cp4i\noc get integration\n```\n\n## Understanding the output\n\nThe output from `oc get dp` will show at a glance if the IBM DataPower Gateway instance(s) are `Ready`. For example:\n\n```\n$ oc get dp\nNAME        PHASE     READY   SUMMARY                           VERSION    AGE\nexample     Running   True    StatefulSet replicas ready: 3/3   10.0.1.0   171m\n```\n\nSimilarly to other Kubernetes resources, you can `describe` the custom resource for more verbose status (as well as to see its `spec`). At the bottom of the `describe` output, you will find the `Status` section. This contains conditions and other custom status entries.\n\nTo read more about the available information in the `Status` sections for each CRD, see:\n\n- [DataPowerService Status](/apis/datapowerservice/v1beta3#status)\n- [DataPowerMonitor Status](/apis/datapowermonitor/v1beta2#status)\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/guides/operand-status.mdx"}}}}