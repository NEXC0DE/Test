{"componentChunkName":"component---src-pages-guides-workload-rollbacks-mdx","path":"/guides/workload-rollbacks/","result":{"pageContext":{"frontmatter":{"title":"Workload Rollbacks","description":"Guide to rolling back changes to DataPowerService Custom Resource instances"},"relativePagePath":"/guides/workload-rollbacks.mdx","titleType":"page","MdxNode":{"id":"90e77ba4-7b90-58c5-8280-733f270d1a91","children":[],"parent":"5b811757-0b61-56f2-9e98-c544c4164041","internal":{"content":"---\ntitle: Workload Rollbacks\ndescription: Guide to rolling back changes to DataPowerService Custom Resource instances\n---\n\n<PageDescription>\n\nThe DataPowerService uses a [StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) to manage the DataPower Pods it deploys. We recommend versioning your Custom Resource YAML to enable rolling back changes you've deployed.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Rolling Updates</AnchorLink>\n  <AnchorLink>Versioning your Custom Resource</AnchorLink>\n  <AnchorLink>Rolling back a change</AnchorLink>\n  <AnchorLink>Forced Rollback</AnchorLink>\n</AnchorLinks>\n\n## Rolling Updates\n\nThe default update strategy for the StatefulSet is `RollingUpdate`. This ensures ordered and graceful deployment and scaling of the workload when changes are made. We recommend reading through the Kubernetes documentation on [Rolling Updates](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#rolling-updates) to understand this concept in more detail.\n\n## Versioning your Custom Resource\n\nWe recommend as a best practice that you should version control your `DataPowerService` Custom Resource YAMLs. Using a version control system such as `git`, you can easily revert changes you make to your configurations.\n\n## Rolling back a change\n\nTo roll back a given change, the process is as follows:\n\n1. Revert to the desired configuration using version control system, such as `git`.\n\n2. Apply change using `oc apply` or `kubectl apply` with desired YAML.\n\n### Example\n\n```\n# apply change\noc apply -f my-config.yaml\n\n# check status, find that deployment is unstable\noc describe dp/my-resource\n\n# decide to roll back the change, revert yaml locally using version control\n# this can be accomplished a number a ways, some examples are:\ngit revert <last-commit>\ngit checkout <stable-tag>\n\n# apply working yaml to roll back changes\noc apply -f my-config.yaml\n```\n\n## Forced Rollback\n\nIf a change is applied to the `DataPowerService` Custom Resource that puts the StatefulSet into a failed state, in which a rolling update does not complete successfully, you may need to perform a [Forced Rollback](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#forced-rollback) to recover.\n","type":"Mdx","contentDigest":"cfcbea95b2d88fa0fa2249b2a1a70fa1","counter":128,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Workload Rollbacks","description":"Guide to rolling back changes to DataPowerService Custom Resource instances"},"exports":{},"rawBody":"---\ntitle: Workload Rollbacks\ndescription: Guide to rolling back changes to DataPowerService Custom Resource instances\n---\n\n<PageDescription>\n\nThe DataPowerService uses a [StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) to manage the DataPower Pods it deploys. We recommend versioning your Custom Resource YAML to enable rolling back changes you've deployed.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Rolling Updates</AnchorLink>\n  <AnchorLink>Versioning your Custom Resource</AnchorLink>\n  <AnchorLink>Rolling back a change</AnchorLink>\n  <AnchorLink>Forced Rollback</AnchorLink>\n</AnchorLinks>\n\n## Rolling Updates\n\nThe default update strategy for the StatefulSet is `RollingUpdate`. This ensures ordered and graceful deployment and scaling of the workload when changes are made. We recommend reading through the Kubernetes documentation on [Rolling Updates](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#rolling-updates) to understand this concept in more detail.\n\n## Versioning your Custom Resource\n\nWe recommend as a best practice that you should version control your `DataPowerService` Custom Resource YAMLs. Using a version control system such as `git`, you can easily revert changes you make to your configurations.\n\n## Rolling back a change\n\nTo roll back a given change, the process is as follows:\n\n1. Revert to the desired configuration using version control system, such as `git`.\n\n2. Apply change using `oc apply` or `kubectl apply` with desired YAML.\n\n### Example\n\n```\n# apply change\noc apply -f my-config.yaml\n\n# check status, find that deployment is unstable\noc describe dp/my-resource\n\n# decide to roll back the change, revert yaml locally using version control\n# this can be accomplished a number a ways, some examples are:\ngit revert <last-commit>\ngit checkout <stable-tag>\n\n# apply working yaml to roll back changes\noc apply -f my-config.yaml\n```\n\n## Forced Rollback\n\nIf a change is applied to the `DataPowerService` Custom Resource that puts the StatefulSet into a failed state, in which a rolling update does not complete successfully, you may need to perform a [Forced Rollback](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#forced-rollback) to recover.\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/guides/workload-rollbacks.mdx"}}}}