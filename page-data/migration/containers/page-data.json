{"componentChunkName":"component---src-pages-migration-containers-mdx","path":"/migration/containers/","result":{"pageContext":{"frontmatter":{"title":"Migrating to containers","description":"Guide for migrating an existing IBM DataPower Gateway to container deployment using IBM DataPower Operator"},"relativePagePath":"/migration/containers.mdx","titleType":"page","MdxNode":{"id":"a7ab74a9-fb3d-59f7-97ee-9c6dde0c130c","children":[],"parent":"4aca2353-ada7-531b-8798-86ff295d2124","internal":{"content":"---\ntitle: Migrating to containers\ndescription: Guide for migrating an existing IBM DataPower Gateway to container deployment using IBM DataPower Operator\n---\n\nimport { Link } from 'gatsby'\n\n<PageDescription>\n\nThis guide provides steps to migrate an existing IBM DataPower Gateway (physical / virtual) to a container-based deployment utilizing the IBM DataPower Operator.\n\n</PageDescription>\n\n## Prepare for your migration\n\nThis guide assumes that you have already installed IBM DataPower Operator; if you have not, see [Getting Started](/getting-started).\n\nAdditionally, ensure that you have:\n\n- working knowledge of our latest [`DataPowerService`](/apis/datapowerservice/v1beta3) API version (`v1beta3`)\n- familiarity with [Domain configuration](/guides/domain-configuration)\n\n## Migrate\n\n### Overview\n\nFollow the steps below to migrate your IBM DataPower Gateway to an IBM DataPower Operator managed deployment:\n\n<AnchorLinks small>\n  <AnchorLink>Backing up your existing IBM DataPower Gateway deployment</AnchorLink>\n  <AnchorLink>Generating ConfigMap YAMLs for application domains</AnchorLink>\n  <AnchorLink>Creating ConfigMaps in your Kuberetes / OpenShift cluster</AnchorLink>\n  <AnchorLink>Creating Secrets in your Kubernetes / OpenShift cluster</AnchorLink>\n  <AnchorLink>Creating an admin user credential</AnchorLink>\n  <AnchorLink>Building the DataPowerService resource spec</AnchorLink>\n  <AnchorLink>Deploying the DataPowerService resource</AnchorLink>\n</AnchorLinks>\n\n### Backing up your existing IBM DataPower Gateway deployment\n\n1. Log in to your existing IBM DataPower Gateway WebGUI as the `admin` user.\n2. From the `default` domain, select **Export Configration** in the Control Panel.\n3. Select either **Create a backup of one or more application domains** or **Create a backup of the entire system**, depending on how many domains you intend to migrate.\n4. Follow the system prompts.\n5. Once complete, download the backup ZIP.\n\n### Generating ConfigMap YAMLs for application domains\n\n1. Download the [`migrate-backup.sh`](https://github.com/IBM/datapower-operator-scripts#migrate-backupsh) script.\n\n    This script is designed to automatically generate the ConfigMaps for each application domain from an IBM DataPower Gateway backup:\n\n    - ConfigMap YAML for each domain `.cfg` file\n    - ConfigMap YAML for each domain's `local:///` file system\n\n    For details on the script's invocation, see `./migrate-backup.sh --help`.\n\n2. Run the script against your backup ZIP.\n\n    ```\n    ./migrate-backup.sh backup.zip\n    ```\n\n    **Note:** If you only wish to migrate a single domain, specify the `-d` or `--domain` argument. For example:\n\n    ```\n    ./migrate-backup.sh --domain test backup.zip\n    ```\n\n3. Inspect the generated output for details on where output files are generated, for example,\n\n    ```\n    YAML will be generated in: backup-output\n    ```\n\n4. Review the generated YAML files.\n\n    - Files ending in `-cfg.yaml` contain the domain's configuration in `cfg` format.\n    - Files ending in `-local.yaml` contain the domain's `local:///` file system, in `.tar.gz` format.\n\n    You apply the YAML (both formats) in the next step.\n\n### Creating ConfigMaps in your Kuberetes / OpenShift cluster\n\nIn the appropriate Kubernetes namespace or OpenShift project, apply the generated YAML for each domain that you wish to migrate.\n\n<InlineNotification>\n\nThe below examples use `oc` CLI as example (for OpenShift), Kubernetes users should substitue `kubectl` where appropriate, and make sure to use `-n namespace` to specify the target namespace for resource creation.\n\n</InlineNotification>\n\n**Note:** These ConfigMaps will be used later in [Building the DataPowerService resource spec](/migration/containers#building-the-datapowerservice-resource-spec).\n\n1. (OpenShift only) Using your `oc` CLI, switch to the project (namespace) you wish to deploy the migrated IBM DataPower Gateway.\n\n    ```\n    oc project <namespace>\n    ```\n\n2. Apply the generated YAML files. Be sure to apply all YAML files for each domain you wish to migrate.\n\n    Example of single domain with a `cfg` and `local` YAML each:\n\n    ```bash\n    cd backup-output\n    oc apply -f domain-cfg.yaml\n    oc apply -f domain-local.yaml\n    ```\n\n    Example using bash scripting to apply all YAMLs from the backup at once:\n\n    ```bash\n    for yaml in $(find backup-output -name '*.yaml'); do\n        oc apply -f $yaml\n    done\n    ```\n\n3. Once the YAML is applied, check the cluster to ensure that everything looks correct:\n\n    ```\n    oc get configmap\n    ```\n\n### Creating Secrets in your Kubernetes / OpenShift cluster\n\nThe TLS keys and certificates used by your IBM DataPower Gateway services must be stored in Kubernetes Secrets.\n\n**Note:** These Secrets will be used later in [Building the DataPowerService resource spec](/migration/containers#building-the-datapowerservice-resource-spec).\n\n1. Gather the keys and certificates you wish to use.\n\n    <InlineNotification kind=\"warning\">\n\n    **Note:** You cannot export the private keys from an existing physical or virtual appliance.\n\n    </InlineNotification>\n\n2. For each key/cert pair or set of crypto, create a Secret with an appropriate name to reference later:\n\n    ```\n    oc create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n    ```\n\n    or for generic (non-TLS) crypto:\n\n    ```\n    oc create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n    ```\n\n    Refer to the Kubernetes [documentation](https://kubernetes.io/docs/concepts/configuration/secret/) for details on the differences among Secrets.\n\n### Creating an admin user credential\n\nFollowing security best-practices, the IBM DataPower Gateway `admin` user credentials are stored in a Kubernetes Secret.\n\nCreate the Secret using `oc` (or `kubectl` for Kubernetes), specifying the password via CLI, and noting the name of the Secret as you will need this later:\n\n```\noc create secret generic admin-credentials --from-literal=password=admin\n```\n\nExample: In the above command, `admin-credentials` is the name of the Secret, and `admin` is the password.\n\n### Building the DataPowerService resource spec\n\n<InlineNotification>\n\n**Recommended:** Open our DataPowerService [API docs](/apis/datapowerservice/v1beta3) for reference as you build your custom resource spec.\n\n</InlineNotification>\n\n1. Open your editor of choice, and start with the following template:\n\n    ```yaml\n    apiVersion: datapower.ibm.com/v1beta3\n    kind: DataPowerService\n    metadata:\n      name: migration-example\n    spec:\n      replicas: 1\n      version: 10.0-cd\n      license:\n        accept: true\n        use: production\n        license: L-RJON-BYDR3Q\n    ```\n\n2. Edit the `spec.version` and `spec.license` to choose your desired firmware version and edition.\n\n    - Refer to our [Licenses guide](/guides/licenses) for appropriate values for `spec.license.license` and how they map to the `spec.version` and `spec.license.use`.\n    - Refer to the [`spec.license`](/apis/datapowerservice/v1beta3#license) and [`spec.version`](/apis/datapowerservice/v1beta3#version) API docs for details on these fields.\n\n\n3. Add a `spec.users` definition for your `admin` user, using the Secret name (`admin-credentials`) created in the [Create an admin user credential](/migration/containers#creating-an-admin-user-credential) step for the value of `passwordSecret`. See the [`spec.users`](/apis/datapowerservice/v1beta3#users) API docs for details.\n\n    For example:\n\n    ```yaml\n    users:\n    - name: admin\n      accessLevel: privileged\n      passwordSecret: admin-credentials\n    ```\n\n4. Add a `spec.domains` definition, with an entry for each application domain you wish to deploy.\n\n    For reference, see the [Domain configuration guide](/guides/domain-configuration).\n\n    As an example, let's assume a domain name of `example`. Let's also assume that we created `example-cfg` and `example-local` ConfigMaps for this domain, containing its configuration and `local:///` file system respectively. The `spec.domains` definition would be:\n\n    ```yaml\n    domains:\n    - name: example\n      dpApp:\n        config:\n        - example-cfg\n        local:\n        - example-local\n    ```\n\n    Next, update the domain object to include any [certs](/guides/domain-configuration#certs) definitions, referencing the Secrets you created in an earlier step containg TLS or other crypto material.\n\n    As an example, let's assume we created a Secret named `example-service` which contains a TLS key/cert pair for a service defined in this `example` application domain. The amended domains spec would be:\n\n    ```yaml\n    domains:\n    - name: example\n      certs:\n      - certType: usrcerts\n        secret: example-service\n      dpApp:\n        config:\n        - example-cfg\n        local:\n        - example-local\n    ```\n\n    Repeat the full procedure in this step for each application domain you wish to deploy.\n\n5. You should now have a complete DataPowerService definition. Putting the above examples together would give us:\n\n    ```yaml\n    apiVersion: datapower.ibm.com/v1beta3\n    kind: DataPowerService\n    metadata:\n      name: migration-example\n    spec:\n      replicas: 1\n      version: 10.0-cd\n      license:\n        accept: true\n        use: production\n        license: L-RJON-BYDR3Q\n      users:\n      - name: admin\n        accessLevel: privileged\n        passwordSecret: admin-credentials\n      domains:\n      - name: example\n        certs:\n        - certType: usrcerts\n          secret: example-service\n        dpApp:\n          config:\n          - example-cfg\n          local:\n          - example-local\n    ```\n\n6. Save the YAML to a file of your choosing. For subsequent examples, we'll use `migration-example.yaml`.\n\n### Deploying the DataPowerService resource\n\n1. Create the DataPowerService resource in the cluster.\n\n    ```\n    oc apply -f migration-example.yaml\n    ```\n\n    For Kubernetes users, where `namespace` is your desired namespace:\n\n    ```\n    kubectl -n namespace -f migration-example.yaml\n    ```\n\n2. Check the status of the deployment to ensure successful migration.\n\n    ```\n    # full view\n    oc get all\n\n    # just the DataPowerService instance(s)\n    oc get dp\n    ```\n\n    For Kubernetes users:\n\n    ```\n    # full view\n    kubectl -n namespace get all\n\n    # just the DataPowerService instance(s)\n    kubectl -n namespace get dp\n    ```\n\n    Refer to our guide on [operand status](/guides/operand-status) for more information.\n\n3. If the DataPowerService is operational and `Ready`, continue on to modernizing your IBM DataPower Gateway workloads.\n\n## Modernize\n\nNow that you have successfully migrated an existing IBM DataPower Gateway workload to Kubernetes / OpenShift leveraging the IBM DataPower Operator, you can begin leveraging features that modernize your deployment.\n\n- Automatically scale your IBM DataPower Gateway pods horizontally or vertically using [Pod Auto-Scaling](/features/pod-auto-scaling).\n- Learn how the IBM DataPower Operator manages IBM DataPower Gateway upgrades in [Operand Upgrades](/features/operand-upgrade).\n<!-- these Link elements are a workaround for https://github.com/carbon-design-system/gatsby-theme-carbon/issues/1134 -->\n- Fine-tune your topology and scheduling of IBM DataPower Gateway pods using <Link to=\"/apis/datapowerservice/v1beta3#affinity\">affinity</Link>, <Link to=\"/apis/datapowerservice/v1beta3#tolerations\">tolerations</Link>, and <Link to=\"/apis/datapowerservice/v1beta3#nodeselector\">nodeSelector</Link> properties in the `DataPowerService` custom resource.\n- Check out our [release notes](/release-notes/cd) for the latest details on features and changes within the IBM DataPower Operator.\n","type":"Mdx","contentDigest":"0fddb490d2e49ce2c5c7d266ae57d913","counter":133,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Migrating to containers","description":"Guide for migrating an existing IBM DataPower Gateway to container deployment using IBM DataPower Operator"},"exports":{},"rawBody":"---\ntitle: Migrating to containers\ndescription: Guide for migrating an existing IBM DataPower Gateway to container deployment using IBM DataPower Operator\n---\n\nimport { Link } from 'gatsby'\n\n<PageDescription>\n\nThis guide provides steps to migrate an existing IBM DataPower Gateway (physical / virtual) to a container-based deployment utilizing the IBM DataPower Operator.\n\n</PageDescription>\n\n## Prepare for your migration\n\nThis guide assumes that you have already installed IBM DataPower Operator; if you have not, see [Getting Started](/getting-started).\n\nAdditionally, ensure that you have:\n\n- working knowledge of our latest [`DataPowerService`](/apis/datapowerservice/v1beta3) API version (`v1beta3`)\n- familiarity with [Domain configuration](/guides/domain-configuration)\n\n## Migrate\n\n### Overview\n\nFollow the steps below to migrate your IBM DataPower Gateway to an IBM DataPower Operator managed deployment:\n\n<AnchorLinks small>\n  <AnchorLink>Backing up your existing IBM DataPower Gateway deployment</AnchorLink>\n  <AnchorLink>Generating ConfigMap YAMLs for application domains</AnchorLink>\n  <AnchorLink>Creating ConfigMaps in your Kuberetes / OpenShift cluster</AnchorLink>\n  <AnchorLink>Creating Secrets in your Kubernetes / OpenShift cluster</AnchorLink>\n  <AnchorLink>Creating an admin user credential</AnchorLink>\n  <AnchorLink>Building the DataPowerService resource spec</AnchorLink>\n  <AnchorLink>Deploying the DataPowerService resource</AnchorLink>\n</AnchorLinks>\n\n### Backing up your existing IBM DataPower Gateway deployment\n\n1. Log in to your existing IBM DataPower Gateway WebGUI as the `admin` user.\n2. From the `default` domain, select **Export Configration** in the Control Panel.\n3. Select either **Create a backup of one or more application domains** or **Create a backup of the entire system**, depending on how many domains you intend to migrate.\n4. Follow the system prompts.\n5. Once complete, download the backup ZIP.\n\n### Generating ConfigMap YAMLs for application domains\n\n1. Download the [`migrate-backup.sh`](https://github.com/IBM/datapower-operator-scripts#migrate-backupsh) script.\n\n    This script is designed to automatically generate the ConfigMaps for each application domain from an IBM DataPower Gateway backup:\n\n    - ConfigMap YAML for each domain `.cfg` file\n    - ConfigMap YAML for each domain's `local:///` file system\n\n    For details on the script's invocation, see `./migrate-backup.sh --help`.\n\n2. Run the script against your backup ZIP.\n\n    ```\n    ./migrate-backup.sh backup.zip\n    ```\n\n    **Note:** If you only wish to migrate a single domain, specify the `-d` or `--domain` argument. For example:\n\n    ```\n    ./migrate-backup.sh --domain test backup.zip\n    ```\n\n3. Inspect the generated output for details on where output files are generated, for example,\n\n    ```\n    YAML will be generated in: backup-output\n    ```\n\n4. Review the generated YAML files.\n\n    - Files ending in `-cfg.yaml` contain the domain's configuration in `cfg` format.\n    - Files ending in `-local.yaml` contain the domain's `local:///` file system, in `.tar.gz` format.\n\n    You apply the YAML (both formats) in the next step.\n\n### Creating ConfigMaps in your Kuberetes / OpenShift cluster\n\nIn the appropriate Kubernetes namespace or OpenShift project, apply the generated YAML for each domain that you wish to migrate.\n\n<InlineNotification>\n\nThe below examples use `oc` CLI as example (for OpenShift), Kubernetes users should substitue `kubectl` where appropriate, and make sure to use `-n namespace` to specify the target namespace for resource creation.\n\n</InlineNotification>\n\n**Note:** These ConfigMaps will be used later in [Building the DataPowerService resource spec](/migration/containers#building-the-datapowerservice-resource-spec).\n\n1. (OpenShift only) Using your `oc` CLI, switch to the project (namespace) you wish to deploy the migrated IBM DataPower Gateway.\n\n    ```\n    oc project <namespace>\n    ```\n\n2. Apply the generated YAML files. Be sure to apply all YAML files for each domain you wish to migrate.\n\n    Example of single domain with a `cfg` and `local` YAML each:\n\n    ```bash\n    cd backup-output\n    oc apply -f domain-cfg.yaml\n    oc apply -f domain-local.yaml\n    ```\n\n    Example using bash scripting to apply all YAMLs from the backup at once:\n\n    ```bash\n    for yaml in $(find backup-output -name '*.yaml'); do\n        oc apply -f $yaml\n    done\n    ```\n\n3. Once the YAML is applied, check the cluster to ensure that everything looks correct:\n\n    ```\n    oc get configmap\n    ```\n\n### Creating Secrets in your Kubernetes / OpenShift cluster\n\nThe TLS keys and certificates used by your IBM DataPower Gateway services must be stored in Kubernetes Secrets.\n\n**Note:** These Secrets will be used later in [Building the DataPowerService resource spec](/migration/containers#building-the-datapowerservice-resource-spec).\n\n1. Gather the keys and certificates you wish to use.\n\n    <InlineNotification kind=\"warning\">\n\n    **Note:** You cannot export the private keys from an existing physical or virtual appliance.\n\n    </InlineNotification>\n\n2. For each key/cert pair or set of crypto, create a Secret with an appropriate name to reference later:\n\n    ```\n    oc create secret tls <my-tls-secret> --key=/path/to/my.crt --cert=/path/to/my.key\n    ```\n\n    or for generic (non-TLS) crypto:\n\n    ```\n    oc create secret generic <my-crypto-secret> --from-file=/path/to/cert --from-file=/path/to/key\n    ```\n\n    Refer to the Kubernetes [documentation](https://kubernetes.io/docs/concepts/configuration/secret/) for details on the differences among Secrets.\n\n### Creating an admin user credential\n\nFollowing security best-practices, the IBM DataPower Gateway `admin` user credentials are stored in a Kubernetes Secret.\n\nCreate the Secret using `oc` (or `kubectl` for Kubernetes), specifying the password via CLI, and noting the name of the Secret as you will need this later:\n\n```\noc create secret generic admin-credentials --from-literal=password=admin\n```\n\nExample: In the above command, `admin-credentials` is the name of the Secret, and `admin` is the password.\n\n### Building the DataPowerService resource spec\n\n<InlineNotification>\n\n**Recommended:** Open our DataPowerService [API docs](/apis/datapowerservice/v1beta3) for reference as you build your custom resource spec.\n\n</InlineNotification>\n\n1. Open your editor of choice, and start with the following template:\n\n    ```yaml\n    apiVersion: datapower.ibm.com/v1beta3\n    kind: DataPowerService\n    metadata:\n      name: migration-example\n    spec:\n      replicas: 1\n      version: 10.0-cd\n      license:\n        accept: true\n        use: production\n        license: L-RJON-BYDR3Q\n    ```\n\n2. Edit the `spec.version` and `spec.license` to choose your desired firmware version and edition.\n\n    - Refer to our [Licenses guide](/guides/licenses) for appropriate values for `spec.license.license` and how they map to the `spec.version` and `spec.license.use`.\n    - Refer to the [`spec.license`](/apis/datapowerservice/v1beta3#license) and [`spec.version`](/apis/datapowerservice/v1beta3#version) API docs for details on these fields.\n\n\n3. Add a `spec.users` definition for your `admin` user, using the Secret name (`admin-credentials`) created in the [Create an admin user credential](/migration/containers#creating-an-admin-user-credential) step for the value of `passwordSecret`. See the [`spec.users`](/apis/datapowerservice/v1beta3#users) API docs for details.\n\n    For example:\n\n    ```yaml\n    users:\n    - name: admin\n      accessLevel: privileged\n      passwordSecret: admin-credentials\n    ```\n\n4. Add a `spec.domains` definition, with an entry for each application domain you wish to deploy.\n\n    For reference, see the [Domain configuration guide](/guides/domain-configuration).\n\n    As an example, let's assume a domain name of `example`. Let's also assume that we created `example-cfg` and `example-local` ConfigMaps for this domain, containing its configuration and `local:///` file system respectively. The `spec.domains` definition would be:\n\n    ```yaml\n    domains:\n    - name: example\n      dpApp:\n        config:\n        - example-cfg\n        local:\n        - example-local\n    ```\n\n    Next, update the domain object to include any [certs](/guides/domain-configuration#certs) definitions, referencing the Secrets you created in an earlier step containg TLS or other crypto material.\n\n    As an example, let's assume we created a Secret named `example-service` which contains a TLS key/cert pair for a service defined in this `example` application domain. The amended domains spec would be:\n\n    ```yaml\n    domains:\n    - name: example\n      certs:\n      - certType: usrcerts\n        secret: example-service\n      dpApp:\n        config:\n        - example-cfg\n        local:\n        - example-local\n    ```\n\n    Repeat the full procedure in this step for each application domain you wish to deploy.\n\n5. You should now have a complete DataPowerService definition. Putting the above examples together would give us:\n\n    ```yaml\n    apiVersion: datapower.ibm.com/v1beta3\n    kind: DataPowerService\n    metadata:\n      name: migration-example\n    spec:\n      replicas: 1\n      version: 10.0-cd\n      license:\n        accept: true\n        use: production\n        license: L-RJON-BYDR3Q\n      users:\n      - name: admin\n        accessLevel: privileged\n        passwordSecret: admin-credentials\n      domains:\n      - name: example\n        certs:\n        - certType: usrcerts\n          secret: example-service\n        dpApp:\n          config:\n          - example-cfg\n          local:\n          - example-local\n    ```\n\n6. Save the YAML to a file of your choosing. For subsequent examples, we'll use `migration-example.yaml`.\n\n### Deploying the DataPowerService resource\n\n1. Create the DataPowerService resource in the cluster.\n\n    ```\n    oc apply -f migration-example.yaml\n    ```\n\n    For Kubernetes users, where `namespace` is your desired namespace:\n\n    ```\n    kubectl -n namespace -f migration-example.yaml\n    ```\n\n2. Check the status of the deployment to ensure successful migration.\n\n    ```\n    # full view\n    oc get all\n\n    # just the DataPowerService instance(s)\n    oc get dp\n    ```\n\n    For Kubernetes users:\n\n    ```\n    # full view\n    kubectl -n namespace get all\n\n    # just the DataPowerService instance(s)\n    kubectl -n namespace get dp\n    ```\n\n    Refer to our guide on [operand status](/guides/operand-status) for more information.\n\n3. If the DataPowerService is operational and `Ready`, continue on to modernizing your IBM DataPower Gateway workloads.\n\n## Modernize\n\nNow that you have successfully migrated an existing IBM DataPower Gateway workload to Kubernetes / OpenShift leveraging the IBM DataPower Operator, you can begin leveraging features that modernize your deployment.\n\n- Automatically scale your IBM DataPower Gateway pods horizontally or vertically using [Pod Auto-Scaling](/features/pod-auto-scaling).\n- Learn how the IBM DataPower Operator manages IBM DataPower Gateway upgrades in [Operand Upgrades](/features/operand-upgrade).\n<!-- these Link elements are a workaround for https://github.com/carbon-design-system/gatsby-theme-carbon/issues/1134 -->\n- Fine-tune your topology and scheduling of IBM DataPower Gateway pods using <Link to=\"/apis/datapowerservice/v1beta3#affinity\">affinity</Link>, <Link to=\"/apis/datapowerservice/v1beta3#tolerations\">tolerations</Link>, and <Link to=\"/apis/datapowerservice/v1beta3#nodeselector\">nodeSelector</Link> properties in the `DataPowerService` custom resource.\n- Check out our [release notes](/release-notes/cd) for the latest details on features and changes within the IBM DataPower Operator.\n","fileAbsolutePath":"/home/travis/build/IBM/datapower-operator-doc/src/pages/migration/containers.mdx"}}}}