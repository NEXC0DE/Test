{"version":3,"sources":["webpack:///./src/pages/features/pod-auto-scaling.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAcN,EAAc,eAC5BO,EAAaP,EAAc,cAC3BQ,EAAqBR,EAAc,sBACnCS,EAAc,CAClBV,gBAEIW,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGX,E,oIACF,mBACD,OAAO,YAACQ,EAAD,KAAeD,EAAiBP,EAAhC,CAAuCW,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,uJAEF,YAACR,EAAD,CAAaQ,QAAQ,eACvB,YAACP,EAAD,CAAYO,QAAQ,cAApB,cACA,YAACP,EAAD,CAAYO,QAAQ,cAApB,oCACA,YAACP,EAAD,CAAYO,QAAQ,cAApB,kCACA,YAACP,EAAD,CAAYO,QAAQ,cAApB,WACA,YAACP,EAAD,CAAYO,QAAQ,cAApB,qBACA,YAACP,EAAD,CAAYO,QAAQ,cAApB,yBAEE,oCACA,4JACA,0DACA,8gBAA6f,mBAAGC,WAAW,KAAQ,CAC/gB,KAAQ,+EADif,6BAA7f,KAGA,wDACA,0fAAye,mBAAGA,WAAW,KAAQ,CAC3f,KAAQ,iFAD6d,2BAAze,KAGA,iCACA,qKAAoJ,mBAAGA,WAAW,KAAQ,CACtK,KAAQ,yEADwI,YAApJ,+GAGA,uLAAsK,0BAAYA,WAAW,KAAvB,yBAAtK,oFAA4T,0BAAYA,WAAW,KAAvB,kBAA5T,8DAAqb,0BAAYA,WAAW,KAAvB,yBAArb,OAA8f,0BAAYA,WAAW,KAAvB,QAA9f,KACA,0JACA,qCACA,+FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kSAeL,sYACG,0BAAYA,WAAW,KAAvB,kCADH,2EACyJ,0BAAYA,WAAW,KAAvB,qCADzJ,iFAEgB,0BAAYA,WAAW,KAAvB,eAFhB,+JAEuO,0BAAYA,WAAW,KAAvB,eAFvO,KAGA,qCACA,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qNAaL,6YAA4X,0BAAYA,WAAW,KAAvB,oBAA5X,2EACkB,0BAAYA,WAAW,KAAvB,qBADlB,gOACgT,0BAAYA,WAAW,KAAvB,oBADhT,KAEA,YAACP,EAAD,CAAoBM,QAAQ,sBAC1B,0CAAyB,0BAAYC,WAAW,KAAvB,OAAzB,qBAA8F,mBAAGA,WAAW,KAAQ,CAChH,KAAQ,8EADkF,8BAA9F,oBAIF,2CACA,oFAAmE,0BAAYA,WAAW,KAAvB,kBAAnE,wPACA,wIAAuH,0BAAYA,WAAW,KAAvB,OAAvH,6fACA,8CACA,+GAA8F,sBAAQA,WAAW,KAAnB,OAA9F,gBAKJH,EAAWI,gBAAiB","file":"component---src-pages-features-pod-auto-scaling-mdx-036afbc6c23de4a877b9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator supports both Horizontal and Vertical pod autoscalers to scale DataPower pods based on memory and CPU.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Background</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Horizontal Pod Autoscaling (HPA)</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Vertical Pod Autoscaling (VPA)</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Details</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Managed resources</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">External autoscalers</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Background`}</h2>\n    <p>{`Pod autoscaling is a very common way of optimizing resource utilization in a Kubernetes cluster. There are two ways of autoscaling.`}</p>\n    <h3>{`Horizontal Pod Autoscaling (HPA)`}</h3>\n    <p>{`In this method, pods are added or removed based on current resource utilization. For e.g when average memory utilization across existing pods is above certain level say 90%, horizontal scaling will add new pods in order to bring down the average utilization to the target value 90%. Similarly, when resource utilization is lower than the target, pods will be removed in order to bring the utilization back up to target level. For more information on how horizontal pod autscaling works, please look at `}<a parentName=\"p\" {...{\n        \"href\": \"https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/\"\n      }}>{`Horizontal Pod Autoscaler`}</a>{`.`}</p>\n    <h3>{`Vertical Pod Autoscaling (VPA)`}</h3>\n    <p>{`This method of scaling does not affect the number of pods. Instead, it affects the resources made available to existing pods. For e.g when a pod is consuming all of its current memory limit, vertical scaling will automatically increase the limit. Similarly, if the pod is not using much of its resource limit, it will automatically decrease the limit for the pods and thus freeing up those unused resources. For more information on how vertical pod autosaling works, please look at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler\"\n      }}>{`Vertical Pod Autoscaler`}</a>{`.`}</p>\n    <h2>{`Details`}</h2>\n    <p>{`DataPower Operator is adding support for HPA and VPA by exposing a limited set of fields in DataPowerService custom resource. Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"/datapower-operator-doc/apis/datapowerservice/v1beta3#podautoscaling\"\n      }}>{`API docs`}</a>{` for specific details on these fields. CPU and memory are the only metrics currently supported for scaling.`}</p>\n    <p>{`Due to a limitation on VPA, one cannot enable both HPA and VPA simultaneously in a cluster. Hence, users are required to choose a scaling method by specifying `}<inlineCode parentName=\"p\">{`podAutoScaling.method`}</inlineCode>{` field to either HPA or VPA. Pod auto scaling can be disabled by either removing `}<inlineCode parentName=\"p\">{`podAutoscaling`}</inlineCode>{` group from DataPowerService custom resource or by setting `}<inlineCode parentName=\"p\">{`podAutoScaling.method`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{`.`}</p>\n    <p>{`One can choose to enable scaling on memory or CPU or both. This is controlled by the settings for HPA and VPA as explained below.`}</p>\n    <h3>{`HPA example`}</h3>\n    <p>{`To enable horizontal scaling of DataPower Pods on both memory and CPU:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  podAutoScaling:\n    method: HPA\n    hpa:\n      targetCPUUtilizationPercentage: 90\n      targetMemoryUtilizationPercentage: 80\n      maxReplicas: 6\n      minReplicas: 2\n`}</code></pre>\n    <p>{`The above example attempts to maintain CPU usage at 90% and memory usage at 80% with a limit of maximum 6 pods. When CPU utilization goes above 90%, new pods will be created upto a maximum of 6. When CPU utilization falls below 90%, one or more pods will be removed to maintain CPU utilization at 90%. Similar logic is used for maintaining memory utilization.\nWhen `}<inlineCode parentName=\"p\">{`targetCPUUtilizationPercentage`}</inlineCode>{` is not specified or set to 0, CPU scaling is disabled. Similarly, when `}<inlineCode parentName=\"p\">{`targetMemoryUtilizationPercentage`}</inlineCode>{` is not specified or set to 0, memory scaling is disabled.\nValue spcified in `}<inlineCode parentName=\"p\">{`minReplicas`}</inlineCode>{` field acts as a floor for replica count in horizontal scaling. This means, at any point in time, total number of DataPower pods will not be lower than the `}<inlineCode parentName=\"p\">{`minReplicas`}</inlineCode>{`.`}</p>\n    <h3>{`VPA example`}</h3>\n    <p>{`To enable vertical scaling of DataPower Pods on both memory and CPU:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  name: example-dpservice\nspec:\n  podAutoScaling:\n    method: VPA\n    vpa:\n      maxAllowedCPU: 8\n      maxAllowedMemory: 16Gi\n`}</code></pre>\n    <p>{`The above example allows a maximum limit of 8 CPU cores and 16GB memory per DataPower pod. When current memory utilization of DataPower container exceeds the resource limit for memory specified in pod.yaml, vertical pod autoscaler will automatically increase the resource limit accordingly and restart the corresponding DataPower Pod. It will not increase the limit beyond `}<inlineCode parentName=\"p\">{`maxAllowedMemory`}</inlineCode>{`. Similar logic is used when increasing CPU limit.\nValues specified in `}<inlineCode parentName=\"p\">{`Resources.Request`}</inlineCode>{` in DataPowerService custom resource acts as a floor for vertical scaling. In other words, when utilization stays low, vertical pod autoscaling will lower the resouce limits up to but not lower than what was specified in `}<inlineCode parentName=\"p\">{`Resouces.Request`}</inlineCode>{`.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Prior to enabling `}<inlineCode parentName=\"p\">{`VPA`}</inlineCode>{`, ensure that the `}<a parentName=\"p\" {...{\n          \"href\": \"/datapower-operator-doc/install/prereqs#optional:-vertical-pod-autoscaler\"\n        }}>{`installation prerequisites`}</a>{` have been met.`}</p>\n    </InlineNotification>\n    <h2>{`Managed resources`}</h2>\n    <p>{`When either HPA or VPA are enabled via the DataPowerService `}<inlineCode parentName=\"p\">{`podAutoScaling`}</inlineCode>{` API, the DataPower Operator will create and manage the underlying HPA or VPA Kubernetes resources. Similar to the StatefulSet, these resources are considered managed resources owned by the operator, and they should not be modified by the user.`}</p>\n    <p>{`When VPA is enabled and configured, the DataPower Operator creates the VPA resource with the update mode set to `}<inlineCode parentName=\"p\">{`Off`}</inlineCode>{`, which means that VPA recommendations are written to the VPA resource but not automatically applied to the target by the autoscaler. This is by design, as the DataPower Operator reads the recommendations from the VPA resource during reconciliation, and applies the updates to the DataPower StatefulSet by modifying the resources in the pod template spec. This is to ensure that recommendations from VPA meet the resource constraints of DataPower containers, such as only supporting whole CPU core counts.`}</p>\n    <h2>{`External autoscalers`}</h2>\n    <p>{`The use of external autoscalers against the DataPowerService or managed StatefulSet is `}<strong parentName=\"p\">{`not`}</strong>{` supported.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}