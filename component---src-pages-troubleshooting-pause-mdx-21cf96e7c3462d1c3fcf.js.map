{"version":3,"sources":["webpack:///./src/pages/troubleshooting/pause.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","type","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAqBN,EAAc,sBACnCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,KAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAG5E,YAACP,EAAD,CAAiBO,QAAQ,mBACvB,2LAEF,oCACA,kCAAiB,0BAAYC,WAAW,KAAvB,oBAAjB,2YACA,gDACA,uDAAsC,0BAAYA,WAAW,KAAvB,oBAAtC,kFAAqL,0BAAYA,WAAW,KAAvB,oBAArL,4FACA,2EAA0D,0BAAYA,WAAW,KAAvB,2BAA1D,8FACA,6CACA,2RACA,wFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wIAQL,8BAAa,0BAAYA,WAAW,KAAvB,cAAb,4DACA,6CAA4B,0BAAYA,WAAW,KAAvB,KAA5B,KAA+E,0BAAYA,WAAW,KAAvB,KAA/E,KAAkI,0BAAYA,WAAW,KAAvB,KAAlI,oBACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,OAApB,+BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,gCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,uCAEF,YAACP,EAAD,CAAoBM,QAAQ,sBAC1B,6FAEF,iCAAgB,0BAAYC,WAAW,KAAvB,2BAAhB,qMAAyR,0BAAYA,WAAW,KAAvB,oBAAzR,qBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iMASL,YAACP,EAAD,CAAoBM,QAAQ,sBAC1B,2CAA0B,0BAAYC,WAAW,KAAvB,oBAA1B,sBAA6G,sBAAQA,WAAW,KAAnB,QAA7G,kEAEF,gFAA+D,0BAAYA,WAAW,KAAvB,WAA/D,oCAAuJ,0BAAYA,WAAW,KAAvB,oBAAvJ,2BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oNAUL,0CACA,yPACA,qFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oIAQL,YAACP,EAAD,CAAoBQ,KAAK,UAAUF,QAAQ,sBACzC,kCAAiB,sBAAQC,WAAW,KAAnB,QAAjB,sBAAgF,0BAAYA,WAAW,KAAvB,UAAhF,oBAAuJ,0BAAYA,WAAW,KAAvB,QAAvJ,kFAEF,oKAAmJ,0BAAYA,WAAW,KAAvB,WAAnJ,oCAA2O,0BAAYA,WAAW,KAAvB,oBAA3O,oCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uMAcTH,EAAWK,gBAAiB","file":"component---src-pages-troubleshooting-pause-mdx-21cf96e7c3462d1c3fcf.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator’s reconciliation of the DataPower StatefulSet can be paused, allowing you to modify the StatefulSet directly for troubleshooting purposes.`}</p>\n    </PageDescription>\n    <h2>{`Background`}</h2>\n    <p>{`While the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` CRD exposes a handful of helpful troubleshooting capabilities such as init script debugging and lifecycle hooks, there are cases where it’s necessary to modify the StatefulSet directly to troubleshoot an issue. This can lead to conflict with the DataPower Operator’s reconciliation of the StatefulSet, because any changes made to the StatefulSet directly can be overwritten by the operator.`}</p>\n    <h2>{`Pausing reconciliation`}</h2>\n    <p>{`To pause reconciliation of the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` custom resource, and the owned StatefulSet, an annotation can be added to the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance. There are two mechanisms supported: auto-expiring pause and indefinite pause.`}</p>\n    <p>{`Both pause mechanisms use the same annotation key: `}<inlineCode parentName=\"p\">{`datapower.ibm.com/pause`}</inlineCode>{`. The difference in their behavior is determined by the value specified in the annotation.`}</p>\n    <h3>{`Auto-expiring pause`}</h3>\n    <p>{`Reconciliation can be paused for a duration of time, after which the pause will lift automatically. Once the time duration expires, the pause annotation is automatically removed by the operator and reconciliation of the StatefulSet will resume automatically.`}</p>\n    <p>{`The syntax for specifying an auto-expiring pause is as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  annotations:\n    datapower.ibm.com/pause: <duration>\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`<duration>`}</inlineCode>{` is a sequence of decimal numbers with time unit suffix.`}</p>\n    <p>{`Valid time units are `}<inlineCode parentName=\"p\">{`s`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`m`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`h`}</inlineCode>{`. Some examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`10m`}</inlineCode>{` would pause for 10 minutes`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`120s`}</inlineCode>{` would pause for 120 seconds`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`1h30m`}</inlineCode>{` would pause for 1 hour 30 minutes`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`The minimum duration that reconciliation can be paused is 1 minute.`}</p>\n    </InlineNotification>\n    <p>{`Once the `}<inlineCode parentName=\"p\">{`datapower.ibm.com/pause`}</inlineCode>{` annotation is added, the operator will generate a second annotation that indicates the expiration timestamp. Below is an example of an instance that has been paused for 10 minutes, and has the `}<inlineCode parentName=\"p\">{`pause-expiration`}</inlineCode>{` timestamp added.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  annotations:\n    datapower.ibm.com/pause: 10m\n    datapower.ibm.com/pause-expiration: \"2021-03-03T20:41:32Z\"\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Note that once the `}<inlineCode parentName=\"p\">{`pause-expiration`}</inlineCode>{` timestamp passes, `}<strong parentName=\"p\">{`both`}</strong>{` pause annotations are automatically removed by the operator.`}</p>\n    </InlineNotification>\n    <p>{`During the time period that reconciliation is paused, a `}<inlineCode parentName=\"p\">{`Warning`}</inlineCode>{` condition will be raised on the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance, for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`status:\n  conditions:\n  - lastTransitionTime: \"2021-03-03T20:31:33Z\"\n    message: Reconciliation is paused until 2021-03-03T20:41:32Z\n    reason: ReconcileWarning\n    status: \"True\"\n    type: Warning\n`}</code></pre>\n    <h3>{`Indefinite pause`}</h3>\n    <p>{`Reconciliation can be paused indefinitely, meaning that the user must manually remove the annotation to resume normal operation. Once the annotation is removed by the user, reconciliation of the StatefulSet resumes normally.`}</p>\n    <p>{`The syntax for specifying an indefinite pause is as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta3\nkind: DataPowerService\nmetadata:\n  annotations:\n    datapower.ibm.com/pause: \"true\"\n`}</code></pre>\n    <InlineNotification type=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`The value `}<strong parentName=\"p\">{`must`}</strong>{` be a string, i.e. `}<inlineCode parentName=\"p\">{`\"true\"`}</inlineCode>{`, just providing `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` will not work and you will receive an error when trying to apply the update.`}</p>\n    </InlineNotification>\n    <p>{`Once this annotation is added, reconciliation will be paused indefinitely, until the annotation is removed by the user. During this time, a `}<inlineCode parentName=\"p\">{`Warning`}</inlineCode>{` condition will be raised on the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` instance indicating the status:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`status:\n  conditions:\n  - lastTransitionTime: \"2021-03-03T20:43:45Z\"\n    message: Reconciliation is paused indefinitely\n    reason: ReconcileWarning\n    status: \"True\"\n    type: Warning\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}