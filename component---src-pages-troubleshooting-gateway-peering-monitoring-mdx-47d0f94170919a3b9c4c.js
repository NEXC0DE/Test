(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{LqGz:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return h}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var n=a("7ljp"),o=a("013z");a("qKvR");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var r,s={},l=(r="PageDescription",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),Object(n.b)("div",e)}),c={_frontmatter:s},p=o.a;function h(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return Object(n.b)(p,i({},c,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)(l,{mdxType:"PageDescription"},Object(n.b)("p",null,"Troubleshooting known issues that can occur when Gateway Peering Monitoring is enabled. This is typically only applicable in API Connect deployments.")),Object(n.b)("p",null,"DataPower’s Gateway Peering functionality provides a datastore among a group of peer gateways for use by other DataPower features, such as the API Connect Gateway Service. The DataPower Operator’s Gateway Peering Monitoring functionality ensures Gateway Peering operates smoothly in a highly dynamic environment such as Kubernetes."),Object(n.b)("p",null,"While, in most circumstances, the Gateway Peering Monitoring functionality is able to effectively maintain stable peering, there are some scenarios that are known to cause problems. We discuss these scenarios below with tips for mitigation and recovery."),Object(n.b)("h2",null,"Loss of Quorum preventing Failover"),Object(n.b)("p",null,"DataPower Gateway Peering operates on a primary-secondary model, in which a leader (i.e., “primary”) is elected from among the peers and data is replicated to the secondary instances. When the secondary peers lose contact with the primary, the secondaries will attempt to failover by electing a new primary."),Object(n.b)("p",null,"Failover usually occurs if there has been a change to the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerService"),"’s pod spec, resulting in the deletion of the DataPower pod acting as the primary peer after which one of the secondary gateways is selected as the new primary; when the replacement pod comes up, it joins the peers as a secondary. This is usually a smooth process with little-to-no impact on the services hosted by the gateways."),Object(n.b)("p",null,"Failover is only possible, however, when the remaining instances have ",Object(n.b)("em",{parentName:"p"},"quorum"),"; that is when greater than half of the known peers are active. In practice, this usuaully means at least 2 of 3 DataPower pods must still be present. If quorum is lost prior to a successful failover, gateway peering will no long function properly."),Object(n.b)("p",null,"In general, the DataPower Operator will recognize a loss of quorum among the gateways and will attempt to reestablish quorum by intelligently selecting which gateway should be primary, based on which has been active longest and is thus most likely to have a complete data replica. However there are cases in which quorum cannot be reestablished and will require manual intervention."),Object(n.b)("p",null,"To mitigate this scenario, avoid deleting multiple pods at a time. If scaling down, scale 1 at a time with several minutes between scale-downs. Alternatively, advanced DataPower users may wish to manually set a specific gateway as the primary via DataPower CLI."),Object(n.b)("p",null,"The most effective way to recover from this is to start with a blank slate. Scale the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerService")," to 0 pods (delete the existing pods if necessary) and delete the DP Operator pod as well. When the replacement DP Operator pod is up and ready, scale the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerService")," to the desired number of pods. Please note that this will result in an API outage which will last until API Manager initiates a dynamic reconfiguration, which may take several minutes."),Object(n.b)("h2",null,"Upgrading from API Connect 10.0.2.x to 10.0.3.x"),Object(n.b)("p",null,"This upgrade path introduces a new gateway peering configuration, which causes incongruent configurations within the gateway cluster during the rolling update. The DP Operator, prior to version 1.5.0, does not properly handle this scenario and may not be able to recover without manual intervention. In the worst case scenario, new pods may never enter a Ready state and are constantly restarted by Kubernetes."),Object(n.b)("p",null,"To mitigate this scenario, disable gateway peering monitoring on the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerMonitor")," custom resource prior to beginning the upgrade. Once the upgrade is complete, reenable gateway peering monitoring."),Object(n.b)("p",null,"The most effective way to recover from this is to start with a blank slate. Scale the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerService")," to 0 pods (delete the existing pods if necessary) and delete the DP Operator pod as well. When the replacement DP Operator pod is up and ready, scale the ",Object(n.b)("inlineCode",{parentName:"p"},"DataPowerService")," to the desired number of pods. Please note that this will result in an API outage which will last until API Manager initiates a dynamic reconfiguration, which may take several minutes."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-troubleshooting-gateway-peering-monitoring-mdx-47d0f94170919a3b9c4c.js.map