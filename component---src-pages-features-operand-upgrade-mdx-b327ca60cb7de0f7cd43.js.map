{"version":3,"sources":["webpack:///./src/pages/features/operand-upgrade.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAcN,EAAc,eAC5BO,EAAaP,EAAc,cAC3BQ,EAAc,CAClBT,gBAEIU,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGV,E,oIACF,mBACD,OAAO,YAACO,EAAD,KAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,cAG5E,YAACR,EAAD,CAAiBQ,QAAQ,mBACvB,sJAEF,YAACP,EAAD,CAAaO,QAAQ,eACvB,YAACN,EAAD,CAAYM,QAAQ,cAApB,oBACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,wBACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,mBACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,sBACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,oCAEE,0CACA,oJAAmI,0BAAYC,WAAW,KAAvB,oBAAnI,6OAA6a,0BAAYA,WAAW,KAAvB,oBAA7a,UACA,8CACA,0DAAyC,0BAAYA,WAAW,KAAvB,oBAAzC,YAAkH,mBAAGA,WAAW,KAAQ,CACpI,KAAQ,wCADsG,WAAlH,mHAEwI,mBAAGA,WAAW,KAAQ,CAC1J,KAAQ,sCAD4H,SAFxI,cAKA,oCAAmB,0BAAYA,WAAW,KAAvB,SAAnB,2BAAgG,0BAAYA,WAAW,KAAvB,WAAhG,4FACA,yCACA,sEAAqD,0BAAYA,WAAW,KAAvB,oBAArD,wCAA0J,0BAAYA,WAAW,KAAvB,WAA1J,KACA,kDAAiC,0BAAYA,WAAW,KAAvB,YAAjC,gCAAsH,0BAAYA,WAAW,KAAvB,WAAtH,SAAmL,0BAAYA,WAAW,KAAvB,YAAnL,2CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6EAEL,8DAA6C,0BAAYA,WAAW,KAAvB,WAA7C,UAA2G,0BAAYA,WAAW,KAAvB,YAA3G,+BACA,4CACA,iNAAgM,0BAAYA,WAAW,KAAvB,WAAhM,WAA+P,0BAAYA,WAAW,KAAvB,oBAA/P,0BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0HASL,wMAAuL,0BAAYA,WAAW,KAAvB,YAAvL,4HACA,yDACA,sDAAqC,0BAAYA,WAAW,KAAvB,oBAArC,6GAA+M,0BAAYA,WAAW,KAAvB,WAA/M,0GAA6W,0BAAYA,WAAW,KAAvB,SAA7W,kFAAif,0BAAYA,WAAW,KAAvB,WAAjf,qDAA0lB,0BAAYA,WAAW,KAAvB,SAA1lB,KACA,mEAAkD,0BAAYA,WAAW,KAAvB,oBAAlD,cAA6H,0BAAYA,WAAW,KAAvB,8BAA7H,wBAA4N,mBAAGA,WAAW,KAAQ,CAC9O,KAAQ,2CADgN,QAA5N,MAOJH,EAAWI,gBAAiB","file":"component---src-pages-features-operand-upgrade-mdx-b327ca60cb7de0f7cd43.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/datapower-operator-doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The DataPower Operator supports both manual and automatic upgrades of the IBM DataPower Pods it manages via the StatefulSet.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Upgrade Strategy</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Specifying a Version</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Manual Upgrades</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Automatic Upgrades</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Checking the Reconciled Version</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Upgrade Strategy`}</h2>\n    <p>{`The DataPower pods are managed by a StatefulSet, which is managed by the DataPower Operator. When any change is made to the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` Custom Resource (CR), the StatefulSet performs a rolling update to serialize the change across the pods. This same strategy is used to perform an upgrade, as the specified version of the DataPower operand is simply a property in the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` spec.`}</p>\n    <h2>{`Specifying a Version`}</h2>\n    <p>{`One of the required fields of the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` spec is `}<a parentName=\"p\" {...{\n        \"href\": \"/apis/datapowerservice/spec#version\"\n      }}>{`version`}</a>{`. This property will determine which version the operator reconciles, unless a custom image is provided via the `}<a parentName=\"p\" {...{\n        \"href\": \"/apis/datapowerservice/spec#image\"\n      }}>{`image`}</a>{` property.`}</p>\n    <p>{`If a custom `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` is provided, the exact `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{` must also be specified to inform the operator of what base image version is being used.`}</p>\n    <h3>{`Manual Upgrades`}</h3>\n    <p>{`To manually schedule the upgrade, an existing `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` CR can be modified to specify a new `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{`.`}</p>\n    <p>{`For example, letâ€™s assume `}<inlineCode parentName=\"p\">{`10.0.0.0`}</inlineCode>{` was the currently specified `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`10.0.0.1`}</inlineCode>{` was available. To apply the CR change:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc patch dp <name> -p '{\"spec\":{\"version\":\"10.0.0.1\"}}' --type=merge\n`}</code></pre>\n    <p>{`This change could also be applied via `}<inlineCode parentName=\"p\">{`oc edit`}</inlineCode>{` or by `}<inlineCode parentName=\"p\">{`oc apply`}</inlineCode>{` with the appropriate YAML.`}</p>\n    <h3>{`Automatic Upgrades`}</h3>\n    <p>{`The DataPower Operator supports automatically upgrading the DataPower pods when new versions are available. To subscribe to an upgrade channel, specify an available channel name as the `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` CR spec. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: datapower.ibm.com/v1beta2\nkind: DataPowerService\nmetadata:\n  name: example\nspec:\n  version: 10.0.0\n`}</code></pre>\n    <p>{`In the above example, the DataPower Operator will automatically apply the latest version when the CR is created. When a new version becomes available within that channel (i.e. `}<inlineCode parentName=\"p\">{`10.0.0.x`}</inlineCode>{`), the operator will automatically reconcile the new version, using the same Upgrade Strategy as above (rolling update).`}</p>\n    <h2>{`Checking the Reconciled Version`}</h2>\n    <p>{`The reconciled version of the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` will always represent the current version being used by the StatefulSet. If a channel is supplied in the `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{` field, the reconciled version will reflect the chosen latest version within that channel. If a custom `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` is provided, the reconciled version will reflect the version specified in the `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{` property, which is expected to match that of the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{`.`}</p>\n    <p>{`The reconciled version is available in the `}<inlineCode parentName=\"p\">{`DataPowerService`}</inlineCode>{` status at `}<inlineCode parentName=\"p\">{`status.versions.reconciled`}</inlineCode>{`. More on this topic `}<a parentName=\"p\" {...{\n        \"href\": \"/apis/datapowerservice/status#versions\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}